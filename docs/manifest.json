{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.0", "generated_at": "2022-10-24T23:00:32.457236Z", "invocation_id": "6fd31fd9-705c-4a17-970c-184e6523297a", "env": {}, "project_id": "78b710e22ee0ef88f169e7d2896c0bf3", "user_id": "8268eefe-e8f7-472e-ab2a-a92f0135d76d", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"seed.lever_integration_tests.opportunity_source": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "opportunity_source"], "unique_id": "seed.lever_integration_tests.opportunity_source", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "opportunity_source.csv", "original_file_path": "seeds/opportunity_source.csv", "name": "opportunity_source", "alias": "opportunity_source", "checksum": {"name": "sha256", "checksum": "d24e0a00e7430a8e3429caf305ef515b3878f18f4d391605a90e70e10b117819"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1666651814.870817, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`opportunity_source`"}, "seed.lever_integration_tests.stage": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "stage"], "unique_id": "seed.lever_integration_tests.stage", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "stage.csv", "original_file_path": "seeds/stage.csv", "name": "stage", "alias": "stage", "checksum": {"name": "sha256", "checksum": "4c2112602ac26f252f0c21d19912f3896293b75b16a70164c9a95e795ced08d8"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}"}}, "created_at": 1666651814.876205, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stage`"}, "seed.lever_integration_tests.requisition_offer": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "requisition_offer"], "unique_id": "seed.lever_integration_tests.requisition_offer", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "requisition_offer.csv", "original_file_path": "seeds/requisition_offer.csv", "name": "requisition_offer", "alias": "requisition_offer", "checksum": {"name": "sha256", "checksum": "0726c2eb274aa8d1c9318d03837e905bfa117cb1c7ab7d805f955ae10bd5e91b"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1666651814.877304, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`requisition_offer`"}, "seed.lever_integration_tests.posting_tag": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "posting_tag"], "unique_id": "seed.lever_integration_tests.posting_tag", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "posting_tag.csv", "original_file_path": "seeds/posting_tag.csv", "name": "posting_tag", "alias": "posting_tag", "checksum": {"name": "sha256", "checksum": "e443cbfa7306fe0a3f86d7adde2383a34135910f6039cafc5781020e39f1b539"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}, "quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1666651814.8783062, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`posting_tag`"}, "seed.lever_integration_tests.opportunity_tag": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "opportunity_tag"], "unique_id": "seed.lever_integration_tests.opportunity_tag", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "opportunity_tag.csv", "original_file_path": "seeds/opportunity_tag.csv", "name": "opportunity_tag", "alias": "opportunity_tag", "checksum": {"name": "sha256", "checksum": "3a442b2a7b7000577f8982d4df9567389972b12dc24cf090445449bd10954f69"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}, "quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1666651814.879328, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`opportunity_tag`"}, "seed.lever_integration_tests.interview": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "canceled_at": "timestamp", "created_at": "timestamp", "date": "timestamp", "duration": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "interview"], "unique_id": "seed.lever_integration_tests.interview", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "interview.csv", "original_file_path": "seeds/interview.csv", "name": "interview", "alias": "interview", "checksum": {"name": "sha256", "checksum": "1a4cfcdb6f817b8fd7ffcb71f405b6d99bb613a9ef74890e8d23e21d4181762d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"canceled_at": "timestamp", "created_at": "timestamp", "date": "timestamp", "duration": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1666651814.880369, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`interview`"}, "seed.lever_integration_tests.requisition_posting": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "requisition_posting"], "unique_id": "seed.lever_integration_tests.requisition_posting", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "requisition_posting.csv", "original_file_path": "seeds/requisition_posting.csv", "name": "requisition_posting", "alias": "requisition_posting", "checksum": {"name": "sha256", "checksum": "2a02c21edd77a26d3e87f723cf73a7cfec3a133e98ffc987b44a119ed586d4af"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1666651814.881453, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`requisition_posting`"}, "seed.lever_integration_tests.contact_email": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "contact_email"], "unique_id": "seed.lever_integration_tests.contact_email", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "contact_email.csv", "original_file_path": "seeds/contact_email.csv", "name": "contact_email", "alias": "contact_email", "checksum": {"name": "sha256", "checksum": "c5dcbb7dc71fc1c17337583fe99b8aa4547953ff0664af373bb9079b9ac9f249"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1666651814.8823922, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`contact_email`"}, "seed.lever_integration_tests.archive_reason": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "archive_reason"], "unique_id": "seed.lever_integration_tests.archive_reason", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "archive_reason.csv", "original_file_path": "seeds/archive_reason.csv", "name": "archive_reason", "alias": "archive_reason", "checksum": {"name": "sha256", "checksum": "b80a36339225fbd8aec3cca503a4acb59d693873181189ddd6ec1594a96f769e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1666651814.883327, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`archive_reason`"}, "seed.lever_integration_tests.requisition": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "requisition"], "unique_id": "seed.lever_integration_tests.requisition", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "requisition.csv", "original_file_path": "seeds/requisition.csv", "name": "requisition", "alias": "requisition", "checksum": {"name": "sha256", "checksum": "e31793620eeeea320baadec76f3b8d41158161fee985daffa2dd902e2b45ee43"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_at": "timestamp"}}, "created_at": 1666651814.884423, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`requisition`"}, "seed.lever_integration_tests.posting": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "posting"], "unique_id": "seed.lever_integration_tests.posting", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "posting.csv", "original_file_path": "seeds/posting.csv", "name": "posting", "alias": "posting", "checksum": {"name": "sha256", "checksum": "bb502cc63484744b5a1a41997b756dc3d67fdd842f5b364d6fab074da8ca2fef"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_at": "timestamp", "updated_at": "timestamp"}}, "created_at": 1666651814.885419, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`posting`"}, "seed.lever_integration_tests.contact_link": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "contact_id": "string", "link": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "contact_link"], "unique_id": "seed.lever_integration_tests.contact_link", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "contact_link.csv", "original_file_path": "seeds/contact_link.csv", "name": "contact_link", "alias": "contact_link", "checksum": {"name": "sha256", "checksum": "5b1c4caf76d03cae2fc3fb26a6c7d6dc2e6d98e84e5f0de22842c87cc8f26e7f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"contact_id": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}", "link": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}"}}, "created_at": 1666651814.886409, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`contact_link`"}, "seed.lever_integration_tests.posting_interview": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "posting_interview"], "unique_id": "seed.lever_integration_tests.posting_interview", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "posting_interview.csv", "original_file_path": "seeds/posting_interview.csv", "name": "posting_interview", "alias": "posting_interview", "checksum": {"name": "sha256", "checksum": "5e20cb33e3e829217381a5d48f0822a3587986024367305a84ee4d86ff508c85"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1666651814.887369, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`posting_interview`"}, "seed.lever_integration_tests.feedback_form_field": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "field_index": "int64", "value_index": "int64", "value_date": "timestamp", "value_decimal": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "feedback_form_field"], "unique_id": "seed.lever_integration_tests.feedback_form_field", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "feedback_form_field.csv", "original_file_path": "seeds/feedback_form_field.csv", "name": "feedback_form_field", "alias": "feedback_form_field", "checksum": {"name": "sha256", "checksum": "62a34a726a075be7077ea84510c0943a75dc297b383bc992675535d35f4392be"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"field_index": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "value_index": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "value_date": "timestamp", "value_decimal": "numeric"}}, "created_at": 1666651814.888695, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`feedback_form_field`"}, "seed.lever_integration_tests.resume": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "string", "file_ext": "string", "created_at": "timestamp", "file_uploaded_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "resume"], "unique_id": "seed.lever_integration_tests.resume", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "resume.csv", "original_file_path": "seeds/resume.csv", "name": "resume", "alias": "resume", "checksum": {"name": "sha256", "checksum": "05780a1e4999d56a2bde7ec842727f6d2fec8eefe7c9e4aa293aa211c3306ae8"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}", "file_ext": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}", "created_at": "timestamp", "file_uploaded_at": "timestamp"}}, "created_at": 1666651814.889725, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`resume`"}, "seed.lever_integration_tests.feedback_form": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "completed_at": "timestamp", "created_at": "timestamp", "deleted_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "feedback_form"], "unique_id": "seed.lever_integration_tests.feedback_form", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "feedback_form.csv", "original_file_path": "seeds/feedback_form.csv", "name": "feedback_form", "alias": "feedback_form", "checksum": {"name": "sha256", "checksum": "3dff5e1d1b6a2ce4d176da09eec6f4c82ea1faadc0c79645ade70a939baddaa5"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"completed_at": "timestamp", "created_at": "timestamp", "deleted_at": "timestamp"}}, "created_at": 1666651814.890732, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`feedback_form`"}, "seed.lever_integration_tests.interviewer_user": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "interviewer_user"], "unique_id": "seed.lever_integration_tests.interviewer_user", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "interviewer_user.csv", "original_file_path": "seeds/interviewer_user.csv", "name": "interviewer_user", "alias": "interviewer_user", "checksum": {"name": "sha256", "checksum": "23ce920d6e9d7b88a952e9d48b977b32e9048ea6f2be9ef4e7bfb07d0dfbc0f7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1666651814.891701, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`interviewer_user`"}, "seed.lever_integration_tests.user": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created_at": "timestamp", "deactivated_at": "timestamp", "id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "user"], "unique_id": "seed.lever_integration_tests.user", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "user.csv", "original_file_path": "seeds/user.csv", "name": "user", "alias": "user", "checksum": {"name": "sha256", "checksum": "31b541928487ff6554edd4f1376d11c00975d1d3fa6ec1c0980f2bacce831a45"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_at": "timestamp", "deactivated_at": "timestamp", "id": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}"}}, "created_at": 1666651814.892782, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`user`"}, "seed.lever_integration_tests.interview_feedback": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "interview_feedback"], "unique_id": "seed.lever_integration_tests.interview_feedback", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "interview_feedback.csv", "original_file_path": "seeds/interview_feedback.csv", "name": "interview_feedback", "alias": "interview_feedback", "checksum": {"name": "sha256", "checksum": "60ebeb8536585de4647dd437a21cc5058baa9a860f65ee468cc7ba46b5b2d608"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1666651814.8937569, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`interview_feedback`"}, "seed.lever_integration_tests.application": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "archived_at": "timestamp", "created_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "application"], "unique_id": "seed.lever_integration_tests.application", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "application.csv", "original_file_path": "seeds/application.csv", "name": "application", "alias": "application", "checksum": {"name": "sha256", "checksum": "7f17bc47b4fe6b10cf5f1036b79db241e8057a5e0ea0700ddff317ff0756c0f6"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"archived_at": "timestamp", "created_at": "timestamp"}}, "created_at": 1666651814.8947148, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`application`"}, "seed.lever_integration_tests.opportunity": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "archived_at": "timestamp", "created_at": "timestamp", "data_protection_contact_expires_at": "timestamp", "data_protection_store_expires_at": "timestamp", "last_advanced_at": "timestamp", "last_interaction_at": "timestamp", "snoozed_until": "timestamp", "updated_at": "timestamp", "id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "opportunity"], "unique_id": "seed.lever_integration_tests.opportunity", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "opportunity.csv", "original_file_path": "seeds/opportunity.csv", "name": "opportunity", "alias": "opportunity", "checksum": {"name": "sha256", "checksum": "d00fc7045da1442617440687a522329b074ffa544b1b31cee7ba9d35a83a5f74"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"archived_at": "timestamp", "created_at": "timestamp", "data_protection_contact_expires_at": "timestamp", "data_protection_store_expires_at": "timestamp", "last_advanced_at": "timestamp", "last_interaction_at": "timestamp", "snoozed_until": "timestamp", "updated_at": "timestamp", "id": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}"}}, "created_at": 1666651814.895761, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`opportunity`"}, "seed.lever_integration_tests.contact_phone": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "index": "int64", "value": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "contact_phone"], "unique_id": "seed.lever_integration_tests.contact_phone", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "contact_phone.csv", "original_file_path": "seeds/contact_phone.csv", "name": "contact_phone", "alias": "contact_phone", "checksum": {"name": "sha256", "checksum": "0985df9af38ebc9972cd3c167387878eef6d3efb8a196d7cda5e43ba4c8a0815"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"index": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "value": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}"}}, "created_at": 1666651814.896878, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`contact_phone`"}, "seed.lever_integration_tests.opportunity_stage_history": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "updated_at": "timestamp", "stage_id": "string", "opportunity_id": "string", "updater_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "opportunity_stage_history"], "unique_id": "seed.lever_integration_tests.opportunity_stage_history", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "opportunity_stage_history.csv", "original_file_path": "seeds/opportunity_stage_history.csv", "name": "opportunity_stage_history", "alias": "opportunity_stage_history", "checksum": {"name": "sha256", "checksum": "8db9222a038c094119a46422727e9262f6f2105a46ab7bd2661e921b5a74f71f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"updated_at": "timestamp", "stage_id": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}", "opportunity_id": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}", "updater_id": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}"}}, "created_at": 1666651814.897877, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`opportunity_stage_history`"}, "seed.lever_integration_tests.offer": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_integration_tests", "offer"], "unique_id": "seed.lever_integration_tests.offer", "raw_code": "", "language": "sql", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "offer.csv", "original_file_path": "seeds/offer.csv", "name": "offer", "alias": "offer", "checksum": {"name": "sha256", "checksum": "e588d250a4b8bfcb78422a9c319bd4c0cec2450a4d1ce66d0d1403436e051293"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_at": "timestamp"}}, "created_at": 1666651814.8988879, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`offer`"}, "model.lever.lever__posting_enhanced": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.lever_source.stg_lever__posting", "model.lever.int_lever__posting_tags", "model.lever.int_lever__posting_applications", "model.lever.int_lever__posting_interviews", "model.lever_source.stg_lever__requisition_posting", "model.lever_source.stg_lever__user"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "lever__posting_enhanced"], "unique_id": "model.lever.lever__posting_enhanced", "raw_code": "with posting as (\n\n    select *\n    from {{ var('posting') }}\n),\n\n{% if var('lever_using_posting_tag', True) %}\nposting_tags as (\n\n    select *\n    from {{ ref('int_lever__posting_tags') }}\n),\n{% endif %}\n\nposting_applications as (\n\n    select *\n    from {{ ref('int_lever__posting_applications') }}\n),\n\nposting_interviews as (\n\n    select *\n    from {{ ref('int_lever__posting_interviews') }}\n),\n\n{% if var('lever_using_requisitions', True) %}\nposting_requisitions as (\n\n    select \n        posting_id,\n        count(requisition_id) as count_requisitions\n    from {{ var('requisition_posting') }}\n\n    group by 1\n),\n{% endif %}\n\nlever_user as (\n\n    select *\n    from {{ var('user') }}\n),\n\nfinal as (\n\n    select \n        posting.*,\n        posting_applications.first_app_sent_at,\n\n        coalesce(posting_applications.count_referred_applications, 0) as count_referred_applications,\n        coalesce(posting_applications.count_posting_applications, 0) as count_posting_applications,\n        coalesce(posting_applications.count_manual_user_applications, 0) as count_manual_user_applications,\n        coalesce(posting_applications.count_opportunities, 0) as count_opportunities,\n        coalesce(posting_applications.count_open_opportunities, 0) as count_open_opportunities,\n\n        coalesce(posting_interviews.count_interviews, 0) as count_interviews,\n        coalesce(posting_interviews.count_interviewees, 0) as count_interviewees,\n\n        {% if var('lever_using_requisitions', True) %}\n        coalesce(posting_requisitions.count_requisitions, 0) as count_requisitions,\n        posting_requisitions.posting_id is not null as has_requisition,\n        {% endif %}\n\n        {% if var('lever_using_posting_tag', True) %}\n        posting_tags.tags,\n        {% endif %}\n\n        lever_user.full_name as posting_hiring_manager_name\n\n    from posting\n\n    left join posting_applications\n        on posting.posting_id = posting_applications.posting_id\n    left join posting_interviews\n        on posting.posting_id = posting_interviews.posting_id\n\n    {% if var('lever_using_requisitions', True) %}\n    left join posting_requisitions\n        on posting.posting_id = posting_requisitions.posting_id\n    {% endif %}\n\n    {% if var('lever_using_posting_tag', True) %}\n    left join posting_tags\n        on posting.posting_id = posting_tags.posting_id\n    {% endif %}\n\n    left join lever_user \n        on posting_applications.posting_hiring_manager_user_id = lever_user.user_id\n)\n\nselect * from final", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "lever__posting_enhanced.sql", "original_file_path": "models/lever__posting_enhanced.sql", "name": "lever__posting_enhanced", "alias": "lever__posting_enhanced", "checksum": {"name": "sha256", "checksum": "08d8500b20bd7e933a8e9b72ee349c41961b47f98d60d8a17286c67b82daf8ee"}, "tags": [], "refs": [["stg_lever__posting"], ["int_lever__posting_tags"], ["int_lever__posting_applications"], ["int_lever__posting_interviews"], ["stg_lever__requisition_posting"], ["stg_lever__user"]], "sources": [], "metrics": [], "description": "Table capturing job postings.", "columns": {"posting_id": {"name": "posting_id", "description": "Unique ID of the job posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_commitment": {"name": "job_commitment", "description": "Tag for job position work type (e.g. Full-time, Part-time, Internship).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_department": {"name": "job_department", "description": "Tag for the department to which the job posting's team belongs, if present.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_level": {"name": "job_level", "description": "Tag for job posting level (e.g. Senior, Junior). Note - this has been deprecated by Lever  but is currently maintained for backward compatibility.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_location": {"name": "job_location", "description": "Tag for job position location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_team": {"name": "job_team", "description": "Tag for the team to which the job posting belongs (a sub-category of department).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_description": {"name": "content_description", "description": "Job posting description that is shown at the top of the job's page, as plaintext.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the posting was created in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the id of the USER who created the job posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the id of the USER who owns the posting. The posting owner is the  individual who is directly responsible for managing all candidates who are applied to that role.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_code": {"name": "requisition_code", "description": "Array of requisition codes associated with this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_state": {"name": "current_state", "description": "Current status of the posting, which may include 'published', 'internal' (called 'unlisted' in the UI), 'closed', 'draft', 'pending' (awaiting approval), and 'rejected'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "Title of the job posting role.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the posting was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_app_sent_at": {"name": "first_app_sent_at", "description": "Timestamp of when the first application was submitted to this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_referred_applications": {"name": "count_referred_applications", "description": "Count of how many applications were referred to this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_posting_applications": {"name": "count_posting_applications", "description": "Count of how many applications were submitted through the posting (including via an agency).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_manual_user_applications": {"name": "count_manual_user_applications", "description": "Count of how many applications have been manually submitted by internal users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_opportunities": {"name": "count_opportunities", "description": "Count of how many opportunities applied to this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_open_opportunities": {"name": "count_open_opportunities", "description": "Count of how many currently open opprtunities applied to this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_interviews": {"name": "count_interviews", "description": "Count of the number of interviews conducted for this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_interviewees": {"name": "count_interviewees", "description": "Count of opportunities interviewed for this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_requisitions": {"name": "count_requisitions", "description": "Number of requisitions associated with this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_requisition": {"name": "has_requisition", "description": "Boolean that is true if the posting has a requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Comma-separated aggregated list of tags.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_hiring_manager_name": {"name": "posting_hiring_manager_name", "description": "Full name of the user who is hiring manager of this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/lever.yml", "compiled_path": "target/compiled/lever/models/lever__posting_enhanced.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.298849, "compiled_code": "with  __dbt__cte__int_lever__posting_tags as (\n\n\nwith posting_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tag`\n),\n\nagg_tags as (\n\n    select\n        posting_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from posting_tag\n    group by 1\n)\n\nselect * from agg_tags\n),  __dbt__cte__int_lever__posting_applications as (\nwith application as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nagg_applications as (\n\n    select \n        posting_id,\n        min(created_at) as first_app_sent_at,\n\n        -- these should be the only types of applications\n        sum(case when type = 'referral' then 1 else 0 end) as count_referred_applications,\n        sum(case when type = 'posting' or type = 'agency' then 1 else 0 end) as count_posting_applications,\n        sum(case when type = 'user' then 1 else 0 end) as count_manual_user_applications,\n\n        count(distinct opportunity_id) as count_opportunities,\n        count(distinct case when archived_at is null then opportunity_id end) as count_open_opportunities\n\n    from application\n\n    group by 1\n),\n\norder_hiring_managers as (\n\n    select \n        posting_id,\n        posting_hiring_manager_user_id,\n        row_number() over( partition by posting_id order by created_at desc) as row_num \n    from application\n),\n\nlast_hiring_manager as (\n\n    select *\n    from order_hiring_managers \n    where row_num = 1\n),\n\nfinal as (\n\n    select \n        agg_applications.*,\n        last_hiring_manager.posting_hiring_manager_user_id\n\n    from agg_applications\n    join last_hiring_manager using(posting_id)\n)\n\nselect * from final\n),  __dbt__cte__int_lever__posting_interviews as (\nwith posting_interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_interview`\n\n),\n\ninterview as (\n\n    select \n        interview_id,\n        opportunity_id \n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\nposting_interview_metrics as (\n    \n    select\n        posting_interview.posting_id,\n        count(distinct posting_interview.interview_id) as count_interviews,\n        count(distinct interview.opportunity_id) as count_interviewees\n\n    from posting_interview \n    join interview using(interview_id)\n    group by 1\n\n)\n\nselect * from posting_interview_metrics\n),posting as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting`\n),\n\n\nposting_tags as (\n\n    select *\n    from __dbt__cte__int_lever__posting_tags\n),\n\n\nposting_applications as (\n\n    select *\n    from __dbt__cte__int_lever__posting_applications\n),\n\nposting_interviews as (\n\n    select *\n    from __dbt__cte__int_lever__posting_interviews\n),\n\n\nposting_requisitions as (\n\n    select \n        posting_id,\n        count(requisition_id) as count_requisitions\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_posting`\n\n    group by 1\n),\n\n\nlever_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nfinal as (\n\n    select \n        posting.*,\n        posting_applications.first_app_sent_at,\n\n        coalesce(posting_applications.count_referred_applications, 0) as count_referred_applications,\n        coalesce(posting_applications.count_posting_applications, 0) as count_posting_applications,\n        coalesce(posting_applications.count_manual_user_applications, 0) as count_manual_user_applications,\n        coalesce(posting_applications.count_opportunities, 0) as count_opportunities,\n        coalesce(posting_applications.count_open_opportunities, 0) as count_open_opportunities,\n\n        coalesce(posting_interviews.count_interviews, 0) as count_interviews,\n        coalesce(posting_interviews.count_interviewees, 0) as count_interviewees,\n\n        \n        coalesce(posting_requisitions.count_requisitions, 0) as count_requisitions,\n        posting_requisitions.posting_id is not null as has_requisition,\n        \n\n        \n        posting_tags.tags,\n        \n\n        lever_user.full_name as posting_hiring_manager_name\n\n    from posting\n\n    left join posting_applications\n        on posting.posting_id = posting_applications.posting_id\n    left join posting_interviews\n        on posting.posting_id = posting_interviews.posting_id\n\n    \n    left join posting_requisitions\n        on posting.posting_id = posting_requisitions.posting_id\n    \n\n    \n    left join posting_tags\n        on posting.posting_id = posting_tags.posting_id\n    \n\n    left join lever_user \n        on posting_applications.posting_hiring_manager_user_id = lever_user.user_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__posting_tags", "sql": " __dbt__cte__int_lever__posting_tags as (\n\n\nwith posting_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tag`\n),\n\nagg_tags as (\n\n    select\n        posting_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from posting_tag\n    group by 1\n)\n\nselect * from agg_tags\n)"}, {"id": "model.lever.int_lever__posting_applications", "sql": " __dbt__cte__int_lever__posting_applications as (\nwith application as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nagg_applications as (\n\n    select \n        posting_id,\n        min(created_at) as first_app_sent_at,\n\n        -- these should be the only types of applications\n        sum(case when type = 'referral' then 1 else 0 end) as count_referred_applications,\n        sum(case when type = 'posting' or type = 'agency' then 1 else 0 end) as count_posting_applications,\n        sum(case when type = 'user' then 1 else 0 end) as count_manual_user_applications,\n\n        count(distinct opportunity_id) as count_opportunities,\n        count(distinct case when archived_at is null then opportunity_id end) as count_open_opportunities\n\n    from application\n\n    group by 1\n),\n\norder_hiring_managers as (\n\n    select \n        posting_id,\n        posting_hiring_manager_user_id,\n        row_number() over( partition by posting_id order by created_at desc) as row_num \n    from application\n),\n\nlast_hiring_manager as (\n\n    select *\n    from order_hiring_managers \n    where row_num = 1\n),\n\nfinal as (\n\n    select \n        agg_applications.*,\n        last_hiring_manager.posting_hiring_manager_user_id\n\n    from agg_applications\n    join last_hiring_manager using(posting_id)\n)\n\nselect * from final\n)"}, {"id": "model.lever.int_lever__posting_interviews", "sql": " __dbt__cte__int_lever__posting_interviews as (\nwith posting_interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_interview`\n\n),\n\ninterview as (\n\n    select \n        interview_id,\n        opportunity_id \n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\nposting_interview_metrics as (\n    \n    select\n        posting_interview.posting_id,\n        count(distinct posting_interview.interview_id) as count_interviews,\n        count(distinct interview.opportunity_id) as count_interviewees\n\n    from posting_interview \n    join interview using(interview_id)\n    group by 1\n\n)\n\nselect * from posting_interview_metrics\n)"}], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`lever__posting_enhanced`"}, "model.lever.lever__requisition_enhanced": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.lever.int_lever__requisition_users", "model.lever_source.stg_lever__requisition_posting", "model.lever_source.stg_lever__requisition_offer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "lever__requisition_enhanced"], "unique_id": "model.lever.lever__requisition_enhanced", "raw_code": "{{ config(enabled=var('lever_using_requisitions', True)) }}\n\nwith requisition_users as (\n\n    select *\n    from {{ ref('int_lever__requisition_users') }}\n),\n\nrequisition_posting as (\n\n    select \n        requisition_id,\n        count(posting_id) as count_postings\n    from {{ var('requisition_posting') }}\n\n    group by 1\n),\n\nrequisition_offer as (\n\n    select \n        requisition_id,\n        count(offer_id) as count_offers\n    from {{ var('requisition_offer') }}\n\n    group by 1\n),\n\nfinal as (\n\n    select \n        requisition_users.*,\n        coalesce(requisition_posting.count_postings, 0) as count_postings,\n        requisition_posting.requisition_id is not null as has_posting,\n\n        coalesce(requisition_offer.count_offers, 0) as count_offers,\n        requisition_offer.requisition_id is not null as has_offer\n\n    from requisition_users\n    left join requisition_posting \n        on requisition_users.requisition_id = requisition_posting.requisition_id\n    left join requisition_offer\n        on requisition_users.requisition_id = requisition_offer.requisition_id\n)\n\nselect * from final", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "lever__requisition_enhanced.sql", "original_file_path": "models/lever__requisition_enhanced.sql", "name": "lever__requisition_enhanced", "alias": "lever__requisition_enhanced", "checksum": {"name": "sha256", "checksum": "d0af2c214a0cf8cb3d14dba2ff32fb0fdda905f4482e3d8752e583f0d4b74ad8"}, "tags": [], "refs": [["int_lever__requisition_users"], ["stg_lever__requisition_posting"], ["stg_lever__requisition_offer"]], "sources": [], "metrics": [], "description": "Table capturing requisitions, if enabled.", "columns": {"requisition_id": {"name": "requisition_id", "description": "Unique id of the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_backfill": {"name": "is_backfill", "description": "Boolean that is true if the requisition represents a backfill or new headcount.  If unspecified, defaults to false. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_currency": {"name": "compensation_band_currency", "description": "The ISO currency code associated with the requisition's compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_interval": {"name": "compensation_band_interval", "description": "The string representing the interval of payment for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_max": {"name": "compensation_band_max", "description": "The high bound for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_min": {"name": "compensation_band_min", "description": "The low bound for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the requisition was first created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the USER who created the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employment_status": {"name": "employment_status", "description": "The work type of the requisition ('full-time', 'part-time', 'intern', 'contractor', or 'temp-worker').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_hired": {"name": "headcount_hired", "description": "The number of filled seats / openings on the requisition, or the string, 'unlimited'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_infinite": {"name": "headcount_infinite", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_total_allotted": {"name": "headcount_total_allotted", "description": "Total headcount allotted for this requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hiring_manager_user_id": {"name": "hiring_manager_user_id", "description": "Foreign key referencing the USER who is the hiring manager for this requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "internal_notes": {"name": "internal_notes", "description": "Free form text for notes and meta-data about the requisition, visible to anyone who can see the requisition in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_location": {"name": "job_location", "description": "The location associated with the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "The human-readable name for the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the USER who owns the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_code": {"name": "requisition_code", "description": "The unique HRIS requisition code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the requisition. Can be 'open', 'onHold', 'closed', or 'draft'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_team": {"name": "job_team", "description": "The team associated with the requisition", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_name": {"name": "creator_name", "description": "Full name of the user who created the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_owner_name": {"name": "requisition_owner_name", "description": "Full user name of the user who owns the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hiring_manager_name": {"name": "hiring_manager_name", "description": "Full user name of the requisition's hiring manager.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_postings": {"name": "count_postings", "description": "Number of postings associated with this requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_posting": {"name": "has_posting", "description": "Boolean that is true if the requisition has a posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_offers": {"name": "count_offers", "description": "Total count of extended offers associated with this requisition. Note - includes offers regardless of their status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_offer": {"name": "has_offer", "description": "Boolean that is true if the requisition has any offer associated with it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/lever.yml", "compiled_path": "target/compiled/lever/models/lever__requisition_enhanced.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "created_at": 1666651815.302758, "compiled_code": "\n\nwith  __dbt__cte__int_lever__requisition_users as (\n\n\nwith lever_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nrequisition as (\n    \n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition`\n),\n\n-- necessary users = req owner, creator, hiring manager\ngrab_user_names as (\n\n    select\n        requisition.*,\n        creator.full_name as creator_name,\n        requisition_owner.full_name as requisition_owner_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from requisition\n\n    left join lever_user as creator\n        on requisition.creator_user_id = creator.user_id\n\n    left join lever_user as hiring_manager\n        on requisition.hiring_manager_user_id = hiring_manager.user_id\n\n    \n    left join lever_user as requisition_owner\n        on requisition.owner_user_id = requisition_owner.user_id\n\n)\n\nselect * from grab_user_names\n),requisition_users as (\n\n    select *\n    from __dbt__cte__int_lever__requisition_users\n),\n\nrequisition_posting as (\n\n    select \n        requisition_id,\n        count(posting_id) as count_postings\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_posting`\n\n    group by 1\n),\n\nrequisition_offer as (\n\n    select \n        requisition_id,\n        count(offer_id) as count_offers\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_offer`\n\n    group by 1\n),\n\nfinal as (\n\n    select \n        requisition_users.*,\n        coalesce(requisition_posting.count_postings, 0) as count_postings,\n        requisition_posting.requisition_id is not null as has_posting,\n\n        coalesce(requisition_offer.count_offers, 0) as count_offers,\n        requisition_offer.requisition_id is not null as has_offer\n\n    from requisition_users\n    left join requisition_posting \n        on requisition_users.requisition_id = requisition_posting.requisition_id\n    left join requisition_offer\n        on requisition_users.requisition_id = requisition_offer.requisition_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__requisition_users", "sql": " __dbt__cte__int_lever__requisition_users as (\n\n\nwith lever_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nrequisition as (\n    \n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition`\n),\n\n-- necessary users = req owner, creator, hiring manager\ngrab_user_names as (\n\n    select\n        requisition.*,\n        creator.full_name as creator_name,\n        requisition_owner.full_name as requisition_owner_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from requisition\n\n    left join lever_user as creator\n        on requisition.creator_user_id = creator.user_id\n\n    left join lever_user as hiring_manager\n        on requisition.hiring_manager_user_id = hiring_manager.user_id\n\n    \n    left join lever_user as requisition_owner\n        on requisition.owner_user_id = requisition_owner.user_id\n\n)\n\nselect * from grab_user_names\n)"}], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`lever__requisition_enhanced`"}, "model.lever.lever__opportunity_stage_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.datediff"], "nodes": ["model.lever.lever__opportunity_enhanced", "model.lever_source.stg_lever__stage", "model.lever_source.stg_lever__user", "model.lever_source.stg_lever__opportunity_stage_history"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "lever__opportunity_stage_history"], "unique_id": "model.lever.lever__opportunity_stage_history", "raw_code": "with opportunity as (\n\n    select *\n    from {{ ref('lever__opportunity_enhanced') }}\n),\n\nstage as (\n\n    select *\n    from {{ var('stage') }}\n),\n\nlever_user as (\n\n    select *\n    from {{ var('user') }}\n),\n\nopp_stage_history as (\n\n    select \n        opportunity_id,\n        updated_at as valid_from,\n        stage_id,\n        updater_user_id,\n        to_stage_index as stage_index_in_pipeline,\n        lead(updated_at) over (partition by opportunity_id order by updated_at asc) as valid_ending_at\n\n    from {{ var('opportunity_stage_history') }}\n),\n\n-- joining first to get opportunity.archived_at for the valid_ending_at column\njoin_opportunity_stage_history as (\n\n    select \n        opp_stage_history.opportunity_id,\n        opportunity.contact_name as opportunity_contact_name,\n        opp_stage_history.valid_from,\n        coalesce(opp_stage_history.valid_ending_at, opportunity.archived_at, {{ dbt.current_timestamp_backcompat() }}) as valid_ending_at,\n        stage.stage_name as stage,\n\n        opp_stage_history.stage_id,\n        opp_stage_history.stage_index_in_pipeline,\n\n        lever_user.full_name as updater_user_name,\n        opportunity.archive_reason, -- if archived later\n        opportunity.job_title,\n        opportunity.job_department,\n        opportunity.job_location,\n        opportunity.job_team,\n        opportunity.application_type,\n        opportunity.sources as application_sources,\n        opportunity.hiring_manager_name,\n        opportunity.opportunity_owner_name\n\n    from opp_stage_history\n\n    join stage on opp_stage_history.stage_id = stage.stage_id\n    left join lever_user on lever_user.user_id = opp_stage_history.updater_user_id \n    join opportunity on opportunity.opportunity_id = opp_stage_history.opportunity_id\n),\n\nfinal_time_in_stages as (\n\n    select\n       *,\n        {{ dbt.datediff('valid_from', 'valid_ending_at', 'day') }} as days_in_stage\n        \n    from join_opportunity_stage_history\n\n)\n\nselect * from final_time_in_stages", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "lever__opportunity_stage_history.sql", "original_file_path": "models/lever__opportunity_stage_history.sql", "name": "lever__opportunity_stage_history", "alias": "lever__opportunity_stage_history", "checksum": {"name": "sha256", "checksum": "f2d66ac15b11150d82d478718f067e35b09e315370eb91d3b6bfbbdc1b012704"}, "tags": [], "refs": [["lever__opportunity_enhanced"], ["stg_lever__stage"], ["stg_lever__user"], ["stg_lever__opportunity_stage_history"]], "sources": [], "metrics": [], "description": "Table capturing each stage that an opportunity has advanced too.", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the id of the OPPORTUNITY.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "Timestamp of when the opportunity was changed to this stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "Foreign key referencing the STAGE that the opportunity was changed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_index_in_pipeline": {"name": "stage_index_in_pipeline", "description": "The index of the stage in the pipeline at the time the stage change occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_ending_at": {"name": "valid_ending_at", "description": "Timestamp of when the opportunity left this stage (either by advancing or being archived).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage": {"name": "stage", "description": "Name of the stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updater_user_name": {"name": "updater_user_name", "description": "Full name of the user who updated the candidate to this stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_contact_name": {"name": "opportunity_contact_name", "description": "Contact full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archive_reason": {"name": "archive_reason", "description": "Reason that the opportunity was ultimately archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "Title of the job posting role.Title of the job posting role.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_department": {"name": "job_department", "description": "Tag for the department to which the job posting's team belongs, if present.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_location": {"name": "job_location", "description": "Tag for job position location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_team": {"name": "job_team", "description": "Tag for the team to which the job posting belongs (a sub-category of department).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_type": {"name": "application_type", "description": "Type of the application. An application can be of type referral, user, or posting. Applications of type  referral are created when a user refers a candidate for a job posting. Applications have type user when they  are applied manually to a posting in Lever. Applications have type posting when a candidate applies to a job  posting through your company's jobs page.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_sources": {"name": "application_sources", "description": "Aggregated list of the channels through which this opportunity was sourced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hiring_manager_name": {"name": "hiring_manager_name", "description": "Full name of the hiring manager of role for which the opportunity applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_owner_name": {"name": "opportunity_owner_name", "description": "Full name of the user who owns the opportunity in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_in_stage": {"name": "days_in_stage", "description": "The number of calendar days in which the opportunity has remained in this stage (ie until they advanced or were archived).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/lever.yml", "compiled_path": "target/compiled/lever/models/lever__opportunity_stage_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.295101, "compiled_code": "with opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`lever__opportunity_enhanced`\n),\n\nstage as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__stage`\n),\n\nlever_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopp_stage_history as (\n\n    select \n        opportunity_id,\n        updated_at as valid_from,\n        stage_id,\n        updater_user_id,\n        to_stage_index as stage_index_in_pipeline,\n        lead(updated_at) over (partition by opportunity_id order by updated_at asc) as valid_ending_at\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_stage_history`\n),\n\n-- joining first to get opportunity.archived_at for the valid_ending_at column\njoin_opportunity_stage_history as (\n\n    select \n        opp_stage_history.opportunity_id,\n        opportunity.contact_name as opportunity_contact_name,\n        opp_stage_history.valid_from,\n        coalesce(opp_stage_history.valid_ending_at, opportunity.archived_at, current_timestamp) as valid_ending_at,\n        stage.stage_name as stage,\n\n        opp_stage_history.stage_id,\n        opp_stage_history.stage_index_in_pipeline,\n\n        lever_user.full_name as updater_user_name,\n        opportunity.archive_reason, -- if archived later\n        opportunity.job_title,\n        opportunity.job_department,\n        opportunity.job_location,\n        opportunity.job_team,\n        opportunity.application_type,\n        opportunity.sources as application_sources,\n        opportunity.hiring_manager_name,\n        opportunity.opportunity_owner_name\n\n    from opp_stage_history\n\n    join stage on opp_stage_history.stage_id = stage.stage_id\n    left join lever_user on lever_user.user_id = opp_stage_history.updater_user_id \n    join opportunity on opportunity.opportunity_id = opp_stage_history.opportunity_id\n),\n\nfinal_time_in_stages as (\n\n    select\n       *,\n        \n\n    datetime_diff(\n        cast(valid_ending_at as datetime),\n        cast(valid_from as datetime),\n        day\n    )\n\n   as days_in_stage\n        \n    from join_opportunity_stage_history\n\n)\n\nselect * from final_time_in_stages", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`lever__opportunity_stage_history`"}, "model.lever.lever__opportunity_enhanced": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.datediff"], "nodes": ["model.lever.int_lever__opportunity_contact_info", "model.lever_source.stg_lever__stage", "model.lever_source.stg_lever__archive_reason", "model.lever.int_lever__opportunity_tags", "model.lever_source.stg_lever__offer", "model.lever.lever__posting_enhanced", "model.lever.lever__interview_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "lever__opportunity_enhanced"], "unique_id": "model.lever.lever__opportunity_enhanced", "raw_code": "with opportunity as (\n\n    select *\n    from {{ ref('int_lever__opportunity_contact_info') }}\n),\n\nstage as (\n\n    select *\n    from {{ var('stage') }}\n),\n\narchive_reason as (\n\n    select *\n    from {{ var('archive_reason') }}\n),\n\nopportunity_tags as (\n\n    select *\n    from {{ ref('int_lever__opportunity_tags') }}\n),\n\n-- gotta do this in case an opportunity has been sent multiple offer versions\norder_offers as (\n\n    select \n        *,\n        row_number() over(partition by opportunity_id order by created_at desc) as row_num \n    from {{ var('offer') }}\n),\n\nlast_offer as (\n\n    select *\n    from order_offers \n    where row_num = 1\n),\n\n-- to grab info about the job\nposting as (\n\n    select *\n    from {{ ref('lever__posting_enhanced') }}\n),\n\n-- to produce some interview metrics \ninterview_metrics as (\n\n    select \n        opportunity_id,\n        count(distinct interview_id) as count_interviews,\n        count(distinct interviewer_user_id) as count_interviewers, \n        max(occurred_at) as latest_interview_scheduled_at,\n        max(case when interviewer_is_hiring_manager then 1 else 0 end) as has_interviewed_w_hiring_manager\n\n    from {{ ref('lever__interview_enhanced') }}\n\n    group by 1\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n\n        stage.stage_name as current_stage,\n        opportunity_tags.tags, \n        archive_reason.archive_reason_title as archive_reason,\n\n        posting.job_title,\n        posting.job_commitment,\n        posting.job_department,\n        posting.job_level,\n        posting.job_location,\n        posting.job_team,\n        posting.current_state as current_state_of_job_posting,\n        -- time from first application for this posting\n        {{ dbt.datediff('posting.first_app_sent_at', 'opportunity.created_at', 'day') }} as opp_created_n_days_after_first_app,\n\n        last_offer.opportunity_id is not null as has_offer,\n        last_offer.status as current_offer_status,\n\n        coalesce(interview_metrics.count_interviews, 0) as count_interviews,\n        coalesce(interview_metrics.count_interviewers, 0) as count_interviewers,\n        interview_metrics.latest_interview_scheduled_at,\n        case when coalesce(interview_metrics.has_interviewed_w_hiring_manager, 0) = 0 then false else true end as has_interviewed_w_hiring_manager\n\n    from opportunity\n    join stage  \n        on opportunity.stage_id = stage.stage_id\n    left join archive_reason\n        on opportunity.archived_reason_id = archive_reason.archive_reason_id\n    left join opportunity_tags\n        on opportunity.opportunity_id = opportunity_tags.opportunity_id\n    left join last_offer\n        on opportunity.opportunity_id = last_offer.opportunity_id\n    left join posting\n        on opportunity.posting_id = posting.posting_id\n    left join interview_metrics \n        on opportunity.opportunity_id = interview_metrics.opportunity_id \n)\n\nselect * from final", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "lever__opportunity_enhanced.sql", "original_file_path": "models/lever__opportunity_enhanced.sql", "name": "lever__opportunity_enhanced", "alias": "lever__opportunity_enhanced", "checksum": {"name": "sha256", "checksum": "5890a5bdc137d8f9fc820489bc5252192ddaccf4f8126bd2ee358c646c169eb4"}, "tags": [], "refs": [["int_lever__opportunity_contact_info"], ["stg_lever__stage"], ["stg_lever__archive_reason"], ["int_lever__opportunity_tags"], ["stg_lever__offer"], ["lever__posting_enhanced"], ["lever__interview_enhanced"]], "sources": [], "metrics": [], "description": "Table of unique opportunities.", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Unique ID of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_at": {"name": "archived_at", "description": "Timestamp of when the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_reason_id": {"name": "archived_reason_id", "description": "Foreign key referencing the ARCHIVE_REASON for which the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "Foreign key referencing the CONTACT info of the candidate applying in this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the opportunity was created (ie when the candidate clicked \"apply\" on your company website).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_data_protection_contact_allowed": {"name": "is_data_protection_contact_allowed", "description": "Boolean that is true if relevant data policy regulations allow for contacting  this opportunity's candidate.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_contact_expires_at": {"name": "data_protection_contact_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_data_protection_store_allowed": {"name": "is_data_protection_store_allowed", "description": "Boolean that is true if relevant data policy regulations allow for storing  this opportunity record.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_store_expires_at": {"name": "data_protection_store_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_headline": {"name": "contact_headline", "description": "Contact headline, typically a list of previous companies where the contact has worked or  schools that the contact has attended.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_anonymized": {"name": "is_anonymized", "description": "Boolean that is true if the opportunity has been anonymized (therefore fully anonymizing  the contact and removing their *personal* information).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_advanced_at": {"name": "last_advanced_at", "description": "Timestamp of when the candidate advanced to their current stage in the hiring pipeline.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_interaction_at": {"name": "last_interaction_at", "description": "Timestamp of when the Opportunity profile was last interacted with. See interactions [here](https://help.lever.co/hc/en-us/articles/205697619).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_location": {"name": "contact_location", "description": "Current contact location of the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_name": {"name": "contact_name", "description": "Contact full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origin": {"name": "origin", "description": "The way in which the opportunity was added to lever. Includes 'agency', 'applied', 'internal', 'referred', 'sourced', and 'university'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the id of the USER who owns this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snoozed_until": {"name": "snoozed_until", "description": "Timestamp of when the current snooze period of this opportunity ends (if snoozed).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "Foreign key referencing the ID of the current stage of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the opportunity was last updated in lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_id": {"name": "application_id", "description": "Unique ID of the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "Any additional comments from the candidate included in the job application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "The candidate's current company or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_hiring_manager_user_id": {"name": "posting_hiring_manager_user_id", "description": "Foreign key referencing the id of the USER who is the job posting's hiring manager, at the time  the application was submitted.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_id": {"name": "posting_id", "description": "Foreign key referencing the job POSTING for which the candidate applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_owner_user_id": {"name": "posting_owner_user_id", "description": "Foreign key referencing the id of the USER who owns this posting at the time the candidate applied.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_user_id": {"name": "referrer_user_id", "description": "The user ID of the candidate's referrer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_id": {"name": "requisition_id", "description": "If the application was archived as hired against a requisition, a foreign key referencing the id of the REQUISITION against which the application was hired.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_type": {"name": "application_type", "description": "Type of the application. An application can be of type referral, user, or posting. Applications of type  referral are created when a user refers a candidate for a job posting. Applications have type user when they  are applied manually to a posting in Lever. Applications have type posting when a candidate applies to a job  posting through your company's jobs page.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_owner_name": {"name": "opportunity_owner_name", "description": "Full name of the user who owns the opportunity in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_name": {"name": "referrer_name", "description": "Full name of the user who referred the candidate for this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hiring_manager_name": {"name": "hiring_manager_name", "description": "Full name of the hiring manager of role for which the opportunity applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sources": {"name": "sources", "description": "Aggregated list of the channels through which this opportunity was sourced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resume_download_url": {"name": "resume_download_url", "description": "Resume file download URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "emails": {"name": "emails", "description": "Aggregated list of email addresses associated with this contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phones": {"name": "phones", "description": "Aggregated list of the contact's phone numbers (with phone types).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "linkedin_link": {"name": "linkedin_link", "description": "Contact URL that contains 'linkedin.com' in it.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "github_link": {"name": "github_link", "description": "Contact URL that contains 'github.com' in it.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_stage": {"name": "current_stage", "description": "The stage that the opportunity is currently at in the pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Aggregated coma-separated list of the tags associated with this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archive_reason": {"name": "archive_reason", "description": "Reason given for archiving this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "Title of the job posting role.Title of the job posting role.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_commitment": {"name": "job_commitment", "description": "Tag for job position work type (e.g. Full-time, Part-time, Internship).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_department": {"name": "job_department", "description": "Tag for the department to which the job posting's team belongs, if present.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_level": {"name": "job_level", "description": "Tag for job posting level (e.g. Senior, Junior). Note - this has been deprecated by Lever  but is currently maintained for backward compatibility.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_location": {"name": "job_location", "description": "Tag for job position location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_team": {"name": "job_team", "description": "Tag for the team to which the job posting belongs (a sub-category of department).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_state_of_job_posting": {"name": "current_state_of_job_posting", "description": "Current status of the posting, which may include 'published', 'internal' (called 'unlisted' in the UI), 'closed', 'draft', 'pending' (awaiting approval), and 'rejected'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opp_created_n_days_after_first_app": {"name": "opp_created_n_days_after_first_app", "description": "How many days this opportunity was created after the first application was sent to this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_offer": {"name": "has_offer", "description": "Boolean that is true if the opportunity has been extended an offer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_offer_status": {"name": "current_offer_status", "description": "A string describing the current status of the offer. Can include:  draft - the offer is still under construction approval-sent - the offer needs approval approved - the offer has been approved sent - the offer has been sent through Lever sent-manually - the offer has been sent to the candidate outside of Lever opened - the candidate has opened the offer denied - the candidate denied the offer signed - the candidate signed the offer\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_interviews": {"name": "count_interviews", "description": "The number of interviews that have been scheduled for this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_interviewers": {"name": "count_interviewers", "description": "Count of how many internal users the opportunity has spoken to via interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latest_interview_scheduled_at": {"name": "latest_interview_scheduled_at", "description": "Timestamp of when the opportunity's most recent (or perhaps future) interview was scheduled for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_interviewed_w_hiring_manager": {"name": "has_interviewed_w_hiring_manager", "description": "Boolean that is true if the opportunity has interviewed with the hiring manager.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/lever.yml", "compiled_path": "target/compiled/lever/models/lever__opportunity_enhanced.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.292385, "compiled_code": "with  __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n),  __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n),  __dbt__cte__int_lever__opportunity_contact_info as (\nwith opportunity as (\n\n    -- this builds off the source opportunity table, incorporating application and internal user data. \n    select *\n    from __dbt__cte__int_lever__opportunity_users\n),\n\nopportunity_sources as (\n\n    select \n        opportunity_id,\n        \n    string_agg(source, ', ')\n\n as sources\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_source`\n\n    group by 1\n),\n\ncontact_info as (\n\n    select *\n    from __dbt__cte__int_lever__contact_info\n),\n\norder_resumes as (\n\n    select \n        *,\n        row_number() over(partition by opportunity_id order by created_at desc) as row_num\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume`\n),\n\nlatest_resume as (\n\n    select *\n    from order_resumes \n\n    where row_num = 1\n),\n\nfinal as (\n\n    select\n        opportunity.*,\n        opportunity_sources.sources,\n        latest_resume.file_download_url as resume_download_url,\n        contact_info.phones,\n        contact_info.emails,\n        contact_info.linkedin_link,\n        contact_info.github_link\n\n    from opportunity\n\n    left join opportunity_sources\n        on opportunity.opportunity_id = opportunity_sources.opportunity_id\n\n    left join latest_resume \n        on latest_resume.opportunity_id = opportunity.opportunity_id\n\n    left join contact_info\n        on contact_info.contact_id = opportunity.contact_id\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_lever__opportunity_tags as (\nwith opportunity_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tag`\n),\n\nagg_tags as (\n\n    select\n        opportunity_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from opportunity_tag\n    group by 1\n)\n\nselect * from agg_tags\n),opportunity as (\n\n    select *\n    from __dbt__cte__int_lever__opportunity_contact_info\n),\n\nstage as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__stage`\n),\n\narchive_reason as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__archive_reason`\n),\n\nopportunity_tags as (\n\n    select *\n    from __dbt__cte__int_lever__opportunity_tags\n),\n\n-- gotta do this in case an opportunity has been sent multiple offer versions\norder_offers as (\n\n    select \n        *,\n        row_number() over(partition by opportunity_id order by created_at desc) as row_num \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__offer`\n),\n\nlast_offer as (\n\n    select *\n    from order_offers \n    where row_num = 1\n),\n\n-- to grab info about the job\nposting as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`lever__posting_enhanced`\n),\n\n-- to produce some interview metrics \ninterview_metrics as (\n\n    select \n        opportunity_id,\n        count(distinct interview_id) as count_interviews,\n        count(distinct interviewer_user_id) as count_interviewers, \n        max(occurred_at) as latest_interview_scheduled_at,\n        max(case when interviewer_is_hiring_manager then 1 else 0 end) as has_interviewed_w_hiring_manager\n\n    from `dbt-package-testing`.`lever_integration_tests`.`lever__interview_enhanced`\n\n    group by 1\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n\n        stage.stage_name as current_stage,\n        opportunity_tags.tags, \n        archive_reason.archive_reason_title as archive_reason,\n\n        posting.job_title,\n        posting.job_commitment,\n        posting.job_department,\n        posting.job_level,\n        posting.job_location,\n        posting.job_team,\n        posting.current_state as current_state_of_job_posting,\n        -- time from first application for this posting\n        \n\n    datetime_diff(\n        cast(opportunity.created_at as datetime),\n        cast(posting.first_app_sent_at as datetime),\n        day\n    )\n\n   as opp_created_n_days_after_first_app,\n\n        last_offer.opportunity_id is not null as has_offer,\n        last_offer.status as current_offer_status,\n\n        coalesce(interview_metrics.count_interviews, 0) as count_interviews,\n        coalesce(interview_metrics.count_interviewers, 0) as count_interviewers,\n        interview_metrics.latest_interview_scheduled_at,\n        case when coalesce(interview_metrics.has_interviewed_w_hiring_manager, 0) = 0 then false else true end as has_interviewed_w_hiring_manager\n\n    from opportunity\n    join stage  \n        on opportunity.stage_id = stage.stage_id\n    left join archive_reason\n        on opportunity.archived_reason_id = archive_reason.archive_reason_id\n    left join opportunity_tags\n        on opportunity.opportunity_id = opportunity_tags.opportunity_id\n    left join last_offer\n        on opportunity.opportunity_id = last_offer.opportunity_id\n    left join posting\n        on opportunity.posting_id = posting.posting_id\n    left join interview_metrics \n        on opportunity.opportunity_id = interview_metrics.opportunity_id \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__opportunity_application", "sql": " __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n)"}, {"id": "model.lever.int_lever__opportunity_users", "sql": " __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n)"}, {"id": "model.lever.int_lever__contact_info", "sql": " __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n)"}, {"id": "model.lever.int_lever__opportunity_contact_info", "sql": " __dbt__cte__int_lever__opportunity_contact_info as (\nwith opportunity as (\n\n    -- this builds off the source opportunity table, incorporating application and internal user data. \n    select *\n    from __dbt__cte__int_lever__opportunity_users\n),\n\nopportunity_sources as (\n\n    select \n        opportunity_id,\n        \n    string_agg(source, ', ')\n\n as sources\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_source`\n\n    group by 1\n),\n\ncontact_info as (\n\n    select *\n    from __dbt__cte__int_lever__contact_info\n),\n\norder_resumes as (\n\n    select \n        *,\n        row_number() over(partition by opportunity_id order by created_at desc) as row_num\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume`\n),\n\nlatest_resume as (\n\n    select *\n    from order_resumes \n\n    where row_num = 1\n),\n\nfinal as (\n\n    select\n        opportunity.*,\n        opportunity_sources.sources,\n        latest_resume.file_download_url as resume_download_url,\n        contact_info.phones,\n        contact_info.emails,\n        contact_info.linkedin_link,\n        contact_info.github_link\n\n    from opportunity\n\n    left join opportunity_sources\n        on opportunity.opportunity_id = opportunity_sources.opportunity_id\n\n    left join latest_resume \n        on latest_resume.opportunity_id = opportunity.opportunity_id\n\n    left join contact_info\n        on contact_info.contact_id = opportunity.contact_id\n)\n\nselect *\nfrom final\n)"}, {"id": "model.lever.int_lever__opportunity_tags", "sql": " __dbt__cte__int_lever__opportunity_tags as (\nwith opportunity_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tag`\n),\n\nagg_tags as (\n\n    select\n        opportunity_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from opportunity_tag\n    group by 1\n)\n\nselect * from agg_tags\n)"}], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`lever__opportunity_enhanced`"}, "model.lever.lever__interview_enhanced": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.type_timestamp", "macro.dbt.datediff"], "nodes": ["model.lever.int_lever__interview_users", "model.lever.int_lever__opportunity_users"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "lever__interview_enhanced"], "unique_id": "model.lever.lever__interview_enhanced", "raw_code": "-- note: each record is a unique interview-interviewer feedback form combo\n-- an interview can have multiple interviewers, and interviewers can have multiple feedback forms\nwith interview as (\n\n    select \n        *,\n        cast( {{ dbt.dateadd(datepart='minute', interval='duration_minutes', from_date_or_timestamp='occurred_at') }}\n            as {{ dbt.type_timestamp() }} ) as ended_at\n    from {{ ref('int_lever__interview_users') }}\n),\n\n--  just to grab stufff\nopportunity as (\n\n    select *\n    from {{ ref('int_lever__opportunity_users') }}\n),\n\njoin_w_opportunity as (\n\n    select\n        interview.*,\n        opportunity.opportunity_owner_name,\n        opportunity.referrer_name,\n        opportunity.hiring_manager_name,\n        coalesce(lower(interview.inteviewer_name) = lower(opportunity.hiring_manager_name), false) as interviewer_is_hiring_manager,\n        opportunity.contact_name as interviewee_name,\n        opportunity.contact_location as interviewee_location,\n        opportunity.origin as interviewee_origin,\n        opportunity.contact_id as interviewee_contact_id,\n        {{ dbt.datediff('opportunity.created_at', 'interview.occurred_at', 'day') }} as days_between_opp_created_and_interview,\n        opportunity.last_advanced_at > interview.ended_at as has_advanced_since_interview\n\n    from interview\n    join opportunity using(opportunity_id)\n)\n\nselect * from join_w_opportunity", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "lever__interview_enhanced.sql", "original_file_path": "models/lever__interview_enhanced.sql", "name": "lever__interview_enhanced", "alias": "lever__interview_enhanced", "checksum": {"name": "sha256", "checksum": "ec6791480efa50cb1c1bbdd2ada49955fc3474546740d2c908907aa021afce27"}, "tags": [], "refs": [["int_lever__interview_users"], ["int_lever__opportunity_users"]], "sources": [], "metrics": [], "description": "Table in which each row is a unique interview-feedback combo. Interviews without feedback appear here as well.", "columns": {"canceled_at": {"name": "canceled_at", "description": "Timestamp of when the interview was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the interview was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the USER who created the interview in lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "Date + time at which the interview was set to occur.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_minutes": {"name": "duration_minutes", "description": "Interview duration in minutes, minimum value is 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_reminder_frequency": {"name": "feedback_reminder_frequency", "description": "Frequency of feedback reminders (i.e. once, daily, frequently, none). Defaults to 'frequently' which is every 6 hours.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gcal_event_url": {"name": "gcal_event_url", "description": "Google calendar event url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_id": {"name": "interview_id", "description": "Unique ID of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "Interview location. Usually the name of a booked conference room but can also be a  phone number to call.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "Interview note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY being interviewed for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "panel_id": {"name": "panel_id", "description": "Unique id of the PANEL this interview belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_stage_id": {"name": "opportunity_stage_id", "description": "Foreign key referencing the STAGE that the candidate was in at the time  the interview was scheduled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "Subject of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Name of timezone in which interview was scheduled to occur.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_form_id": {"name": "feedback_form_id", "description": "Unique id of the feedback form.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_completer_user_id": {"name": "feedback_completer_user_id", "description": "Foreign key referencing the USER who completed the feedback.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_completed_at": {"name": "feedback_completed_at", "description": "Timestamp of when the feedback form was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_form_instructions": {"name": "feedback_form_instructions", "description": "Guidelines given for how give a feedback score.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "score_system_value": {"name": "score_system_value", "description": "Overall rating (1-4 scale) to the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_form_title": {"name": "feedback_form_title", "description": "Form title. This can be edited in Feedback and Form Settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interviewer_user_id": {"name": "interviewer_user_id", "description": "Foreign key referencing the USER that interviewed the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inteviewer_name": {"name": "inteviewer_name", "description": "Full name of the interviewer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interviewer_email": {"name": "interviewer_email", "description": "Email associated with the interviewer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_completer_name": {"name": "feedback_completer_name", "description": "Full name of the user who completed the feedback form.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_coordinator_name": {"name": "interview_coordinator_name", "description": "Full name of the user who created the interviewer in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "Timestamp of when the interview was scheduled to end.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_owner_name": {"name": "opportunity_owner_name", "description": "Full name of the user who owns the opportunity in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_name": {"name": "referrer_name", "description": "Full name of the user who referred the candidate for this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hiring_manager_name": {"name": "hiring_manager_name", "description": "Full name of the hiring manager of role for which the opportunity applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interviewer_is_hiring_manager": {"name": "interviewer_is_hiring_manager", "description": "Boolean that is true if the interviewer is also the hiring manager of this position.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interviewee_name": {"name": "interviewee_name", "description": "Full name of the interviewee candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interviewee_origin": {"name": "interviewee_origin", "description": "The way in which the interviewed opportunity was added to lever. Includes 'agency', 'applied', 'internal', 'referred', 'sourced', and 'university'. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interviewee_contact_id": {"name": "interviewee_contact_id", "description": "CONTACT id of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_between_opp_created_and_interview": {"name": "days_between_opp_created_and_interview", "description": "Number of days that have passed between the creation of this opportunity and the beginning of this interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_advanced_since_interview": {"name": "has_advanced_since_interview", "description": "Boolean that is true if the opportunity advanced to another stage after this interview ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/lever.yml", "compiled_path": "target/compiled/lever/models/lever__interview_enhanced.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.284286, "compiled_code": "-- note: each record is a unique interview-interviewer feedback form combo\n-- an interview can have multiple interviewers, and interviewers can have multiple feedback forms\nwith  __dbt__cte__int_lever__interview_feedback as (\nwith interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\n-- join with this to limit noise \ninterview_feedback as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_feedback`\n),\n\nfeedback_form as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form`\n\n    where deleted_at is null\n),\n\njoin_w_feedback as (\n\n    select\n        interview.*,\n        feedback_form.feedback_form_id,\n        feedback_form.creator_user_id as feedback_completer_user_id,\n        feedback_form.completed_at as feedback_completed_at,\n\n        feedback_form.instructions as feedback_form_instructions,\n        feedback_form.score_system_value,\n        feedback_form.form_title as feedback_form_title\n\n\n    from interview\n    left join interview_feedback \n        on interview.interview_id = interview_feedback.interview_id\n    left join feedback_form \n        on interview_feedback.feedback_form_id = feedback_form.feedback_form_id\n)\n\nselect *\nfrom join_w_feedback\n),  __dbt__cte__int_lever__interview_users as (\nwith interview_feedback as (\n    select *\n    from __dbt__cte__int_lever__interview_feedback\n),\n\nlever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\ninterviewer_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interviewer_user`\n),\n\n-- there can be multiple interviewers for one interview\ngrab_interviewers as (\n\n    select\n        interview_feedback.*,\n        interviewer_user.user_id as interviewer_user_id\n    from interview_feedback\n    left join interviewer_user \n        on interview_feedback.interview_id = interviewer_user.interview_id\n        and interview_feedback.feedback_completer_user_id = interviewer_user.user_id\n\n),\n\n-- necessary users are \n-- interviewer, completer of feedback, recruiter coordinator , hiring manager\ngrab_user_names as (\n\n    select\n        grab_interviewers.*,\n        interviewer.full_name as inteviewer_name,\n        interviewer.email as interviewer_email,\n        feedback_completer.full_name as feedback_completer_name,\n        interview_coordinator.full_name as interview_coordinator_name\n\n    from \n    grab_interviewers\n    left join lever_user as interviewer \n        on grab_interviewers.interviewer_user_id = interviewer.user_id\n\n    left join lever_user as feedback_completer\n        on grab_interviewers.feedback_completer_user_id = feedback_completer.user_id\n\n    left join lever_user as interview_coordinator\n        on grab_interviewers.creator_user_id = interview_coordinator.user_id\n\n)\n\n-- unique row for every interview-interviewer-feedback combo\nselect * from grab_user_names\n),  __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n),interview as (\n\n    select \n        *,\n        cast( \n\n        datetime_add(\n            cast( occurred_at as datetime),\n        interval duration_minutes minute\n        )\n\n\n            as TIMESTAMP ) as ended_at\n    from __dbt__cte__int_lever__interview_users\n),\n\n--  just to grab stufff\nopportunity as (\n\n    select *\n    from __dbt__cte__int_lever__opportunity_users\n),\n\njoin_w_opportunity as (\n\n    select\n        interview.*,\n        opportunity.opportunity_owner_name,\n        opportunity.referrer_name,\n        opportunity.hiring_manager_name,\n        coalesce(lower(interview.inteviewer_name) = lower(opportunity.hiring_manager_name), false) as interviewer_is_hiring_manager,\n        opportunity.contact_name as interviewee_name,\n        opportunity.contact_location as interviewee_location,\n        opportunity.origin as interviewee_origin,\n        opportunity.contact_id as interviewee_contact_id,\n        \n\n    datetime_diff(\n        cast(interview.occurred_at as datetime),\n        cast(opportunity.created_at as datetime),\n        day\n    )\n\n   as days_between_opp_created_and_interview,\n        opportunity.last_advanced_at > interview.ended_at as has_advanced_since_interview\n\n    from interview\n    join opportunity using(opportunity_id)\n)\n\nselect * from join_w_opportunity", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__interview_feedback", "sql": " __dbt__cte__int_lever__interview_feedback as (\nwith interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\n-- join with this to limit noise \ninterview_feedback as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_feedback`\n),\n\nfeedback_form as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form`\n\n    where deleted_at is null\n),\n\njoin_w_feedback as (\n\n    select\n        interview.*,\n        feedback_form.feedback_form_id,\n        feedback_form.creator_user_id as feedback_completer_user_id,\n        feedback_form.completed_at as feedback_completed_at,\n\n        feedback_form.instructions as feedback_form_instructions,\n        feedback_form.score_system_value,\n        feedback_form.form_title as feedback_form_title\n\n\n    from interview\n    left join interview_feedback \n        on interview.interview_id = interview_feedback.interview_id\n    left join feedback_form \n        on interview_feedback.feedback_form_id = feedback_form.feedback_form_id\n)\n\nselect *\nfrom join_w_feedback\n)"}, {"id": "model.lever.int_lever__interview_users", "sql": " __dbt__cte__int_lever__interview_users as (\nwith interview_feedback as (\n    select *\n    from __dbt__cte__int_lever__interview_feedback\n),\n\nlever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\ninterviewer_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interviewer_user`\n),\n\n-- there can be multiple interviewers for one interview\ngrab_interviewers as (\n\n    select\n        interview_feedback.*,\n        interviewer_user.user_id as interviewer_user_id\n    from interview_feedback\n    left join interviewer_user \n        on interview_feedback.interview_id = interviewer_user.interview_id\n        and interview_feedback.feedback_completer_user_id = interviewer_user.user_id\n\n),\n\n-- necessary users are \n-- interviewer, completer of feedback, recruiter coordinator , hiring manager\ngrab_user_names as (\n\n    select\n        grab_interviewers.*,\n        interviewer.full_name as inteviewer_name,\n        interviewer.email as interviewer_email,\n        feedback_completer.full_name as feedback_completer_name,\n        interview_coordinator.full_name as interview_coordinator_name\n\n    from \n    grab_interviewers\n    left join lever_user as interviewer \n        on grab_interviewers.interviewer_user_id = interviewer.user_id\n\n    left join lever_user as feedback_completer\n        on grab_interviewers.feedback_completer_user_id = feedback_completer.user_id\n\n    left join lever_user as interview_coordinator\n        on grab_interviewers.creator_user_id = interview_coordinator.user_id\n\n)\n\n-- unique row for every interview-interviewer-feedback combo\nselect * from grab_user_names\n)"}, {"id": "model.lever.int_lever__opportunity_application", "sql": " __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n)"}, {"id": "model.lever.int_lever__opportunity_users", "sql": " __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n)"}], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`lever__interview_enhanced`"}, "model.lever.int_lever__requisition_users": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.lever_source.stg_lever__user", "model.lever_source.stg_lever__requisition"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "intermediate", "int_lever__requisition_users"], "unique_id": "model.lever.int_lever__requisition_users", "raw_code": "{{ config(enabled=var('lever_using_requisitions', True)) }}\n\nwith lever_user as (\n\n    select *\n    from {{ var('user') }}\n),\n\nrequisition as (\n    \n    select *\n    from {{ var('requisition') }}\n),\n\n-- necessary users = req owner, creator, hiring manager\ngrab_user_names as (\n\n    select\n        requisition.*,\n        creator.full_name as creator_name,\n        requisition_owner.full_name as requisition_owner_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from requisition\n\n    left join lever_user as creator\n        on requisition.creator_user_id = creator.user_id\n\n    left join lever_user as hiring_manager\n        on requisition.hiring_manager_user_id = hiring_manager.user_id\n\n    \n    left join lever_user as requisition_owner\n        on requisition.owner_user_id = requisition_owner.user_id\n\n)\n\nselect * from grab_user_names", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "intermediate/int_lever__requisition_users.sql", "original_file_path": "models/intermediate/int_lever__requisition_users.sql", "name": "int_lever__requisition_users", "alias": "int_lever__requisition_users", "checksum": {"name": "sha256", "checksum": "9f4cd112a96a904360991cfcaabdad84bc527d697e1fc3e3a1ce7d6f4960b1d3"}, "tags": [], "refs": [["stg_lever__user"], ["stg_lever__requisition"]], "sources": [], "metrics": [], "description": "Table relating requisitions to its stakeholders.", "columns": {"requisition_id": {"name": "requisition_id", "description": "Unique id of the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_backfill": {"name": "is_backfill", "description": "Boolean that is true if the requisition represents a backfill or new headcount.  If unspecified, defaults to false. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_currency": {"name": "compensation_band_currency", "description": "The ISO currency code associated with the requisition's compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_interval": {"name": "compensation_band_interval", "description": "The string representing the interval of payment for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_max": {"name": "compensation_band_max", "description": "The high bound for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_min": {"name": "compensation_band_min", "description": "The low bound for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the requisition was first created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the USER who created the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employment_status": {"name": "employment_status", "description": "The work type of the requisition ('full-time', 'part-time', 'intern', 'contractor', or 'temp-worker').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_hired": {"name": "headcount_hired", "description": "The number of filled seats / openings on the requisition, or the string, 'unlimited'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_infinite": {"name": "headcount_infinite", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_total_allotted": {"name": "headcount_total_allotted", "description": "Total headcount allotted for this requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hiring_manager_user_id": {"name": "hiring_manager_user_id", "description": "Foreign key referencing the USER who is the hiring manager for this requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "internal_notes": {"name": "internal_notes", "description": "Free form text for notes and meta-data about the requisition, visible to anyone who can see the requisition in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_location": {"name": "job_location", "description": "The location associated with the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "The human-readable name for the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the USER who owns the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_code": {"name": "requisition_code", "description": "The unique HRIS requisition code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the requisition. Can be 'open', 'onHold', 'closed', or 'draft'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_team": {"name": "job_team", "description": "The team associated with the requisition", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_name": {"name": "creator_name", "description": "Full name of the user who created the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_owner_name": {"name": "requisition_owner_name", "description": "Full user name of the user who owns the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hiring_manager_name": {"name": "hiring_manager_name", "description": "Full user name of the requisition's hiring manager.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/intermediate/int_lever.yml", "compiled_path": "target/compiled/lever/models/intermediate/int_lever__requisition_users.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "enabled": true}, "created_at": 1666651815.340039, "compiled_code": "\n\nwith lever_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nrequisition as (\n    \n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition`\n),\n\n-- necessary users = req owner, creator, hiring manager\ngrab_user_names as (\n\n    select\n        requisition.*,\n        creator.full_name as creator_name,\n        requisition_owner.full_name as requisition_owner_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from requisition\n\n    left join lever_user as creator\n        on requisition.creator_user_id = creator.user_id\n\n    left join lever_user as hiring_manager\n        on requisition.hiring_manager_user_id = hiring_manager.user_id\n\n    \n    left join lever_user as requisition_owner\n        on requisition.owner_user_id = requisition_owner.user_id\n\n)\n\nselect * from grab_user_names", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.lever.int_lever__posting_tags": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.lever_source.stg_lever__posting_tag"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "intermediate", "int_lever__posting_tags"], "unique_id": "model.lever.int_lever__posting_tags", "raw_code": "{{ config(enabled=var('lever_using_posting_tag', True)) }}\n\nwith posting_tag as (\n\n    select *\n    from {{ var('posting_tag') }}\n),\n\nagg_tags as (\n\n    select\n        posting_id,\n        {{ fivetran_utils.string_agg('tag_name', \"', '\") }} as tags \n\n    from posting_tag\n    group by 1\n)\n\nselect * from agg_tags", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "intermediate/int_lever__posting_tags.sql", "original_file_path": "models/intermediate/int_lever__posting_tags.sql", "name": "int_lever__posting_tags", "alias": "int_lever__posting_tags", "checksum": {"name": "sha256", "checksum": "62b5cfb45cf72d1abd920591e643359d43f48b8d1ab96d802d0f70214f305e44"}, "tags": [], "refs": [["stg_lever__posting_tag"]], "sources": [], "metrics": [], "description": "Table aggregating tags associated with each posting.", "columns": {"posting_id": {"name": "posting_id", "description": "Foreign key referencing the id of the job POSTING.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Comma-separated aggregated list of tags.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/intermediate/int_lever.yml", "compiled_path": "target/compiled/lever/models/intermediate/int_lever__posting_tags.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "enabled": true}, "created_at": 1666651815.336742, "compiled_code": "\n\nwith posting_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tag`\n),\n\nagg_tags as (\n\n    select\n        posting_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from posting_tag\n    group by 1\n)\n\nselect * from agg_tags", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.lever.int_lever__opportunity_contact_info": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.lever.int_lever__opportunity_users", "model.lever_source.stg_lever__opportunity_source", "model.lever.int_lever__contact_info", "model.lever_source.stg_lever__resume"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "intermediate", "int_lever__opportunity_contact_info"], "unique_id": "model.lever.int_lever__opportunity_contact_info", "raw_code": "with opportunity as (\n\n    -- this builds off the source opportunity table, incorporating application and internal user data. \n    select *\n    from {{ ref('int_lever__opportunity_users') }}\n),\n\nopportunity_sources as (\n\n    select \n        opportunity_id,\n        {{ fivetran_utils.string_agg('source', \"', '\") }} as sources\n\n    from {{ var('opportunity_source') }}\n\n    group by 1\n),\n\ncontact_info as (\n\n    select *\n    from {{ ref('int_lever__contact_info') }}\n),\n\norder_resumes as (\n\n    select \n        *,\n        row_number() over(partition by opportunity_id order by created_at desc) as row_num\n    \n    from {{ var('resume') }}\n),\n\nlatest_resume as (\n\n    select *\n    from order_resumes \n\n    where row_num = 1\n),\n\nfinal as (\n\n    select\n        opportunity.*,\n        opportunity_sources.sources,\n        latest_resume.file_download_url as resume_download_url,\n        contact_info.phones,\n        contact_info.emails,\n        contact_info.linkedin_link,\n        contact_info.github_link\n\n    from opportunity\n\n    left join opportunity_sources\n        on opportunity.opportunity_id = opportunity_sources.opportunity_id\n\n    left join latest_resume \n        on latest_resume.opportunity_id = opportunity.opportunity_id\n\n    left join contact_info\n        on contact_info.contact_id = opportunity.contact_id\n)\n\nselect *\nfrom final", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "intermediate/int_lever__opportunity_contact_info.sql", "original_file_path": "models/intermediate/int_lever__opportunity_contact_info.sql", "name": "int_lever__opportunity_contact_info", "alias": "int_lever__opportunity_contact_info", "checksum": {"name": "sha256", "checksum": "84a089e4bed8823265d53a0db6bb3a0c816b24ab6d5402cbb2886dbef50d07d2"}, "tags": [], "refs": [["int_lever__opportunity_users"], ["stg_lever__opportunity_source"], ["int_lever__contact_info"], ["stg_lever__resume"]], "sources": [], "metrics": [], "description": "Table relating opportunities with their contact info (from `int_lever__contact_info`).", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Unique ID of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_at": {"name": "archived_at", "description": "Timestamp of when the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_reason_id": {"name": "archived_reason_id", "description": "Foreign key referencing the ARCHIVE_REASON for which the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "Foreign key referencing the CONTACT info of the candidate applying in this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the opportunity was created (ie when the candidate clicked \"apply\" on your company website).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_data_protection_contact_allowed": {"name": "is_data_protection_contact_allowed", "description": "Boolean that is true if relevant data policy regulations allow for contacting  this opportunity's candidate.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_contact_expires_at": {"name": "data_protection_contact_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_data_protection_store_allowed": {"name": "is_data_protection_store_allowed", "description": "Boolean that is true if relevant data policy regulations allow for storing  this opportunity record.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_store_expires_at": {"name": "data_protection_store_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_headline": {"name": "contact_headline", "description": "Contact headline, typically a list of previous companies where the contact has worked or  schools that the contact has attended.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_anonymized": {"name": "is_anonymized", "description": "Boolean that is true if the opportunity has been anonymized (therefore fully anonymizing  the contact and removing their *personal* information).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_advanced_at": {"name": "last_advanced_at", "description": "Timestamp of when the candidate advanced to their current stage in the hiring pipeline.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_interaction_at": {"name": "last_interaction_at", "description": "Timestamp of when the Opportunity profile was last interacted with. See interactions [here](https://help.lever.co/hc/en-us/articles/205697619).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_location": {"name": "contact_location", "description": "Current contact location of the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_name": {"name": "contact_name", "description": "Contact full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origin": {"name": "origin", "description": "The way in which the opportunity was added to lever. Includes 'agency', 'applied', 'internal', 'referred', 'sourced', and 'university'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the id of the USER who owns this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snoozed_until": {"name": "snoozed_until", "description": "Timestamp of when the current snooze period of this opportunity ends (if snoozed).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "Foreign key referencing the ID of the current stage of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the opportunity was last updated in lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_id": {"name": "application_id", "description": "Unique ID of the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "Any additional comments from the candidate included in the job application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "The candidate's current company or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_hiring_manager_user_id": {"name": "posting_hiring_manager_user_id", "description": "Foreign key referencing the id of the USER who is the job posting's hiring manager, at the time  the application was submitted.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_id": {"name": "posting_id", "description": "Foreign key referencing the job POSTING for which the candidate applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_owner_user_id": {"name": "posting_owner_user_id", "description": "Foreign key referencing the id of the USER who owns this posting at the time the candidate applied.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_user_id": {"name": "referrer_user_id", "description": "The user ID of the candidate's referrer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_id": {"name": "requisition_id", "description": "If the application was archived as hired against a requisition, a foreign key referencing the id of the REQUISITION against which the application was hired.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_type": {"name": "application_type", "description": "Type of the application. An application can be of type referral, user, or posting. Applications of type  referral are created when a user refers a candidate for a job posting. Applications have type user when they  are applied manually to a posting in Lever. Applications have type posting when a candidate applies to a job  posting through your company's jobs page.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_owner_name": {"name": "opportunity_owner_name", "description": "Full name of the user who owns the opportunity in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_name": {"name": "referrer_name", "description": "Full name of the user who referred the candidate for this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hiring_manager_name": {"name": "hiring_manager_name", "description": "Full name of the hiring manager of role for which the opportunity applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sources": {"name": "sources", "description": "Aggregated list of the channels through which this opportunity was sourced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resume_download_url": {"name": "resume_download_url", "description": "Resume file download URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "emails": {"name": "emails", "description": "Aggregated list of email addresses associated with this contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phones": {"name": "phones", "description": "Aggregated list of the contact's phone numbers (with phone types).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "linkedin_link": {"name": "linkedin_link", "description": "Contact URL that contains 'linkedin.com' in it.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "github_link": {"name": "github_link", "description": "Contact URL that contains 'github.com' in it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/intermediate/int_lever.yml", "compiled_path": "target/compiled/lever/models/intermediate/int_lever__opportunity_contact_info.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1666651815.329123, "compiled_code": "with  __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n),  __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n),opportunity as (\n\n    -- this builds off the source opportunity table, incorporating application and internal user data. \n    select *\n    from __dbt__cte__int_lever__opportunity_users\n),\n\nopportunity_sources as (\n\n    select \n        opportunity_id,\n        \n    string_agg(source, ', ')\n\n as sources\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_source`\n\n    group by 1\n),\n\ncontact_info as (\n\n    select *\n    from __dbt__cte__int_lever__contact_info\n),\n\norder_resumes as (\n\n    select \n        *,\n        row_number() over(partition by opportunity_id order by created_at desc) as row_num\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume`\n),\n\nlatest_resume as (\n\n    select *\n    from order_resumes \n\n    where row_num = 1\n),\n\nfinal as (\n\n    select\n        opportunity.*,\n        opportunity_sources.sources,\n        latest_resume.file_download_url as resume_download_url,\n        contact_info.phones,\n        contact_info.emails,\n        contact_info.linkedin_link,\n        contact_info.github_link\n\n    from opportunity\n\n    left join opportunity_sources\n        on opportunity.opportunity_id = opportunity_sources.opportunity_id\n\n    left join latest_resume \n        on latest_resume.opportunity_id = opportunity.opportunity_id\n\n    left join contact_info\n        on contact_info.contact_id = opportunity.contact_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__opportunity_application", "sql": " __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n)"}, {"id": "model.lever.int_lever__opportunity_users", "sql": " __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n)"}, {"id": "model.lever.int_lever__contact_info", "sql": " __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n)"}], "relation_name": null}, "model.lever.int_lever__posting_interviews": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.lever_source.stg_lever__posting_interview", "model.lever_source.stg_lever__interview"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "intermediate", "int_lever__posting_interviews"], "unique_id": "model.lever.int_lever__posting_interviews", "raw_code": "with posting_interview as (\n\n    select *\n    from {{ var('posting_interview') }}\n\n),\n\ninterview as (\n\n    select \n        interview_id,\n        opportunity_id \n\n    from {{ var('interview') }}\n\n),\n\nposting_interview_metrics as (\n    \n    select\n        posting_interview.posting_id,\n        count(distinct posting_interview.interview_id) as count_interviews,\n        count(distinct interview.opportunity_id) as count_interviewees\n\n    from posting_interview \n    join interview using(interview_id)\n    group by 1\n\n)\n\nselect * from posting_interview_metrics", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "intermediate/int_lever__posting_interviews.sql", "original_file_path": "models/intermediate/int_lever__posting_interviews.sql", "name": "int_lever__posting_interviews", "alias": "int_lever__posting_interviews", "checksum": {"name": "sha256", "checksum": "e117039469e8b4300ad5ec453c19d13835f6ada686212fcc25e763191d8fdaff"}, "tags": [], "refs": [["stg_lever__posting_interview"], ["stg_lever__interview"]], "sources": [], "metrics": [], "description": "Table aggregating interview metrics per job posting.", "columns": {"posting_id": {"name": "posting_id", "description": "Foreign key referencing the id of the job POSTING.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_interviews": {"name": "count_interviews", "description": "Count of the number of interviews conducted for this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_interviewees": {"name": "count_interviewees", "description": "Count of opportunities interviewed for this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/intermediate/int_lever.yml", "compiled_path": "target/compiled/lever/models/intermediate/int_lever__posting_interviews.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1666651815.3361669, "compiled_code": "with posting_interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_interview`\n\n),\n\ninterview as (\n\n    select \n        interview_id,\n        opportunity_id \n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\nposting_interview_metrics as (\n    \n    select\n        posting_interview.posting_id,\n        count(distinct posting_interview.interview_id) as count_interviews,\n        count(distinct interview.opportunity_id) as count_interviewees\n\n    from posting_interview \n    join interview using(interview_id)\n    group by 1\n\n)\n\nselect * from posting_interview_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.lever.int_lever__opportunity_tags": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.lever_source.stg_lever__opportunity_tag"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "intermediate", "int_lever__opportunity_tags"], "unique_id": "model.lever.int_lever__opportunity_tags", "raw_code": "with opportunity_tag as (\n\n    select *\n    from {{ var('opportunity_tag') }}\n),\n\nagg_tags as (\n\n    select\n        opportunity_id,\n        {{ fivetran_utils.string_agg('tag_name', \"', '\") }} as tags \n\n    from opportunity_tag\n    group by 1\n)\n\nselect * from agg_tags", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "intermediate/int_lever__opportunity_tags.sql", "original_file_path": "models/intermediate/int_lever__opportunity_tags.sql", "name": "int_lever__opportunity_tags", "alias": "int_lever__opportunity_tags", "checksum": {"name": "sha256", "checksum": "d077444c0c5e4b2131686fef0674d731ed0fbf84e6181d03d05af4f937bcf0c2"}, "tags": [], "refs": [["stg_lever__opportunity_tag"]], "sources": [], "metrics": [], "description": "Table aggregating tags associated with each opportunity.", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY that was tagged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Aggregated coma-separated list of the tags associated with this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/intermediate/int_lever.yml", "compiled_path": "target/compiled/lever/models/intermediate/int_lever__opportunity_tags.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1666651815.329634, "compiled_code": "with opportunity_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tag`\n),\n\nagg_tags as (\n\n    select\n        opportunity_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from opportunity_tag\n    group by 1\n)\n\nselect * from agg_tags", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.lever.int_lever__posting_applications": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.lever_source.stg_lever__application"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "intermediate", "int_lever__posting_applications"], "unique_id": "model.lever.int_lever__posting_applications", "raw_code": "with application as (\n\n    select *\n    from {{ var('application') }}\n),\n\nagg_applications as (\n\n    select \n        posting_id,\n        min(created_at) as first_app_sent_at,\n\n        -- these should be the only types of applications\n        sum(case when type = 'referral' then 1 else 0 end) as count_referred_applications,\n        sum(case when type = 'posting' or type = 'agency' then 1 else 0 end) as count_posting_applications,\n        sum(case when type = 'user' then 1 else 0 end) as count_manual_user_applications,\n\n        count(distinct opportunity_id) as count_opportunities,\n        count(distinct case when archived_at is null then opportunity_id end) as count_open_opportunities\n\n    from application\n\n    group by 1\n),\n\norder_hiring_managers as (\n\n    select \n        posting_id,\n        posting_hiring_manager_user_id,\n        row_number() over( partition by posting_id order by created_at desc) as row_num \n    from application\n),\n\nlast_hiring_manager as (\n\n    select *\n    from order_hiring_managers \n    where row_num = 1\n),\n\nfinal as (\n\n    select \n        agg_applications.*,\n        last_hiring_manager.posting_hiring_manager_user_id\n\n    from agg_applications\n    join last_hiring_manager using(posting_id)\n)\n\nselect * from final", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "intermediate/int_lever__posting_applications.sql", "original_file_path": "models/intermediate/int_lever__posting_applications.sql", "name": "int_lever__posting_applications", "alias": "int_lever__posting_applications", "checksum": {"name": "sha256", "checksum": "9f607930b830b9d28478e84b5bbbc56091c64f542ffd562a9fcbebc7992d02bb"}, "tags": [], "refs": [["stg_lever__application"]], "sources": [], "metrics": [], "description": "Table associating postings with", "columns": {"posting_id": {"name": "posting_id", "description": "Foreign key referencing the id of the job POSTING.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_app_sent_at": {"name": "first_app_sent_at", "description": "Timestamp of when the first application was submitted to this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_referred_applications": {"name": "count_referred_applications", "description": "Count of how many applications were referred to this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_posting_applications": {"name": "count_posting_applications", "description": "Count of how many applications were submitted through the posting (including via an agency).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_manual_user_applications": {"name": "count_manual_user_applications", "description": "Count of how many applications have been manually submitted by internal users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_opportunities": {"name": "count_opportunities", "description": "Count of how many opportunities applied to this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_open_opportunities": {"name": "count_open_opportunities", "description": "Count of how many currently open opprtunities applied to this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_hiring_manager_user_id": {"name": "posting_hiring_manager_user_id", "description": "Foreign key referencing the USER who is the posting hiring manager.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/intermediate/int_lever.yml", "compiled_path": "target/compiled/lever/models/intermediate/int_lever__posting_applications.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1666651815.3355289, "compiled_code": "with application as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nagg_applications as (\n\n    select \n        posting_id,\n        min(created_at) as first_app_sent_at,\n\n        -- these should be the only types of applications\n        sum(case when type = 'referral' then 1 else 0 end) as count_referred_applications,\n        sum(case when type = 'posting' or type = 'agency' then 1 else 0 end) as count_posting_applications,\n        sum(case when type = 'user' then 1 else 0 end) as count_manual_user_applications,\n\n        count(distinct opportunity_id) as count_opportunities,\n        count(distinct case when archived_at is null then opportunity_id end) as count_open_opportunities\n\n    from application\n\n    group by 1\n),\n\norder_hiring_managers as (\n\n    select \n        posting_id,\n        posting_hiring_manager_user_id,\n        row_number() over( partition by posting_id order by created_at desc) as row_num \n    from application\n),\n\nlast_hiring_manager as (\n\n    select *\n    from order_hiring_managers \n    where row_num = 1\n),\n\nfinal as (\n\n    select \n        agg_applications.*,\n        last_hiring_manager.posting_hiring_manager_user_id\n\n    from agg_applications\n    join last_hiring_manager using(posting_id)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.lever.int_lever__contact_info": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.lever_source.stg_lever__contact_phone", "model.lever_source.stg_lever__contact_email", "model.lever_source.stg_lever__contact_link"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "intermediate", "int_lever__contact_info"], "unique_id": "model.lever.int_lever__contact_info", "raw_code": "with contact_phones as (\n\n    select \n        contact_id,\n        {{ fivetran_utils.string_agg(\"phone_type || ': ' || phone_number\" , \"', '\") }} as phones\n\n    from {{ var('contact_phone') }}\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        {{ fivetran_utils.string_agg(\"'<' || email || '>'\" , \"', '\") }} as emails\n\n    from {{ var('contact_email') }}\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from {{ var('contact_link') }}\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "intermediate/int_lever__contact_info.sql", "original_file_path": "models/intermediate/int_lever__contact_info.sql", "name": "int_lever__contact_info", "alias": "int_lever__contact_info", "checksum": {"name": "sha256", "checksum": "0d8e2f0d8e8a4dc4ccf478a2065a60bcd2036530dc5f4bc1c3c2cf96655fc1ed"}, "tags": [], "refs": [["stg_lever__contact_phone"], ["stg_lever__contact_email"], ["stg_lever__contact_link"]], "sources": [], "metrics": [], "description": "Table that the most relevant contact info associated with each contact.", "columns": {"contact_id": {"name": "contact_id", "description": "Unique ID of the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "emails": {"name": "emails", "description": "Aggregated list of email addresses associated with this contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phones": {"name": "phones", "description": "Aggregated list of the contact's phone numbers (with phone types).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "linkedin_link": {"name": "linkedin_link", "description": "Contact URL that contains 'linkedin.com' in it.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "github_link": {"name": "github_link", "description": "Contact URL that contains 'github.com' in it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/intermediate/int_lever.yml", "compiled_path": "target/compiled/lever/models/intermediate/int_lever__contact_info.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1666651815.3125372, "compiled_code": "with contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.lever.int_lever__opportunity_application": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.lever_source.stg_lever__opportunity", "model.lever_source.stg_lever__application"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "intermediate", "int_lever__opportunity_application"], "unique_id": "model.lever.int_lever__opportunity_application", "raw_code": "with opportunity as (\n\n    select *\n    from {{ var('opportunity') }}\n),\n\napplication as (\n\n    select *\n    from {{ var('application') }}\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "intermediate/int_lever__opportunity_application.sql", "original_file_path": "models/intermediate/int_lever__opportunity_application.sql", "name": "int_lever__opportunity_application", "alias": "int_lever__opportunity_application", "checksum": {"name": "sha256", "checksum": "41bea4b5e6fd548ca721b4524cb04b666e70f3941f9fb0a03336725e68325a3a"}, "tags": [], "refs": [["stg_lever__opportunity"], ["stg_lever__application"]], "sources": [], "metrics": [], "description": "Table relating information from a candidate's application to the opportunity created out of it.", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Unique ID of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_at": {"name": "archived_at", "description": "Timestamp of when the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_reason_id": {"name": "archived_reason_id", "description": "Foreign key referencing the ARCHIVE_REASON for which the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "Foreign key referencing the CONTACT info of the candidate applying in this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the opportunity was created (ie when the candidate clicked \"apply\" on your company website).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_data_protection_contact_allowed": {"name": "is_data_protection_contact_allowed", "description": "Boolean that is true if relevant data policy regulations allow for contacting  this opportunity's candidate.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_contact_expires_at": {"name": "data_protection_contact_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_data_protection_store_allowed": {"name": "is_data_protection_store_allowed", "description": "Boolean that is true if relevant data policy regulations allow for storing  this opportunity record.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_store_expires_at": {"name": "data_protection_store_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_headline": {"name": "contact_headline", "description": "Contact headline, typically a list of previous companies where the contact has worked or  schools that the contact has attended.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_anonymized": {"name": "is_anonymized", "description": "Boolean that is true if the opportunity has been anonymized (therefore fully anonymizing  the contact and removing their *personal* information).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_advanced_at": {"name": "last_advanced_at", "description": "Timestamp of when the candidate advanced to their current stage in the hiring pipeline.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_interaction_at": {"name": "last_interaction_at", "description": "Timestamp of when the Opportunity profile was last interacted with. See interactions [here](https://help.lever.co/hc/en-us/articles/205697619).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_location": {"name": "contact_location", "description": "Current contact location of the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_name": {"name": "contact_name", "description": "Contact full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origin": {"name": "origin", "description": "The way in which the opportunity was added to lever. Includes 'agency', 'applied', 'internal', 'referred', 'sourced', and 'university'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the id of the USER who owns this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snoozed_until": {"name": "snoozed_until", "description": "Timestamp of when the current snooze period of this opportunity ends (if snoozed).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "Foreign key referencing the ID of the current stage of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the opportunity was last updated in lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_id": {"name": "application_id", "description": "Unique ID of the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "Any additional comments from the candidate included in the job application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "The candidate's current company or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_hiring_manager_user_id": {"name": "posting_hiring_manager_user_id", "description": "Foreign key referencing the id of the USER who is the job posting's hiring manager, at the time  the application was submitted.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_id": {"name": "posting_id", "description": "Foreign key referencing the job POSTING for which the candidate applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_owner_user_id": {"name": "posting_owner_user_id", "description": "Foreign key referencing the id of the USER who owns this posting at the time the candidate applied.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_user_id": {"name": "referrer_user_id", "description": "The user ID of the candidate's referrer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_id": {"name": "requisition_id", "description": "If the application was archived as hired against a requisition, a foreign key referencing the id of the REQUISITION against which the application was hired.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_type": {"name": "application_type", "description": "Type of the application. An application can be of type referral, user, or posting. Applications of type  referral are created when a user refers a candidate for a job posting. Applications have type user when they  are applied manually to a posting in Lever. Applications have type posting when a candidate applies to a job  posting through your company's jobs page.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/intermediate/int_lever.yml", "compiled_path": "target/compiled/lever/models/intermediate/int_lever__opportunity_application.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1666651815.323801, "compiled_code": "with opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.lever.int_lever__opportunity_users": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.lever_source.stg_lever__user", "model.lever.int_lever__opportunity_application"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "intermediate", "int_lever__opportunity_users"], "unique_id": "model.lever.int_lever__opportunity_users", "raw_code": "with lever_user as (\n    select *\n    from {{ var('user') }}\n),\n\nopportunity_application as (\n    \n    select *\n    from {{ ref('int_lever__opportunity_application') }}\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "intermediate/int_lever__opportunity_users.sql", "original_file_path": "models/intermediate/int_lever__opportunity_users.sql", "name": "int_lever__opportunity_users", "alias": "int_lever__opportunity_users", "checksum": {"name": "sha256", "checksum": "6fbc16a9485dd35307bd6ffcde160ff43d442cc62640fe7369857a0ebb93d712"}, "tags": [], "refs": [["stg_lever__user"], ["int_lever__opportunity_application"]], "sources": [], "metrics": [], "description": "Table relating opportunities to all of its stakeholders.", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Unique ID of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_at": {"name": "archived_at", "description": "Timestamp of when the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_reason_id": {"name": "archived_reason_id", "description": "Foreign key referencing the ARCHIVE_REASON for which the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "Foreign key referencing the CONTACT info of the candidate applying in this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the opportunity was created (ie when the candidate clicked \"apply\" on your company website).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_data_protection_contact_allowed": {"name": "is_data_protection_contact_allowed", "description": "Boolean that is true if relevant data policy regulations allow for contacting  this opportunity's candidate.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_contact_expires_at": {"name": "data_protection_contact_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_data_protection_store_allowed": {"name": "is_data_protection_store_allowed", "description": "Boolean that is true if relevant data policy regulations allow for storing  this opportunity record.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_store_expires_at": {"name": "data_protection_store_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_headline": {"name": "contact_headline", "description": "Contact headline, typically a list of previous companies where the contact has worked or  schools that the contact has attended.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_anonymized": {"name": "is_anonymized", "description": "Boolean that is true if the opportunity has been anonymized (therefore fully anonymizing  the contact and removing their *personal* information).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_advanced_at": {"name": "last_advanced_at", "description": "Timestamp of when the candidate advanced to their current stage in the hiring pipeline.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_interaction_at": {"name": "last_interaction_at", "description": "Timestamp of when the Opportunity profile was last interacted with. See interactions [here](https://help.lever.co/hc/en-us/articles/205697619).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_location": {"name": "contact_location", "description": "Current contact location of the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_name": {"name": "contact_name", "description": "Contact full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origin": {"name": "origin", "description": "The way in which the opportunity was added to lever. Includes 'agency', 'applied', 'internal', 'referred', 'sourced', and 'university'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the id of the USER who owns this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snoozed_until": {"name": "snoozed_until", "description": "Timestamp of when the current snooze period of this opportunity ends (if snoozed).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "Foreign key referencing the ID of the current stage of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the opportunity was last updated in lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_id": {"name": "application_id", "description": "Unique ID of the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "Any additional comments from the candidate included in the job application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "The candidate's current company or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_hiring_manager_user_id": {"name": "posting_hiring_manager_user_id", "description": "Foreign key referencing the id of the USER who is the job posting's hiring manager, at the time  the application was submitted.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_id": {"name": "posting_id", "description": "Foreign key referencing the job POSTING for which the candidate applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_owner_user_id": {"name": "posting_owner_user_id", "description": "Foreign key referencing the id of the USER who owns this posting at the time the candidate applied.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_user_id": {"name": "referrer_user_id", "description": "The user ID of the candidate's referrer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_id": {"name": "requisition_id", "description": "If the application was archived as hired against a requisition, a foreign key referencing the id of the REQUISITION against which the application was hired.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_type": {"name": "application_type", "description": "Type of the application. An application can be of type referral, user, or posting. Applications of type  referral are created when a user refers a candidate for a job posting. Applications have type user when they  are applied manually to a posting in Lever. Applications have type posting when a candidate applies to a job  posting through your company's jobs page.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_owner_name": {"name": "opportunity_owner_name", "description": "Full name of the user who owns the opportunity in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_name": {"name": "referrer_name", "description": "Full name of the user who referred the candidate for this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hiring_manager_name": {"name": "hiring_manager_name", "description": "Full name of the hiring manager of role for which the opportunity applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/intermediate/int_lever.yml", "compiled_path": "target/compiled/lever/models/intermediate/int_lever__opportunity_users.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1666651815.334172, "compiled_code": "with  __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n),lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__opportunity_application", "sql": " __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n)"}], "relation_name": null}, "model.lever.int_lever__interview_feedback": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.lever_source.stg_lever__interview", "model.lever_source.stg_lever__interview_feedback", "model.lever_source.stg_lever__feedback_form"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "intermediate", "int_lever__interview_feedback"], "unique_id": "model.lever.int_lever__interview_feedback", "raw_code": "with interview as (\n\n    select *\n    from {{ var('interview') }}\n\n),\n\n-- join with this to limit noise \ninterview_feedback as (\n\n    select *\n    from {{ var('interview_feedback') }}\n),\n\nfeedback_form as (\n\n    select *\n    from {{ var('feedback_form') }}\n\n    where deleted_at is null\n),\n\njoin_w_feedback as (\n\n    select\n        interview.*,\n        feedback_form.feedback_form_id,\n        feedback_form.creator_user_id as feedback_completer_user_id,\n        feedback_form.completed_at as feedback_completed_at,\n\n        feedback_form.instructions as feedback_form_instructions,\n        feedback_form.score_system_value,\n        feedback_form.form_title as feedback_form_title\n\n\n    from interview\n    left join interview_feedback \n        on interview.interview_id = interview_feedback.interview_id\n    left join feedback_form \n        on interview_feedback.feedback_form_id = feedback_form.feedback_form_id\n)\n\nselect *\nfrom join_w_feedback", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "intermediate/int_lever__interview_feedback.sql", "original_file_path": "models/intermediate/int_lever__interview_feedback.sql", "name": "int_lever__interview_feedback", "alias": "int_lever__interview_feedback", "checksum": {"name": "sha256", "checksum": "22133ecf83502f4a2af14225f517ebfe6188b1d4cebef66c0a59c46d49ecc92a"}, "tags": [], "refs": [["stg_lever__interview"], ["stg_lever__interview_feedback"], ["stg_lever__feedback_form"]], "sources": [], "metrics": [], "description": "Table associating interviews with feedback given by individual interviewers. A single interview might have submit multiple feedback forms.", "columns": {"canceled_at": {"name": "canceled_at", "description": "Timestamp of when the interview was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the interview was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the USER who created the interview in lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "Date + time at which the interview was set to occur.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_minutes": {"name": "duration_minutes", "description": "Interview duration in minutes, minimum value is 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_reminder_frequency": {"name": "feedback_reminder_frequency", "description": "Frequency of feedback reminders (i.e. once, daily, frequently, none). Defaults to 'frequently' which is every 6 hours.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gcal_event_url": {"name": "gcal_event_url", "description": "Google calendar event url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_id": {"name": "interview_id", "description": "Unique ID of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "Interview location. Usually the name of a booked conference room but can also be a  phone number to call.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "Interview note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY being interviewed for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "panel_id": {"name": "panel_id", "description": "Unique id of the PANEL this interview belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_stage_id": {"name": "opportunity_stage_id", "description": "Foreign key referencing the STAGE that the candidate was in at the time  the interview was scheduled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "Subject of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Name of timezone in which interview was scheduled to occur.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_form_id": {"name": "feedback_form_id", "description": "Unique id of the feedback form.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_completer_user_id": {"name": "feedback_completer_user_id", "description": "Foreign key referencing the USER who completed the feedback.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_completed_at": {"name": "feedback_completed_at", "description": "Timestamp of when the feedback form was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_form_instructions": {"name": "feedback_form_instructions", "description": "Guidelines given for how give a feedback score.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "score_system_value": {"name": "score_system_value", "description": "Overall rating (1-4 scale) to the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_form_title": {"name": "feedback_form_title", "description": "Form title. This can be edited in Feedback and Form Settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/intermediate/int_lever.yml", "compiled_path": "target/compiled/lever/models/intermediate/int_lever__interview_feedback.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1666651815.315775, "compiled_code": "with interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\n-- join with this to limit noise \ninterview_feedback as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_feedback`\n),\n\nfeedback_form as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form`\n\n    where deleted_at is null\n),\n\njoin_w_feedback as (\n\n    select\n        interview.*,\n        feedback_form.feedback_form_id,\n        feedback_form.creator_user_id as feedback_completer_user_id,\n        feedback_form.completed_at as feedback_completed_at,\n\n        feedback_form.instructions as feedback_form_instructions,\n        feedback_form.score_system_value,\n        feedback_form.form_title as feedback_form_title\n\n\n    from interview\n    left join interview_feedback \n        on interview.interview_id = interview_feedback.interview_id\n    left join feedback_form \n        on interview_feedback.feedback_form_id = feedback_form.feedback_form_id\n)\n\nselect *\nfrom join_w_feedback", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.lever.int_lever__interview_users": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.lever.int_lever__interview_feedback", "model.lever_source.stg_lever__user", "model.lever_source.stg_lever__interviewer_user"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever", "intermediate", "int_lever__interview_users"], "unique_id": "model.lever.int_lever__interview_users", "raw_code": "with interview_feedback as (\n    select *\n    from {{ ref('int_lever__interview_feedback') }}\n),\n\nlever_user as (\n    select *\n    from {{ var('user') }}\n),\n\ninterviewer_user as (\n\n    select *\n    from {{ var('interviewer_user') }}\n),\n\n-- there can be multiple interviewers for one interview\ngrab_interviewers as (\n\n    select\n        interview_feedback.*,\n        interviewer_user.user_id as interviewer_user_id\n    from interview_feedback\n    left join interviewer_user \n        on interview_feedback.interview_id = interviewer_user.interview_id\n        and interview_feedback.feedback_completer_user_id = interviewer_user.user_id\n\n),\n\n-- necessary users are \n-- interviewer, completer of feedback, recruiter coordinator , hiring manager\ngrab_user_names as (\n\n    select\n        grab_interviewers.*,\n        interviewer.full_name as inteviewer_name,\n        interviewer.email as interviewer_email,\n        feedback_completer.full_name as feedback_completer_name,\n        interview_coordinator.full_name as interview_coordinator_name\n\n    from \n    grab_interviewers\n    left join lever_user as interviewer \n        on grab_interviewers.interviewer_user_id = interviewer.user_id\n\n    left join lever_user as feedback_completer\n        on grab_interviewers.feedback_completer_user_id = feedback_completer.user_id\n\n    left join lever_user as interview_coordinator\n        on grab_interviewers.creator_user_id = interview_coordinator.user_id\n\n)\n\n-- unique row for every interview-interviewer-feedback combo\nselect * from grab_user_names", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "intermediate/int_lever__interview_users.sql", "original_file_path": "models/intermediate/int_lever__interview_users.sql", "name": "int_lever__interview_users", "alias": "int_lever__interview_users", "checksum": {"name": "sha256", "checksum": "3cf44526ff2feda2c45518d4c4f02a1657cf1ec1ee4cc49481cdc1a75247956f"}, "tags": [], "refs": [["int_lever__interview_feedback"], ["stg_lever__user"], ["stg_lever__interviewer_user"]], "sources": [], "metrics": [], "description": "Table relating internal-user information (ie names and emails) with interviews they are somehow involved in.", "columns": {"canceled_at": {"name": "canceled_at", "description": "Timestamp of when the interview was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the interview was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the USER who created the interview in lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "Date + time at which the interview was set to occur.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_minutes": {"name": "duration_minutes", "description": "Interview duration in minutes, minimum value is 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_reminder_frequency": {"name": "feedback_reminder_frequency", "description": "Frequency of feedback reminders (i.e. once, daily, frequently, none). Defaults to 'frequently' which is every 6 hours.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gcal_event_url": {"name": "gcal_event_url", "description": "Google calendar event url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_id": {"name": "interview_id", "description": "Unique ID of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "Interview location. Usually the name of a booked conference room but can also be a  phone number to call.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "Interview note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY being interviewed for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "panel_id": {"name": "panel_id", "description": "Unique id of the PANEL this interview belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_stage_id": {"name": "opportunity_stage_id", "description": "Foreign key referencing the STAGE that the candidate was in at the time  the interview was scheduled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "Subject of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Name of timezone in which interview was scheduled to occur.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_form_id": {"name": "feedback_form_id", "description": "Unique id of the feedback form.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_completer_user_id": {"name": "feedback_completer_user_id", "description": "Foreign key referencing the USER who completed the feedback.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_completed_at": {"name": "feedback_completed_at", "description": "Timestamp of when the feedback form was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_form_instructions": {"name": "feedback_form_instructions", "description": "Guidelines given for how give a feedback score.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "score_system_value": {"name": "score_system_value", "description": "Overall rating (1-4 scale) to the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_form_title": {"name": "feedback_form_title", "description": "Form title. This can be edited in Feedback and Form Settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interviewer_user_id": {"name": "interviewer_user_id", "description": "Foreign key referencing the USER that interviewed the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inteviewer_name": {"name": "inteviewer_name", "description": "Full name of the interviewer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interviewer_email": {"name": "interviewer_email", "description": "Email associated with the interviewer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_completer_name": {"name": "feedback_completer_name", "description": "Full name of the user who completed the feedback form.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_coordinator_name": {"name": "interview_coordinator_name", "description": "Full name of the user who created the interviewer in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever://models/intermediate/int_lever.yml", "compiled_path": "target/compiled/lever/models/intermediate/int_lever__interview_users.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1666651815.3195462, "compiled_code": "with  __dbt__cte__int_lever__interview_feedback as (\nwith interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\n-- join with this to limit noise \ninterview_feedback as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_feedback`\n),\n\nfeedback_form as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form`\n\n    where deleted_at is null\n),\n\njoin_w_feedback as (\n\n    select\n        interview.*,\n        feedback_form.feedback_form_id,\n        feedback_form.creator_user_id as feedback_completer_user_id,\n        feedback_form.completed_at as feedback_completed_at,\n\n        feedback_form.instructions as feedback_form_instructions,\n        feedback_form.score_system_value,\n        feedback_form.form_title as feedback_form_title\n\n\n    from interview\n    left join interview_feedback \n        on interview.interview_id = interview_feedback.interview_id\n    left join feedback_form \n        on interview_feedback.feedback_form_id = feedback_form.feedback_form_id\n)\n\nselect *\nfrom join_w_feedback\n),interview_feedback as (\n    select *\n    from __dbt__cte__int_lever__interview_feedback\n),\n\nlever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\ninterviewer_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interviewer_user`\n),\n\n-- there can be multiple interviewers for one interview\ngrab_interviewers as (\n\n    select\n        interview_feedback.*,\n        interviewer_user.user_id as interviewer_user_id\n    from interview_feedback\n    left join interviewer_user \n        on interview_feedback.interview_id = interviewer_user.interview_id\n        and interview_feedback.feedback_completer_user_id = interviewer_user.user_id\n\n),\n\n-- necessary users are \n-- interviewer, completer of feedback, recruiter coordinator , hiring manager\ngrab_user_names as (\n\n    select\n        grab_interviewers.*,\n        interviewer.full_name as inteviewer_name,\n        interviewer.email as interviewer_email,\n        feedback_completer.full_name as feedback_completer_name,\n        interview_coordinator.full_name as interview_coordinator_name\n\n    from \n    grab_interviewers\n    left join lever_user as interviewer \n        on grab_interviewers.interviewer_user_id = interviewer.user_id\n\n    left join lever_user as feedback_completer\n        on grab_interviewers.feedback_completer_user_id = feedback_completer.user_id\n\n    left join lever_user as interview_coordinator\n        on grab_interviewers.creator_user_id = interview_coordinator.user_id\n\n)\n\n-- unique row for every interview-interviewer-feedback combo\nselect * from grab_user_names", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__interview_feedback", "sql": " __dbt__cte__int_lever__interview_feedback as (\nwith interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\n-- join with this to limit noise \ninterview_feedback as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_feedback`\n),\n\nfeedback_form as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form`\n\n    where deleted_at is null\n),\n\njoin_w_feedback as (\n\n    select\n        interview.*,\n        feedback_form.feedback_form_id,\n        feedback_form.creator_user_id as feedback_completer_user_id,\n        feedback_form.completed_at as feedback_completed_at,\n\n        feedback_form.instructions as feedback_form_instructions,\n        feedback_form.score_system_value,\n        feedback_form.form_title as feedback_form_title\n\n\n    from interview\n    left join interview_feedback \n        on interview.interview_id = interview_feedback.interview_id\n    left join feedback_form \n        on interview_feedback.feedback_form_id = feedback_form.feedback_form_id\n)\n\nselect *\nfrom join_w_feedback\n)"}], "relation_name": null}, "model.lever_source.stg_lever__feedback_form": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_feedback_form_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__feedback_form_tmp", "model.lever_source.stg_lever__feedback_form_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__feedback_form"], "unique_id": "model.lever_source.stg_lever__feedback_form", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__feedback_form_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__feedback_form_tmp')),\n                staging_columns=get_feedback_form_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(completed_at as {{ dbt.type_timestamp() }}) as completed_at,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        creator_id as creator_user_id,\n        cast(deleted_at as {{ dbt.type_timestamp() }}) as deleted_at,\n        id as feedback_form_id,\n        instructions,\n        interview_id,\n        opportunity_id,\n        score_system_value,\n        template_id as template_field_id,\n        text as form_title,\n        type -- always = interview\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__feedback_form.sql", "original_file_path": "models/stg_lever__feedback_form.sql", "name": "stg_lever__feedback_form", "alias": "stg_lever__feedback_form", "checksum": {"name": "sha256", "checksum": "7373e5e733400a51622b4cbf62bebccbfeb728b0afef2dab23e2863d0308052e"}, "tags": [], "refs": [["stg_lever__feedback_form_tmp"], ["stg_lever__feedback_form_tmp"]], "sources": [], "metrics": [], "description": "Table capturing feedback forms that have been completed after interviewing a candidate. \n", "columns": {"feedback_form_id": {"name": "feedback_form_id", "description": "Unique id of the feedback form.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Timestamp of when the feedback form was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the feedback form was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the USER who completed and submitted the feedback.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "Timestamp of when the feedback form was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "instructions": {"name": "instructions", "description": "Form instructions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_id": {"name": "interview_id", "description": "Foreign key referencing the INTERVIEW for which the feedback is directed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "score_system_value": {"name": "score_system_value", "description": "Overall rating (1-4 scale) to the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_field_id": {"name": "template_field_id", "description": "Foreign key referencing the TEMPLATE_FIELD that this form used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "form_title": {"name": "form_title", "description": "Form title. This can be edited in Feedback and Form Settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Form type. Feedback forms are of type interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY that the candidate was interviewed for.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__feedback_form.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.419849, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    completed_at\n    \n as \n    \n    completed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_id\n    \n as \n    \n    creator_id\n    \n, \n    \n    \n    deleted_at\n    \n as \n    \n    deleted_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    instructions\n    \n as \n    \n    instructions\n    \n, \n    \n    \n    interview_id\n    \n as \n    \n    interview_id\n    \n, \n    \n    \n    opportunity_id\n    \n as \n    \n    opportunity_id\n    \n, \n    \n    \n    score_system_value\n    \n as \n    \n    score_system_value\n    \n, \n    \n    \n    template_id\n    \n as \n    \n    template_id\n    \n, \n    \n    \n    text\n    \n as \n    \n    text\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(completed_at as TIMESTAMP) as completed_at,\n        cast(created_at as TIMESTAMP) as created_at,\n        creator_id as creator_user_id,\n        cast(deleted_at as TIMESTAMP) as deleted_at,\n        id as feedback_form_id,\n        instructions,\n        interview_id,\n        opportunity_id,\n        score_system_value,\n        template_id as template_field_id,\n        text as form_title,\n        type -- always = interview\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form`"}, "model.lever_source.stg_lever__requisition_offer": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_requisition_offer_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__requisition_offer_tmp", "model.lever_source.stg_lever__requisition_offer_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__requisition_offer"], "unique_id": "model.lever_source.stg_lever__requisition_offer", "raw_code": "{{ config(enabled=var('lever_using_requisitions', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_lever__requisition_offer_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__requisition_offer_tmp')),\n                staging_columns=get_requisition_offer_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        requisition_id,\n        offer_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__requisition_offer.sql", "original_file_path": "models/stg_lever__requisition_offer.sql", "name": "stg_lever__requisition_offer", "alias": "stg_lever__requisition_offer", "checksum": {"name": "sha256", "checksum": "4c2fa9aa7f08437c276c96bbad9d9e4a17599029cdd1a19340575be9a11fe5d6"}, "tags": [], "refs": [["stg_lever__requisition_offer_tmp"], ["stg_lever__requisition_offer_tmp"]], "sources": [], "metrics": [], "description": "Table relating offers to their associated requisitions.", "columns": {"offer_id": {"name": "offer_id", "description": "Foriegn key referencing the OFFER for the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_id": {"name": "requisition_id", "description": "Foriegn key referencing the REQUISITION which the offer was made against.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the offer-requisition relationship has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__requisition_offer.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "created_at": 1666651815.4268, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_offer_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    offer_id\n    \n as \n    \n    offer_id\n    \n, \n    \n    \n    requisition_id\n    \n as \n    \n    requisition_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        requisition_id,\n        offer_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_offer`"}, "model.lever_source.stg_lever__posting_tag": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_posting_tag_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__posting_tag_tmp", "model.lever_source.stg_lever__posting_tag_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__posting_tag"], "unique_id": "model.lever_source.stg_lever__posting_tag", "raw_code": "{{ config(enabled=var('lever_using_posting_tag', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_lever__posting_tag_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__posting_tag_tmp')),\n                staging_columns=get_posting_tag_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        posting_id,\n        {% if target.type == 'redshift' %}\n        \"tag\"\n        {% else %} tag {% endif %}\n        as tag_name,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__posting_tag.sql", "original_file_path": "models/stg_lever__posting_tag.sql", "name": "stg_lever__posting_tag", "alias": "stg_lever__posting_tag", "checksum": {"name": "sha256", "checksum": "6fcb8b7794152329bc5d7ff2a54c0de7d594615f4ef7132635f2311f2017e266"}, "tags": [], "refs": [["stg_lever__posting_tag_tmp"], ["stg_lever__posting_tag_tmp"]], "sources": [], "metrics": [], "description": "Table associating job postings with all associated tags.", "columns": {"posting_id": {"name": "posting_id", "description": "Foreign key referencing the id of the job POSTING.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tag_name": {"name": "tag_name", "description": "Text of the posting's individual tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__posting_tag.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "created_at": 1666651815.407218, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tag_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    posting_id\n    \n as \n    \n    posting_id\n    \n, \n    \n    \n    tag\n    \n as \n    \n    tag\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        posting_id,\n         tag \n        as tag_name,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tag`"}, "model.lever_source.stg_lever__interviewer_user": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_interviewer_user_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__interviewer_user_tmp", "model.lever_source.stg_lever__interviewer_user_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__interviewer_user"], "unique_id": "model.lever_source.stg_lever__interviewer_user", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__interviewer_user_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__interviewer_user_tmp')),\n                staging_columns=get_interviewer_user_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        interview_id,\n        user_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__interviewer_user.sql", "original_file_path": "models/stg_lever__interviewer_user.sql", "name": "stg_lever__interviewer_user", "alias": "stg_lever__interviewer_user", "checksum": {"name": "sha256", "checksum": "ef41ded2ec3c7b18e66b8a5bd5b3bd50e9b9864cb0f4169eeb3e4b063daa1660"}, "tags": [], "refs": [["stg_lever__interviewer_user_tmp"], ["stg_lever__interviewer_user_tmp"]], "sources": [], "metrics": [], "description": "Table relating interviews to their interviewers.", "columns": {"interview_id": {"name": "interview_id", "description": "Foreign key referencing the INTERVIEW that was given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the USER that interviewed the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__interviewer_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.409396, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interviewer_user_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    interview_id\n    \n as \n    \n    interview_id\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        interview_id,\n        user_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__interviewer_user`"}, "model.lever_source.stg_lever__resume": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_resume_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__resume_tmp", "model.lever_source.stg_lever__resume_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__resume"], "unique_id": "model.lever_source.stg_lever__resume", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__resume_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__resume_tmp')),\n                staging_columns=get_resume_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id, \n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        file_download_url,\n        file_ext as file_extension,\n        file_name,\n        cast(file_uploaded_at as {{ dbt.type_timestamp() }}) as file_uploaded_at,\n        opportunity_id\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__resume.sql", "original_file_path": "models/stg_lever__resume.sql", "name": "stg_lever__resume", "alias": "stg_lever__resume", "checksum": {"name": "sha256", "checksum": "44fbde6ed55d35b155eb17c73441756d146998b479aa78367e8bd7b1f4943f2f"}, "tags": [], "refs": [["stg_lever__resume_tmp"], ["stg_lever__resume_tmp"]], "sources": [], "metrics": [], "description": "Table capturing resumes submitted by opportunities.", "columns": {"id": {"name": "id", "description": "Unique id of the resume file.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the resume was created in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "file_download_url": {"name": "file_download_url", "description": "Resume file download URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "file_extension": {"name": "file_extension", "description": "Resume file extension.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "file_name": {"name": "file_name", "description": "Name of the file uploaded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "file_uploaded_at": {"name": "file_uploaded_at", "description": "Timestamp of when the file was uploaded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY associated with this resume.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__resume.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.4285161, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    file_download_url\n    \n as \n    \n    file_download_url\n    \n, \n    \n    \n    file_ext\n    \n as \n    \n    file_ext\n    \n, \n    \n    \n    file_name\n    \n as \n    \n    file_name\n    \n, \n    \n    \n    file_uploaded_at\n    \n as \n    \n    file_uploaded_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    opportunity_id\n    \n as \n    \n    opportunity_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id, \n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(created_at as TIMESTAMP) as created_at,\n        file_download_url,\n        file_ext as file_extension,\n        file_name,\n        cast(file_uploaded_at as TIMESTAMP) as file_uploaded_at,\n        opportunity_id\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume`"}, "model.lever_source.stg_lever__opportunity_tag": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_opportunity_tag_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__opportunity_tag_tmp", "model.lever_source.stg_lever__opportunity_tag_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__opportunity_tag"], "unique_id": "model.lever_source.stg_lever__opportunity_tag", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__opportunity_tag_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__opportunity_tag_tmp')),\n                staging_columns=get_opportunity_tag_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        opportunity_id,\n        {% if target.type == 'redshift' %}\n        \"tag\"\n        {% else %} tag {% endif %}\n        as tag_name,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__opportunity_tag.sql", "original_file_path": "models/stg_lever__opportunity_tag.sql", "name": "stg_lever__opportunity_tag", "alias": "stg_lever__opportunity_tag", "checksum": {"name": "sha256", "checksum": "32064ef17afc3954fdc87d0a2a2bb0c53db8fe0bf366ff64fb02164bd4318564"}, "tags": [], "refs": [["stg_lever__opportunity_tag_tmp"], ["stg_lever__opportunity_tag_tmp"]], "sources": [], "metrics": [], "description": "Table relating opportunities to their tags.", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY that was tagged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tag_name": {"name": "tag_name", "description": "Text of the tag associated with this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__opportunity_tag.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.411841, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tag_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    opportunity_id\n    \n as \n    \n    opportunity_id\n    \n, \n    \n    \n    tag\n    \n as \n    \n    tag\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        opportunity_id,\n         tag \n        as tag_name,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tag`"}, "model.lever_source.stg_lever__offer": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_offer_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__offer_tmp", "model.lever_source.stg_lever__offer_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__offer"], "unique_id": "model.lever_source.stg_lever__offer", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__offer_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__offer_tmp')),\n                staging_columns=get_offer_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        creator_id as creator_user_id,\n        id as offer_id,\n        status,\n        candidate_id as opportunity_id -- todo surface this issue\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__offer.sql", "original_file_path": "models/stg_lever__offer.sql", "name": "stg_lever__offer", "alias": "stg_lever__offer", "checksum": {"name": "sha256", "checksum": "b61b3e3bcaab1ab8c61d2f5f284e42212dab85afa197d495d1882e4d2ed5bb27"}, "tags": [], "refs": [["stg_lever__offer_tmp"], ["stg_lever__offer_tmp"]], "sources": [], "metrics": [], "description": "Table of the data sent to an opportunity for a position they have been offerred.", "columns": {"offer_id": {"name": "offer_id", "description": "Unique ID of the offer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Unique ID of the candidate or opportunity??", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the offer was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the USER who created the offer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "A string describing the current status of the offer. Can include:  draft - the offer is still under construction approval-sent - the offer needs approval approved - the offer has been approved sent - the offer has been sent through Lever sent-manually - the offer has been sent to the candidate outside of Lever opened - the candidate has opened the offer denied - the candidate denied the offer signed - the candidate signed the offer\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__offer.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.414724, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__offer_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_id\n    \n as \n    \n    creator_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(created_at as TIMESTAMP) as created_at,\n        creator_id as creator_user_id,\n        id as offer_id,\n        status,\n        candidate_id as opportunity_id -- todo surface this issue\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__offer`"}, "model.lever_source.stg_lever__contact_phone": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_contact_phone_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__contact_phone_tmp", "model.lever_source.stg_lever__contact_phone_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__contact_phone"], "unique_id": "model.lever_source.stg_lever__contact_phone", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__contact_phone_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__contact_phone_tmp')),\n                staging_columns=get_contact_phone_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        contact_id,\n        index,\n        type as phone_type,\n        value as phone_number,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__contact_phone.sql", "original_file_path": "models/stg_lever__contact_phone.sql", "name": "stg_lever__contact_phone", "alias": "stg_lever__contact_phone", "checksum": {"name": "sha256", "checksum": "e91afd7ee932ff0ae7e7aabd9b3e9d6a834690ca0bbc0cd3e05429c211983da1"}, "tags": [], "refs": [["stg_lever__contact_phone_tmp"], ["stg_lever__contact_phone_tmp"]], "sources": [], "metrics": [], "description": "Table capturing the phone numbers associated with a contact.", "columns": {"contact_id": {"name": "contact_id", "description": "Unique ID of the contact in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of this phone number for this contact (there can be multiple phone numbers per contact).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_type": {"name": "phone_type", "description": "Type of phone number, either \"mobile\", \"home\", \"work\", \"skype\", or \"other\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "The contact's provided phone number.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__contact_phone.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.426187, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        contact_id,\n        index,\n        type as phone_type,\n        value as phone_number,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`"}, "model.lever_source.stg_lever__archive_reason": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_archive_reason_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__archive_reason_tmp", "model.lever_source.stg_lever__archive_reason_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__archive_reason"], "unique_id": "model.lever_source.stg_lever__archive_reason", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__archive_reason_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__archive_reason_tmp')),\n                staging_columns=get_archive_reason_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as archive_reason_id,\n        text as archive_reason_title,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__archive_reason.sql", "original_file_path": "models/stg_lever__archive_reason.sql", "name": "stg_lever__archive_reason", "alias": "stg_lever__archive_reason", "checksum": {"name": "sha256", "checksum": "5dc3873dbef4ab25f4352f5b5627392fd345c4c23617d3f5978b2b2246afdd23"}, "tags": [], "refs": [["stg_lever__archive_reason_tmp"], ["stg_lever__archive_reason_tmp"]], "sources": [], "metrics": [], "description": "Table of reasons for archiving candidates, exiting them from the hiring pipeline (after hiring or rejecting  for a particular reason).\n", "columns": {"archive_reason_id": {"name": "archive_reason_id", "description": "Unique id of the archive reason.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archive_reason_title": {"name": "archive_reason_title", "description": "Name of the archive reason as shown in the Lever UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__archive_reason.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.415294, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__archive_reason_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    text\n    \n as \n    \n    text\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as archive_reason_id,\n        text as archive_reason_title,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__archive_reason`"}, "model.lever_source.stg_lever__requisition": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_requisition_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__requisition_tmp", "model.lever_source.stg_lever__requisition_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__requisition"], "unique_id": "model.lever_source.stg_lever__requisition", "raw_code": "{{ config(enabled=var('lever_using_requisitions', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_lever__requisition_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__requisition_tmp')),\n                staging_columns=get_requisition_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        backfill as is_backfill,\n        compensation_band_currency,\n        compensation_band_interval,\n        compensation_band_max,\n        compensation_band_min,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        creator_id as creator_user_id,\n        employment_status,\n        headcount_hired,\n        headcount_infinite, \n        headcount_total as headcount_total_allotted,\n        hiring_manager_id as hiring_manager_user_id,\n        id as requisition_id,\n        internal_notes,\n        location as job_location,\n        name as job_title,\n        owner_id as owner_user_id,\n        requisition_code,\n        status,\n        team as job_team\n\n        {% if var('lever_requisition_passthrough_columns', []) != [] %}\n        ,\n        {{ var('lever_requisition_passthrough_columns', [] )  | join(', ') }}\n        {% endif %}\n        \n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__requisition.sql", "original_file_path": "models/stg_lever__requisition.sql", "name": "stg_lever__requisition", "alias": "stg_lever__requisition", "checksum": {"name": "sha256", "checksum": "35dad39bc0d33490f9213670d2caeca7dc7e962093b045d54ff2c4345262b3ec"}, "tags": [], "refs": [["stg_lever__requisition_tmp"], ["stg_lever__requisition_tmp"]], "sources": [], "metrics": [], "description": "Table capturing requisitions made in/pushed to lever.", "columns": {"requisition_id": {"name": "requisition_id", "description": "Unique id of the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_backfill": {"name": "is_backfill", "description": "Boolean that is true if the requisition represents a backfill or new headcount.  If unspecified, defaults to false. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_currency": {"name": "compensation_band_currency", "description": "The ISO currency code associated with the requisition's compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_interval": {"name": "compensation_band_interval", "description": "The string representing the interval of payment for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_max": {"name": "compensation_band_max", "description": "The high bound for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_min": {"name": "compensation_band_min", "description": "The low bound for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the requisition was first created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the USER who created the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employment_status": {"name": "employment_status", "description": "The work type of the requisition ('full-time', 'part-time', 'intern', 'contractor', or 'temp-worker').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_hired": {"name": "headcount_hired", "description": "The number of filled seats / openings on the requisition, or the string, 'unlimited'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_infinite": {"name": "headcount_infinite", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_total_allotted": {"name": "headcount_total_allotted", "description": "Total headcount allotted for this requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hiring_manager_user_id": {"name": "hiring_manager_user_id", "description": "Foreign key referencing the USER who is the hiring manager for this requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "internal_notes": {"name": "internal_notes", "description": "Free form text for notes and meta-data about the requisition, visible to anyone who can see the requisition in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_location": {"name": "job_location", "description": "The location associated with the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "The human-readable name for the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the USER who owns the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_code": {"name": "requisition_code", "description": "The unique HRIS requisition code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the requisition. Can be 'open', 'onHold', 'closed', or 'draft'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_team": {"name": "job_team", "description": "The team associated with the requisition", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__requisition.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "created_at": 1666651815.424362, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    backfill\n    \n as \n    \n    backfill\n    \n, \n    \n    \n    compensation_band_currency\n    \n as \n    \n    compensation_band_currency\n    \n, \n    \n    \n    compensation_band_interval\n    \n as \n    \n    compensation_band_interval\n    \n, \n    \n    \n    compensation_band_max\n    \n as \n    \n    compensation_band_max\n    \n, \n    \n    \n    compensation_band_min\n    \n as \n    \n    compensation_band_min\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_id\n    \n as \n    \n    creator_id\n    \n, \n    cast(null as STRING) as \n    \n    custom_field_agency_owner\n    \n , \n    cast(null as INT64) as \n    \n    custom_field_requisition_live_date\n    \n , \n    cast(null as boolean) as \n    \n    custom_field_sourcing_hm_owned\n    \n , \n    cast(null as INT64) as \n    \n    custom_field_target_hire_date\n    \n , \n    cast(null as INT64) as \n    \n    custom_field_top_funnel_target\n    \n , \n    \n    \n    employment_status\n    \n as \n    \n    employment_status\n    \n, \n    \n    \n    headcount_hired\n    \n as \n    \n    headcount_hired\n    \n, \n    \n    \n    headcount_infinite\n    \n as \n    \n    headcount_infinite\n    \n, \n    \n    \n    headcount_total\n    \n as \n    \n    headcount_total\n    \n, \n    \n    \n    hiring_manager_id\n    \n as \n    \n    hiring_manager_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    internal_notes\n    \n as \n    \n    internal_notes\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    requisition_code\n    \n as \n    \n    requisition_code\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    team\n    \n as \n    \n    team\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        backfill as is_backfill,\n        compensation_band_currency,\n        compensation_band_interval,\n        compensation_band_max,\n        compensation_band_min,\n        cast(created_at as TIMESTAMP) as created_at,\n        creator_id as creator_user_id,\n        employment_status,\n        headcount_hired,\n        headcount_infinite, \n        headcount_total as headcount_total_allotted,\n        hiring_manager_id as hiring_manager_user_id,\n        id as requisition_id,\n        internal_notes,\n        location as job_location,\n        name as job_title,\n        owner_id as owner_user_id,\n        requisition_code,\n        status,\n        team as job_team\n\n        \n        \n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition`"}, "model.lever_source.stg_lever__requisition_posting": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_requisition_posting_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__requisition_posting_tmp", "model.lever_source.stg_lever__requisition_posting_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__requisition_posting"], "unique_id": "model.lever_source.stg_lever__requisition_posting", "raw_code": "{{ config(enabled=var('lever_using_requisitions', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_lever__requisition_posting_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__requisition_posting_tmp')),\n                staging_columns=get_requisition_posting_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        posting_id,\n        requisition_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__requisition_posting.sql", "original_file_path": "models/stg_lever__requisition_posting.sql", "name": "stg_lever__requisition_posting", "alias": "stg_lever__requisition_posting", "checksum": {"name": "sha256", "checksum": "a3c464095c5d3bbe30cdbbc67adf438d1deede5990e9c1e64931e232232abd41"}, "tags": [], "refs": [["stg_lever__requisition_posting_tmp"], ["stg_lever__requisition_posting_tmp"]], "sources": [], "metrics": [], "description": "Table relating requsitions to postings.", "columns": {"posting_id": {"name": "posting_id", "description": "Foreign key referencing the POSTING created for this requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_id": {"name": "requisition_id", "description": "Foreign key referencing the REQUISITION associated with this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__requisition_posting.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "created_at": 1666651815.424931, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_posting_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    posting_id\n    \n as \n    \n    posting_id\n    \n, \n    \n    \n    requisition_id\n    \n as \n    \n    requisition_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        posting_id,\n        requisition_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_posting`"}, "model.lever_source.stg_lever__contact_link": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_contact_link_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__contact_link_tmp", "model.lever_source.stg_lever__contact_link_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__contact_link"], "unique_id": "model.lever_source.stg_lever__contact_link", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__contact_link_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__contact_link_tmp')),\n                staging_columns=get_contact_link_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        contact_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        link  \n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__contact_link.sql", "original_file_path": "models/stg_lever__contact_link.sql", "name": "stg_lever__contact_link", "alias": "stg_lever__contact_link", "checksum": {"name": "sha256", "checksum": "ed91de4587a303cfb0d30ed19754806a9f46c5c58b3652d4ab64493ba7c920e2"}, "tags": [], "refs": [["stg_lever__contact_link_tmp"], ["stg_lever__contact_link_tmp"]], "sources": [], "metrics": [], "description": "Table of all links associated with an opportunity contact (ie linkedin, github repos, personal websites).", "columns": {"contact_id": {"name": "contact_id", "description": "Unique id of the contact associated with one or more opportunities.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "link": {"name": "link", "description": "Url of the individual link.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__contact_link.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.427368, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    link\n    \n as \n    \n    link\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        contact_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        link  \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`"}, "model.lever_source.stg_lever__interview_feedback": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_interview_feedback_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__interview_feedback_tmp", "model.lever_source.stg_lever__interview_feedback_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__interview_feedback"], "unique_id": "model.lever_source.stg_lever__interview_feedback", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__interview_feedback_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__interview_feedback_tmp')),\n                staging_columns=get_interview_feedback_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        interview_id, \n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        feedback_form_id\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__interview_feedback.sql", "original_file_path": "models/stg_lever__interview_feedback.sql", "name": "stg_lever__interview_feedback", "alias": "stg_lever__interview_feedback", "checksum": {"name": "sha256", "checksum": "c2285c8ef975b31772b060b92bd595e7d7ccb103424580aa0e69b0ec706e1bed"}, "tags": [], "refs": [["stg_lever__interview_feedback_tmp"], ["stg_lever__interview_feedback_tmp"]], "sources": [], "metrics": [], "description": "Table associating interviews with their feedback forms.", "columns": {"feedback_form_id": {"name": "feedback_form_id", "description": "Foreign key referencing the FEEDBACK_FORM submitted for this interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_id": {"name": "interview_id", "description": "Foreign key referencing the INTERVIEW that was given feedback for.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__interview_feedback.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.4180539, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_feedback_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    feedback_form_id\n    \n as \n    \n    feedback_form_id\n    \n, \n    \n    \n    interview_id\n    \n as \n    \n    interview_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        interview_id, \n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        feedback_form_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_feedback`"}, "model.lever_source.stg_lever__posting_interview": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_posting_interview_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__posting_interview_tmp", "model.lever_source.stg_lever__posting_interview_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__posting_interview"], "unique_id": "model.lever_source.stg_lever__posting_interview", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__posting_interview_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__posting_interview_tmp')),\n                staging_columns=get_posting_interview_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        posting_id,\n        interview_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__posting_interview.sql", "original_file_path": "models/stg_lever__posting_interview.sql", "name": "stg_lever__posting_interview", "alias": "stg_lever__posting_interview", "checksum": {"name": "sha256", "checksum": "c623de5024786c010f333fa614f402e672f10bc1ba4a5549913c5800e84489a8"}, "tags": [], "refs": [["stg_lever__posting_interview_tmp"], ["stg_lever__posting_interview_tmp"]], "sources": [], "metrics": [], "description": "Table relating job postings to any interviews undertaken for the role.", "columns": {"interview_id": {"name": "interview_id", "description": "Foreign key referencing the INTERVIEW for this job posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_id": {"name": "posting_id", "description": "Foreign key referencing the POSTING that was interviewed for.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__posting_interview.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.4076831, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_interview_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    interview_id\n    \n as \n    \n    interview_id\n    \n, \n    \n    \n    posting_id\n    \n as \n    \n    posting_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        posting_id,\n        interview_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_interview`"}, "model.lever_source.stg_lever__user": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_user_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__user_tmp", "model.lever_source.stg_lever__user_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__user"], "unique_id": "model.lever_source.stg_lever__user", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__user_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__user_tmp')),\n                staging_columns=get_user_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        access_role,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        cast(deactivated_at as {{ dbt.type_timestamp() }}) as deactivated_at,\n        email, -- username is just taken from the email\n        external_directory_id as external_directory_user_id,\n        id as user_id,\n        name as full_name\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__user.sql", "original_file_path": "models/stg_lever__user.sql", "name": "stg_lever__user", "alias": "stg_lever__user", "checksum": {"name": "sha256", "checksum": "c2ee8335127664eda9cb215f30bbb2158965117a3fc09d79cf61b41f16566926"}, "tags": [], "refs": [["stg_lever__user_tmp"], ["stg_lever__user_tmp"]], "sources": [], "metrics": [], "description": "Table of Lever users (anyone who has been invited to join the recruiting efforts).", "columns": {"user_id": {"name": "user_id", "description": "Unique id of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "access_role": {"name": "access_role", "description": "The user's access role, which can be 'super admin', 'admin', 'team member', 'limited team member', or 'interviewer'. Information on what the roles entail can be found  [here](https://help.lever.co/hc/en-us/articles/360042645691-What-are-the-differences-between-access-roles-in-Lever-#:~:text=There%20are%205%20different%20access,information%2C%20and%20permission%20granting%20privileges).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the user was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deactivated_at": {"name": "deactivated_at", "description": "Timestamp of when the user was deactivated (null for active users).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The user's email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_directory_user_id": {"name": "external_directory_user_id", "description": "Unique ID of the user in an external HR directory, if provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "User's preferred name.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__user.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.408928, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    access_role\n    \n as \n    \n    access_role\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    deactivated_at\n    \n as \n    \n    deactivated_at\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    external_directory_id\n    \n as \n    \n    external_directory_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    photo\n    \n as \n    \n    photo\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        access_role,\n        cast(created_at as TIMESTAMP) as created_at,\n        cast(deactivated_at as TIMESTAMP) as deactivated_at,\n        email, -- username is just taken from the email\n        external_directory_id as external_directory_user_id,\n        id as user_id,\n        name as full_name\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`"}, "model.lever_source.stg_lever__stage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_stage_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__stage_tmp", "model.lever_source.stg_lever__stage_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__stage"], "unique_id": "model.lever_source.stg_lever__stage", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__stage_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__stage_tmp')),\n                staging_columns=get_stage_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as stage_id,\n        text as stage_name,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__stage.sql", "original_file_path": "models/stg_lever__stage.sql", "name": "stg_lever__stage", "alias": "stg_lever__stage", "checksum": {"name": "sha256", "checksum": "f0fb9986393d4bff916239ba93f6eb47c585f79c942a1729cfc498e488d0cda4"}, "tags": [], "refs": [["stg_lever__stage_tmp"], ["stg_lever__stage_tmp"]], "sources": [], "metrics": [], "description": "Table of steps in the recruiting workflow of your hiring pipeline.", "columns": {"stage_id": {"name": "stage_id", "description": "Unique id of the stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_name": {"name": "stage_name", "description": "Title of the stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__stage.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.4108539, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__stage_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    text\n    \n as \n    \n    text\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as stage_id,\n        text as stage_name,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__stage`"}, "model.lever_source.stg_lever__feedback_form_field": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_feedback_form_field_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__feedback_form_field_tmp", "model.lever_source.stg_lever__feedback_form_field_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__feedback_form_field"], "unique_id": "model.lever_source.stg_lever__feedback_form_field", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__feedback_form_field_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__feedback_form_field_tmp')),\n                staging_columns=get_feedback_form_field_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        code_language,\n        currency,\n        feedback_form_id,\n        field_index,\n        value_index,\n        value_date,\n        value_decimal,\n        value_file_id,\n        value_number,\n        value_text\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__feedback_form_field.sql", "original_file_path": "models/stg_lever__feedback_form_field.sql", "name": "stg_lever__feedback_form_field", "alias": "stg_lever__feedback_form_field", "checksum": {"name": "sha256", "checksum": "1b1fd99e7522161b534db7aa980aaa29fa1fc06de58a73664f48388c74dc6b5b"}, "tags": [], "refs": [["stg_lever__feedback_form_field_tmp"], ["stg_lever__feedback_form_field_tmp"]], "sources": [], "metrics": [], "description": "Table capturing the values provided for individual fields within interview feedback forms.", "columns": {"feedback_form_id": {"name": "feedback_form_id", "description": "Foreign key referencing the FEEDBACK_FORM that this field is found in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_index": {"name": "field_index", "description": "Numerical index of the field's position in the feedback form.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_index": {"name": "value_index", "description": "Index of the value(s) provided for this field. This is relevant if the field is an array.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code_language": {"name": "code_language", "description": "Programming language if the interview assessed coding.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The three-character ISO 4217 Currency Code specifying what currency this field captures.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_date": {"name": "value_date", "description": "If the field is a date-type, this is the value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_decimal": {"name": "value_decimal", "description": "If the field is a decimal, this is the value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_file_id": {"name": "value_file_id", "description": "Foreign key referencing the FILE that was provided as the field value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_number": {"name": "value_number", "description": "If the field is a numeric, this is the value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_text": {"name": "value_text", "description": "If the field is a text field, this is the content of the value.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__feedback_form_field.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.421452, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form_field_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    code_language\n    \n as \n    \n    code_language\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    feedback_form_id\n    \n as \n    \n    feedback_form_id\n    \n, \n    \n    \n    field_index\n    \n as \n    \n    field_index\n    \n, \n    \n    \n    value_date\n    \n as \n    \n    value_date\n    \n, \n    \n    \n    value_decimal\n    \n as \n    \n    value_decimal\n    \n, \n    \n    \n    value_file_id\n    \n as \n    \n    value_file_id\n    \n, \n    \n    \n    value_index\n    \n as \n    \n    value_index\n    \n, \n    \n    \n    value_number\n    \n as \n    \n    value_number\n    \n, \n    \n    \n    value_text\n    \n as \n    \n    value_text\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        code_language,\n        currency,\n        feedback_form_id,\n        field_index,\n        value_index,\n        value_date,\n        value_decimal,\n        value_file_id,\n        value_number,\n        value_text\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form_field`"}, "model.lever_source.stg_lever__opportunity_source": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_opportunity_source_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__opportunity_source_tmp", "model.lever_source.stg_lever__opportunity_source_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__opportunity_source"], "unique_id": "model.lever_source.stg_lever__opportunity_source", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__opportunity_source_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__opportunity_source_tmp')),\n                staging_columns=get_opportunity_source_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        opportunity_id, \n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        source\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__opportunity_source.sql", "original_file_path": "models/stg_lever__opportunity_source.sql", "name": "stg_lever__opportunity_source", "alias": "stg_lever__opportunity_source", "checksum": {"name": "sha256", "checksum": "1b0603826d20133ef9fc0dd0d8621b8b4433b5dbdd6115c4606a1353213231e1"}, "tags": [], "refs": [["stg_lever__opportunity_source_tmp"], ["stg_lever__opportunity_source_tmp"]], "sources": [], "metrics": [], "description": "Table relating opportunities to all of their individual sources.", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY that was sourced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Where this opportunity was sourced from (ie 'linkedin').", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__opportunity_source.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.4113522, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_source_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    opportunity_id\n    \n as \n    \n    opportunity_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        opportunity_id, \n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        source\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_source`"}, "model.lever_source.stg_lever__opportunity": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_opportunity_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__opportunity_tmp", "model.lever_source.stg_lever__opportunity_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__opportunity"], "unique_id": "model.lever_source.stg_lever__opportunity", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__opportunity_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__opportunity_tmp')),\n                staging_columns=get_opportunity_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(archived_at as {{ dbt.type_timestamp() }}) as archived_at,\n        archived_reason_id,\n        contact as contact_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        data_protection_contact_allowed as is_data_protection_contact_allowed, \n        cast(data_protection_contact_expires_at as {{ dbt.type_timestamp() }}) as data_protection_contact_expires_at,\n        data_protection_store_allowed as is_data_protection_store_allowed,\n        cast(data_protection_store_expires_at as {{ dbt.type_timestamp() }}) as data_protection_store_expires_at,\n        headline as contact_headline,\n        id as opportunity_id, \n        is_anonymized,\n        cast(last_advanced_at as {{ dbt.type_timestamp() }}) as last_advanced_at,\n        cast(last_interaction_at as {{ dbt.type_timestamp() }}) as last_interaction_at,\n        location as contact_location,\n        name as contact_name,\n        origin,\n        owner_id as owner_user_id,\n        snoozed_until,\n        stage_id,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__opportunity.sql", "original_file_path": "models/stg_lever__opportunity.sql", "name": "stg_lever__opportunity", "alias": "stg_lever__opportunity", "checksum": {"name": "sha256", "checksum": "3db152e7dfc54665f9a41d0f64f3ab9e8988e0ed573b070b04cd03c7752b3701"}, "tags": [], "refs": [["stg_lever__opportunity_tmp"], ["stg_lever__opportunity_tmp"]], "sources": [], "metrics": [], "description": "Opportunities represent each candidates' individual journeys/candidacies through your pipeline. An individual candidate might have multiple opportunties if applying to multiple job postings. \n", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Unique ID of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_at": {"name": "archived_at", "description": "Timestamp of when the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_reason_id": {"name": "archived_reason_id", "description": "Foreign key referencing the ARCHIVE_REASON for which the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "Foreign key referencing the CONTACT info of the candidate applying in this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the opportunity was created (ie when the candidate clicked \"apply\" on your company website).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_data_protection_contact_allowed": {"name": "is_data_protection_contact_allowed", "description": "Boolean that is true if relevant data policy regulations allow for contacting  this opportunity's candidate.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_contact_expires_at": {"name": "data_protection_contact_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_data_protection_store_allowed": {"name": "is_data_protection_store_allowed", "description": "Boolean that is true if relevant data policy regulations allow for storing  this opportunity record.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_store_expires_at": {"name": "data_protection_store_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_headline": {"name": "contact_headline", "description": "Contact headline, typically a list of previous companies where the contact has worked or  schools that the contact has attended.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_anonymized": {"name": "is_anonymized", "description": "Boolean that is true if the opportunity has been anonymized (therefore fully anonymizing  the contact and removing their *personal* information).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_advanced_at": {"name": "last_advanced_at", "description": "Timestamp of when the candidate advanced to their current stage in the hiring pipeline.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_interaction_at": {"name": "last_interaction_at", "description": "Timestamp of when the Opportunity profile was last interacted with. See interactions [here](https://help.lever.co/hc/en-us/articles/205697619).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_location": {"name": "contact_location", "description": "Current contact location of the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_name": {"name": "contact_name", "description": "Contact full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origin": {"name": "origin", "description": "The way in which the opportunity was added to lever. Includes 'agency', 'applied', 'internal', 'referred', 'sourced', and 'university'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the id of the USER who owns this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snoozed_until": {"name": "snoozed_until", "description": "Timestamp of when the current snooze period of this opportunity ends (if snoozed).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "Foreign key referencing the ID of the current stage of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the opportunity was last updated in lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__opportunity.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.404445, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    archived_at\n    \n as \n    \n    archived_at\n    \n, \n    \n    \n    archived_reason_id\n    \n as \n    \n    archived_reason_id\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    data_protection_contact_allowed\n    \n as \n    \n    data_protection_contact_allowed\n    \n, \n    \n    \n    data_protection_contact_expires_at\n    \n as \n    \n    data_protection_contact_expires_at\n    \n, \n    \n    \n    data_protection_store_allowed\n    \n as \n    \n    data_protection_store_allowed\n    \n, \n    \n    \n    data_protection_store_expires_at\n    \n as \n    \n    data_protection_store_expires_at\n    \n, \n    \n    \n    headline\n    \n as \n    \n    headline\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_anonymized\n    \n as \n    \n    is_anonymized\n    \n, \n    \n    \n    last_advanced_at\n    \n as \n    \n    last_advanced_at\n    \n, \n    \n    \n    last_interaction_at\n    \n as \n    \n    last_interaction_at\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    origin\n    \n as \n    \n    origin\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    snoozed_until\n    \n as \n    \n    snoozed_until\n    \n, \n    \n    \n    stage_id\n    \n as \n    \n    stage_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(archived_at as TIMESTAMP) as archived_at,\n        archived_reason_id,\n        contact as contact_id,\n        cast(created_at as TIMESTAMP) as created_at,\n        data_protection_contact_allowed as is_data_protection_contact_allowed, \n        cast(data_protection_contact_expires_at as TIMESTAMP) as data_protection_contact_expires_at,\n        data_protection_store_allowed as is_data_protection_store_allowed,\n        cast(data_protection_store_expires_at as TIMESTAMP) as data_protection_store_expires_at,\n        headline as contact_headline,\n        id as opportunity_id, \n        is_anonymized,\n        cast(last_advanced_at as TIMESTAMP) as last_advanced_at,\n        cast(last_interaction_at as TIMESTAMP) as last_interaction_at,\n        location as contact_location,\n        name as contact_name,\n        origin,\n        owner_id as owner_user_id,\n        snoozed_until,\n        stage_id,\n        cast(updated_at as TIMESTAMP) as updated_at\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`"}, "model.lever_source.stg_lever__posting": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_posting_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__posting_tmp", "model.lever_source.stg_lever__posting_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__posting"], "unique_id": "model.lever_source.stg_lever__posting", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__posting_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__posting_tmp')),\n                staging_columns=get_posting_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        categories_commitment as job_commitment,\n        categories_department as job_department,\n        categories_level as job_level,\n        categories_location as job_location,\n        categories_team as job_team,\n        content_description,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        creator_id as creator_user_id,\n        id as posting_id, \n        owner_id as owner_user_id,\n        requisition_code,\n        state as current_state,\n        text as job_title, \n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__posting.sql", "original_file_path": "models/stg_lever__posting.sql", "name": "stg_lever__posting", "alias": "stg_lever__posting", "checksum": {"name": "sha256", "checksum": "5557ede160d36914282bf0543f82108f1ab811e48a7b2f476f18bda1423078b3"}, "tags": [], "refs": [["stg_lever__posting_tmp"], ["stg_lever__posting_tmp"]], "sources": [], "metrics": [], "description": "Table capturing job postings that candidates can apply to.", "columns": {"posting_id": {"name": "posting_id", "description": "Unique ID of the job posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_commitment": {"name": "job_commitment", "description": "Tag for job position work type (e.g. Full-time, Part-time, Internship).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_department": {"name": "job_department", "description": "Tag for the department to which the job posting's team belongs, if present.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_level": {"name": "job_level", "description": "Tag for job posting level (e.g. Senior, Junior). Note - this has been deprecated by Lever  but is currently maintained for backward compatibility.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_location": {"name": "job_location", "description": "Tag for job position location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_team": {"name": "job_team", "description": "Tag for the team to which the job posting belongs (a sub-category of department).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_description": {"name": "content_description", "description": "Job posting description that is shown at the top of the job's page, as plaintext.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the posting was created in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the id of the USER who created the job posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the id of the USER who owns the posting. The posting owner is the  individual who is directly responsible for managing all candidates who are applied to that role.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_code": {"name": "requisition_code", "description": "Array of requisition codes associated with this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_state": {"name": "current_state", "description": "Current status of the posting, which may include 'published', 'internal' (called 'unlisted' in the UI), 'closed', 'draft', 'pending' (awaiting approval), and 'rejected'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "Title of the job posting role.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the posting was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__posting.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.4067142, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    categories_commitment\n    \n as \n    \n    categories_commitment\n    \n, \n    \n    \n    categories_department\n    \n as \n    \n    categories_department\n    \n, \n    \n    \n    categories_level\n    \n as \n    \n    categories_level\n    \n, \n    \n    \n    categories_location\n    \n as \n    \n    categories_location\n    \n, \n    \n    \n    categories_team\n    \n as \n    \n    categories_team\n    \n, \n    \n    \n    content_closing\n    \n as \n    \n    content_closing\n    \n, \n    \n    \n    content_closing_html\n    \n as \n    \n    content_closing_html\n    \n, \n    \n    \n    content_description\n    \n as \n    \n    content_description\n    \n, \n    \n    \n    content_description_html\n    \n as \n    \n    content_description_html\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_id\n    \n as \n    \n    creator_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    requisition_code\n    \n as \n    \n    requisition_code\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    text\n    \n as \n    \n    text\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        categories_commitment as job_commitment,\n        categories_department as job_department,\n        categories_level as job_level,\n        categories_location as job_location,\n        categories_team as job_team,\n        content_description,\n        cast(created_at as TIMESTAMP) as created_at,\n        creator_id as creator_user_id,\n        id as posting_id, \n        owner_id as owner_user_id,\n        requisition_code,\n        state as current_state,\n        text as job_title, \n        cast(updated_at as TIMESTAMP) as updated_at\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting`"}, "model.lever_source.stg_lever__contact_email": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_contact_email_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__contact_email_tmp", "model.lever_source.stg_lever__contact_email_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__contact_email"], "unique_id": "model.lever_source.stg_lever__contact_email", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__contact_email_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__contact_email_tmp')),\n                staging_columns=get_contact_email_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n\n    select \n        contact_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        email\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__contact_email.sql", "original_file_path": "models/stg_lever__contact_email.sql", "name": "stg_lever__contact_email", "alias": "stg_lever__contact_email", "checksum": {"name": "sha256", "checksum": "545fedd47a6d4289a48d979f5b9b06fc770706cf8e7f436e9777b482d29137c7"}, "tags": [], "refs": [["stg_lever__contact_email_tmp"], ["stg_lever__contact_email_tmp"]], "sources": [], "metrics": [], "description": "Table capturing the emails associated with a contact.", "columns": {"contact_id": {"name": "contact_id", "description": "Unique ID of the contact in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Contact's email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__contact_email.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.4254248, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select \n        contact_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        email\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`"}, "model.lever_source.stg_lever__application": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_application_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__application_tmp", "model.lever_source.stg_lever__application_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__application"], "unique_id": "model.lever_source.stg_lever__application", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__application_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__application_tmp')),\n                staging_columns=get_application_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as application_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(archived_at as {{ dbt.type_timestamp() }}) as archived_at,\n        archived_reason_id,\n        comments,\n        company,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        opportunity_id,\n        posting_hiring_manager_id as posting_hiring_manager_user_id,\n        posting_id,\n        posting_owner_id as posting_owner_user_id,\n        referrer_id as referrer_user_id,\n        requisition_for_hire_id as requisition_id,\n        type\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__application.sql", "original_file_path": "models/stg_lever__application.sql", "name": "stg_lever__application", "alias": "stg_lever__application", "checksum": {"name": "sha256", "checksum": "d84061a1ad0b8c76fd1ac772c9232ab71f0199ed9f8f95bd812c159d91b82757"}, "tags": [], "refs": [["stg_lever__application_tmp"], ["stg_lever__application_tmp"]], "sources": [], "metrics": [], "description": "Table capturing candidate applications to job postings.", "columns": {"application_id": {"name": "application_id", "description": "Unique ID of the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_at": {"name": "archived_at", "description": "Timestamp of when the application was last archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_reason_id": {"name": "archived_reason_id", "description": "Foreign key referencing the id of the ARCHIVE_REASON for which the application was last archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "Any additional comments from the candidate included in the job application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "The candidate's current company or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the application was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_hiring_manager_user_id": {"name": "posting_hiring_manager_user_id", "description": "Foreign key referencing the id of the USER who is the job posting's hiring manager, at the time  the application was submitted.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_id": {"name": "posting_id", "description": "Foreign key referencing the job POSTING for which the candidate applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_owner_user_id": {"name": "posting_owner_user_id", "description": "Foreign key referencing the id of the USER who owns this posting at the time the candidate applied.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_user_id": {"name": "referrer_user_id", "description": "The user ID of the candidate's referrer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_id": {"name": "requisition_id", "description": "If the application was archived as hired against a requisition, a foreign key referencing the id of the REQUISITION against which the application was hired.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of the application. An application can be of type referral, user, or posting. Applications of type  referral are created when a user refers a candidate for a job posting. Applications have type user when they  are applied manually to a posting in Lever. Applications have type posting when a candidate applies to a job  posting through your company's jobs page.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the id of the OPPORTUNITY associated with this application.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__application.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.413836, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    archived_at\n    \n as \n    \n    archived_at\n    \n, \n    \n    \n    archived_reason_id\n    \n as \n    \n    archived_reason_id\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    company\n    \n as \n    \n    company\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    opportunity_id\n    \n as \n    \n    opportunity_id\n    \n, \n    \n    \n    posting_hiring_manager_id\n    \n as \n    \n    posting_hiring_manager_id\n    \n, \n    \n    \n    posting_id\n    \n as \n    \n    posting_id\n    \n, \n    \n    \n    posting_owner_id\n    \n as \n    \n    posting_owner_id\n    \n, \n    \n    \n    referrer_id\n    \n as \n    \n    referrer_id\n    \n, \n    \n    \n    requisition_for_hire_id\n    \n as \n    \n    requisition_for_hire_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as application_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(archived_at as TIMESTAMP) as archived_at,\n        archived_reason_id,\n        comments,\n        company,\n        cast(created_at as TIMESTAMP) as created_at,\n        opportunity_id,\n        posting_hiring_manager_id as posting_hiring_manager_user_id,\n        posting_id,\n        posting_owner_id as posting_owner_user_id,\n        referrer_id as referrer_user_id,\n        requisition_for_hire_id as requisition_id,\n        type\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`"}, "model.lever_source.stg_lever__opportunity_stage_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_opportunity_stage_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__opportunity_stage_history_tmp", "model.lever_source.stg_lever__opportunity_stage_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__opportunity_stage_history"], "unique_id": "model.lever_source.stg_lever__opportunity_stage_history", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__opportunity_stage_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__opportunity_stage_history_tmp')),\n                staging_columns=get_opportunity_stage_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        opportunity_id,\n        stage_id,\n        to_stage_index,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at,\n        updater_id as updater_user_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__opportunity_stage_history.sql", "original_file_path": "models/stg_lever__opportunity_stage_history.sql", "name": "stg_lever__opportunity_stage_history", "alias": "stg_lever__opportunity_stage_history", "checksum": {"name": "sha256", "checksum": "761745bfdbb5d5ffd57151c945e96f92aa552e69b9fc7b7ee45c14c75f359421"}, "tags": [], "refs": [["stg_lever__opportunity_stage_history_tmp"], ["stg_lever__opportunity_stage_history_tmp"]], "sources": [], "metrics": [], "description": "Table capturing the different stages that each opportunity has passed through in the pipeline.", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the id of the OPPORTUNITY.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the opportunity was changed to this stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "Foreign key referencing the STAGE that the opportunity was changed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updater_user_id": {"name": "updater_user_id", "description": "Foreign key referencing the USER who changed the opportunity stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_stage_index": {"name": "to_stage_index", "description": "The index of the stage in the pipeline at the time the stage change occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__opportunity_stage_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.41028, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_stage_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    opportunity_id\n    \n as \n    \n    opportunity_id\n    \n, \n    \n    \n    stage_id\n    \n as \n    \n    stage_id\n    \n, \n    \n    \n    to_stage_index\n    \n as \n    \n    to_stage_index\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    updater_id\n    \n as \n    \n    updater_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        opportunity_id,\n        stage_id,\n        to_stage_index,\n        cast(updated_at as TIMESTAMP) as updated_at,\n        updater_id as updater_user_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_stage_history`"}, "model.lever_source.stg_lever__interview": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.lever_source.get_interview_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.lever_source.stg_lever__interview_tmp", "model.lever_source.stg_lever__interview_tmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "stg_lever__interview"], "unique_id": "model.lever_source.stg_lever__interview", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_lever__interview_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_lever__interview_tmp')),\n                staging_columns=get_interview_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(canceled_at as {{ dbt.type_timestamp() }}) as canceled_at,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        creator_id as creator_user_id,\n        cast(date as {{ dbt.type_timestamp() }}) as occurred_at,\n        duration as duration_minutes,\n        feedback_reminder as feedback_reminder_frequency,\n        gcal_event_url,\n        id as interview_id,\n        location,\n        note,\n        opportunity_id,\n        panel_id,\n        stage_id as opportunity_stage_id,\n        subject,\n        timezone\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "stg_lever__interview.sql", "original_file_path": "models/stg_lever__interview.sql", "name": "stg_lever__interview", "alias": "stg_lever__interview", "checksum": {"name": "sha256", "checksum": "89d69b7209a7be62146a396ce8c982c9f37c3b1f0347d57b41378856fd6d4d36"}, "tags": [], "refs": [["stg_lever__interview_tmp"], ["stg_lever__interview_tmp"]], "sources": [], "metrics": [], "description": "Table capturing individual interviews (which comprise panels).", "columns": {"interview_id": {"name": "interview_id", "description": "Unique ID of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "Timestamp of when the interview was canceled, if canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the interview was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the USER who created the interview in lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "Date + time at which the interview was set to occur.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_minutes": {"name": "duration_minutes", "description": "Interview duration in minutes, minimum value is 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_reminder_frequency": {"name": "feedback_reminder_frequency", "description": "Frequency of feedback reminders (i.e. once, daily, frequently, none). Defaults to 'frequently' which is every 6 hours.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gcal_event_url": {"name": "gcal_event_url", "description": "Google calendar event url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "Interview location. Usually the name of a booked conference room but can also be a  phone number to call.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "Interview note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "panel_id": {"name": "panel_id", "description": "Unique id of the PANEL this interview belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_stage_id": {"name": "opportunity_stage_id", "description": "Foreign key referencing the STAGE that the candidate was in at the time  the interview was scheduled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "Subject of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Name of timezone in which interview was scheduled to occur.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY being interviewed for.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "lever_source://models/stg_lever.yml", "compiled_path": "target/compiled/lever_source/models/stg_lever__interview.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1666651815.417492, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_id\n    \n as \n    \n    creator_id\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    duration\n    \n as \n    \n    duration\n    \n, \n    \n    \n    feedback_reminder\n    \n as \n    \n    feedback_reminder\n    \n, \n    \n    \n    gcal_event_url\n    \n as \n    \n    gcal_event_url\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    opportunity_id\n    \n as \n    \n    opportunity_id\n    \n, \n    \n    \n    panel_id\n    \n as \n    \n    panel_id\n    \n, \n    \n    \n    stage_id\n    \n as \n    \n    stage_id\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(canceled_at as TIMESTAMP) as canceled_at,\n        cast(created_at as TIMESTAMP) as created_at,\n        creator_id as creator_user_id,\n        cast(date as TIMESTAMP) as occurred_at,\n        duration as duration_minutes,\n        feedback_reminder as feedback_reminder_frequency,\n        gcal_event_url,\n        id as interview_id,\n        location,\n        note,\n        opportunity_id,\n        panel_id,\n        stage_id as opportunity_stage_id,\n        subject,\n        timezone\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`"}, "model.lever_source.stg_lever__opportunity_source_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.opportunity_source"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__opportunity_source_tmp"], "unique_id": "model.lever_source.stg_lever__opportunity_source_tmp", "raw_code": "select * from {{ var('opportunity_source') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__opportunity_source_tmp.sql", "original_file_path": "models/tmp/stg_lever__opportunity_source_tmp.sql", "name": "stg_lever__opportunity_source_tmp", "alias": "stg_lever__opportunity_source_tmp", "checksum": {"name": "sha256", "checksum": "3e8d01fb7ddb51c27a7ef10f6ad048a75708d1d5bf1da4c2998ad9254d4cb948"}, "tags": [], "refs": [], "sources": [["lever", "opportunity_source"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__opportunity_source_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.195647, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`opportunity_source`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_source_tmp`"}, "model.lever_source.stg_lever__posting_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.posting"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__posting_tmp"], "unique_id": "model.lever_source.stg_lever__posting_tmp", "raw_code": "select * from {{ var('posting') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__posting_tmp.sql", "original_file_path": "models/tmp/stg_lever__posting_tmp.sql", "name": "stg_lever__posting_tmp", "alias": "stg_lever__posting_tmp", "checksum": {"name": "sha256", "checksum": "7d7f9df9e64259e71e32688a98a10031f940c447c1f824418c79cf41822812ea"}, "tags": [], "refs": [], "sources": [["lever", "posting"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__posting_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.198866, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`posting`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tmp`"}, "model.lever_source.stg_lever__interview_feedback_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.interview_feedback"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__interview_feedback_tmp"], "unique_id": "model.lever_source.stg_lever__interview_feedback_tmp", "raw_code": "select * from {{ var('interview_feedback') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__interview_feedback_tmp.sql", "original_file_path": "models/tmp/stg_lever__interview_feedback_tmp.sql", "name": "stg_lever__interview_feedback_tmp", "alias": "stg_lever__interview_feedback_tmp", "checksum": {"name": "sha256", "checksum": "0dadada9134102e5355def6884f8409deccaaa9036f7bb7d8d13d4d40a3c4233"}, "tags": [], "refs": [], "sources": [["lever", "interview_feedback"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__interview_feedback_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.2019598, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`interview_feedback`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_feedback_tmp`"}, "model.lever_source.stg_lever__feedback_form_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.feedback_form"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__feedback_form_tmp"], "unique_id": "model.lever_source.stg_lever__feedback_form_tmp", "raw_code": "select * from {{ var('feedback_form') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__feedback_form_tmp.sql", "original_file_path": "models/tmp/stg_lever__feedback_form_tmp.sql", "name": "stg_lever__feedback_form_tmp", "alias": "stg_lever__feedback_form_tmp", "checksum": {"name": "sha256", "checksum": "576ba1cf38081220451f3c9642b843852f6ef0ec4427d5dedf089e290402f792"}, "tags": [], "refs": [], "sources": [["lever", "feedback_form"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__feedback_form_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.205014, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`feedback_form`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form_tmp`"}, "model.lever_source.stg_lever__contact_link_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.contact_link"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__contact_link_tmp"], "unique_id": "model.lever_source.stg_lever__contact_link_tmp", "raw_code": "select * from {{ var('contact_link') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__contact_link_tmp.sql", "original_file_path": "models/tmp/stg_lever__contact_link_tmp.sql", "name": "stg_lever__contact_link_tmp", "alias": "stg_lever__contact_link_tmp", "checksum": {"name": "sha256", "checksum": "e88dfb7710c947bab75aa9cc13ae9fa109e725bbf0b91f2142eed4983c7ebce0"}, "tags": [], "refs": [], "sources": [["lever", "contact_link"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__contact_link_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.208022, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`contact_link`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link_tmp`"}, "model.lever_source.stg_lever__contact_phone_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.contact_phone"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__contact_phone_tmp"], "unique_id": "model.lever_source.stg_lever__contact_phone_tmp", "raw_code": "select * from {{ var('contact_phone') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__contact_phone_tmp.sql", "original_file_path": "models/tmp/stg_lever__contact_phone_tmp.sql", "name": "stg_lever__contact_phone_tmp", "alias": "stg_lever__contact_phone_tmp", "checksum": {"name": "sha256", "checksum": "32a3aa575a3f42f14dd65ba8e441c4d0c7f6f4319108be48febf95469c48e6e6"}, "tags": [], "refs": [], "sources": [["lever", "contact_phone"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__contact_phone_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.211842, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`contact_phone`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone_tmp`"}, "model.lever_source.stg_lever__opportunity_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.opportunity"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__opportunity_tmp"], "unique_id": "model.lever_source.stg_lever__opportunity_tmp", "raw_code": "select * from {{ var('opportunity') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__opportunity_tmp.sql", "original_file_path": "models/tmp/stg_lever__opportunity_tmp.sql", "name": "stg_lever__opportunity_tmp", "alias": "stg_lever__opportunity_tmp", "checksum": {"name": "sha256", "checksum": "b53d98e4e687540d34a33c22ed5d201107727c892e674abcb01b3a7243285fd9"}, "tags": [], "refs": [], "sources": [["lever", "opportunity"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__opportunity_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.214903, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`opportunity`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tmp`"}, "model.lever_source.stg_lever__posting_interview_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.posting_interview"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__posting_interview_tmp"], "unique_id": "model.lever_source.stg_lever__posting_interview_tmp", "raw_code": "select * from {{ var('posting_interview') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__posting_interview_tmp.sql", "original_file_path": "models/tmp/stg_lever__posting_interview_tmp.sql", "name": "stg_lever__posting_interview_tmp", "alias": "stg_lever__posting_interview_tmp", "checksum": {"name": "sha256", "checksum": "532698058284db1984817103fb1735f4dee6b77865f49157b4e536d06ceb0497"}, "tags": [], "refs": [], "sources": [["lever", "posting_interview"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__posting_interview_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.217928, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`posting_interview`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_interview_tmp`"}, "model.lever_source.stg_lever__opportunity_tag_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.opportunity_tag"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__opportunity_tag_tmp"], "unique_id": "model.lever_source.stg_lever__opportunity_tag_tmp", "raw_code": "select * from {{ var('opportunity_tag') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__opportunity_tag_tmp.sql", "original_file_path": "models/tmp/stg_lever__opportunity_tag_tmp.sql", "name": "stg_lever__opportunity_tag_tmp", "alias": "stg_lever__opportunity_tag_tmp", "checksum": {"name": "sha256", "checksum": "441207ee69b34998a17a3e498a848f33bb01e766089ca1e586ab2e0eecf6099f"}, "tags": [], "refs": [], "sources": [["lever", "opportunity_tag"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__opportunity_tag_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.2209542, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`opportunity_tag`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tag_tmp`"}, "model.lever_source.stg_lever__opportunity_stage_history_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.opportunity_stage_history"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__opportunity_stage_history_tmp"], "unique_id": "model.lever_source.stg_lever__opportunity_stage_history_tmp", "raw_code": "select * from {{ var('opportunity_stage_history') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__opportunity_stage_history_tmp.sql", "original_file_path": "models/tmp/stg_lever__opportunity_stage_history_tmp.sql", "name": "stg_lever__opportunity_stage_history_tmp", "alias": "stg_lever__opportunity_stage_history_tmp", "checksum": {"name": "sha256", "checksum": "d90c1240805368d58b73f837301df71c919767076a50b9e9caf200e0fee73b58"}, "tags": [], "refs": [], "sources": [["lever", "opportunity_stage_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__opportunity_stage_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.2240791, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`opportunity_stage_history`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_stage_history_tmp`"}, "model.lever_source.stg_lever__stage_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.stage"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__stage_tmp"], "unique_id": "model.lever_source.stg_lever__stage_tmp", "raw_code": "select * from {{ var('stage') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__stage_tmp.sql", "original_file_path": "models/tmp/stg_lever__stage_tmp.sql", "name": "stg_lever__stage_tmp", "alias": "stg_lever__stage_tmp", "checksum": {"name": "sha256", "checksum": "d62a1c8bbfcaad625969ee6c9f333016493bc7f137f0337ccbd455e595c4b67b"}, "tags": [], "refs": [], "sources": [["lever", "stage"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__stage_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.227286, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`stage`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__stage_tmp`"}, "model.lever_source.stg_lever__requisition_offer_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.requisition_offer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__requisition_offer_tmp"], "unique_id": "model.lever_source.stg_lever__requisition_offer_tmp", "raw_code": "{{ config(enabled=var('lever_using_requisitions', True)) }}\n\nselect * from {{ var('requisition_offer') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__requisition_offer_tmp.sql", "original_file_path": "models/tmp/stg_lever__requisition_offer_tmp.sql", "name": "stg_lever__requisition_offer_tmp", "alias": "stg_lever__requisition_offer_tmp", "checksum": {"name": "sha256", "checksum": "f435e29d968191216726cdaf026a361787712046892c9af4b2852d076d55bef2"}, "tags": [], "refs": [], "sources": [["lever", "requisition_offer"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__requisition_offer_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1666651815.231041, "compiled_code": "\n\nselect * from `dbt-package-testing`.`lever_integration_tests`.`requisition_offer`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_offer_tmp`"}, "model.lever_source.stg_lever__posting_tag_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.posting_tag"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__posting_tag_tmp"], "unique_id": "model.lever_source.stg_lever__posting_tag_tmp", "raw_code": "{{ config(enabled=var('lever_using_posting_tag', True)) }}\n\n\nselect * from {{ var('posting_tag') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__posting_tag_tmp.sql", "original_file_path": "models/tmp/stg_lever__posting_tag_tmp.sql", "name": "stg_lever__posting_tag_tmp", "alias": "stg_lever__posting_tag_tmp", "checksum": {"name": "sha256", "checksum": "2ef78f5f10ab2e93023f5625bc5dbb1eec2923883fba02bf1afb098fce49c13c"}, "tags": [], "refs": [], "sources": [["lever", "posting_tag"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__posting_tag_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1666651815.234196, "compiled_code": "\n\n\nselect * from `dbt-package-testing`.`lever_integration_tests`.`posting_tag`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tag_tmp`"}, "model.lever_source.stg_lever__application_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.application"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__application_tmp"], "unique_id": "model.lever_source.stg_lever__application_tmp", "raw_code": "select * from {{ var('application') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__application_tmp.sql", "original_file_path": "models/tmp/stg_lever__application_tmp.sql", "name": "stg_lever__application_tmp", "alias": "stg_lever__application_tmp", "checksum": {"name": "sha256", "checksum": "fa0d2a9e0f3dde8af89d4c39e1c0e0074717bb49eaa3b436de9ed4a9a0b1def0"}, "tags": [], "refs": [], "sources": [["lever", "application"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__application_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.237314, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`application`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__application_tmp`"}, "model.lever_source.stg_lever__requisition_posting_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.requisition_posting"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__requisition_posting_tmp"], "unique_id": "model.lever_source.stg_lever__requisition_posting_tmp", "raw_code": "{{ config(enabled=var('lever_using_requisitions', True)) }}\n\nselect * from {{ var('requisition_posting') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__requisition_posting_tmp.sql", "original_file_path": "models/tmp/stg_lever__requisition_posting_tmp.sql", "name": "stg_lever__requisition_posting_tmp", "alias": "stg_lever__requisition_posting_tmp", "checksum": {"name": "sha256", "checksum": "513ecf8350dc4c090fa1e9614153f81788b48b2570cc7cb90f0747d27e71fb4c"}, "tags": [], "refs": [], "sources": [["lever", "requisition_posting"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__requisition_posting_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1666651815.240136, "compiled_code": "\n\nselect * from `dbt-package-testing`.`lever_integration_tests`.`requisition_posting`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_posting_tmp`"}, "model.lever_source.stg_lever__archive_reason_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.archive_reason"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__archive_reason_tmp"], "unique_id": "model.lever_source.stg_lever__archive_reason_tmp", "raw_code": "select * from {{ var('archive_reason') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__archive_reason_tmp.sql", "original_file_path": "models/tmp/stg_lever__archive_reason_tmp.sql", "name": "stg_lever__archive_reason_tmp", "alias": "stg_lever__archive_reason_tmp", "checksum": {"name": "sha256", "checksum": "f9bafe9b3a0530313e2a24f46b8d74b834fd7555e671a66527033bef8a0d0cd0"}, "tags": [], "refs": [], "sources": [["lever", "archive_reason"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__archive_reason_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.243198, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`archive_reason`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__archive_reason_tmp`"}, "model.lever_source.stg_lever__resume_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.resume"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__resume_tmp"], "unique_id": "model.lever_source.stg_lever__resume_tmp", "raw_code": "select * from {{ var('resume') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__resume_tmp.sql", "original_file_path": "models/tmp/stg_lever__resume_tmp.sql", "name": "stg_lever__resume_tmp", "alias": "stg_lever__resume_tmp", "checksum": {"name": "sha256", "checksum": "e17612f6c440018ecee673fa1d81010cc1f6457f7e2e6064d92d2a3f16953d2d"}, "tags": [], "refs": [], "sources": [["lever", "resume"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__resume_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.246003, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`resume`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume_tmp`"}, "model.lever_source.stg_lever__interview_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.interview"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__interview_tmp"], "unique_id": "model.lever_source.stg_lever__interview_tmp", "raw_code": "select * from {{ var('interview') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__interview_tmp.sql", "original_file_path": "models/tmp/stg_lever__interview_tmp.sql", "name": "stg_lever__interview_tmp", "alias": "stg_lever__interview_tmp", "checksum": {"name": "sha256", "checksum": "d019967999ad4ea1bbfb69a7b896088d9f03cf5c9e4afb4a8037a89c27fc889d"}, "tags": [], "refs": [], "sources": [["lever", "interview"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__interview_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.249426, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`interview`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_tmp`"}, "model.lever_source.stg_lever__contact_email_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.contact_email"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__contact_email_tmp"], "unique_id": "model.lever_source.stg_lever__contact_email_tmp", "raw_code": "select * from {{ var('contact_email') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__contact_email_tmp.sql", "original_file_path": "models/tmp/stg_lever__contact_email_tmp.sql", "name": "stg_lever__contact_email_tmp", "alias": "stg_lever__contact_email_tmp", "checksum": {"name": "sha256", "checksum": "5954685a46d024875fca46b59ea0f5d02ce08a6fa7b08f2af94f7876d799d941"}, "tags": [], "refs": [], "sources": [["lever", "contact_email"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__contact_email_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.252337, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`contact_email`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email_tmp`"}, "model.lever_source.stg_lever__user_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.user"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__user_tmp"], "unique_id": "model.lever_source.stg_lever__user_tmp", "raw_code": "select * from {{ var('user') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__user_tmp.sql", "original_file_path": "models/tmp/stg_lever__user_tmp.sql", "name": "stg_lever__user_tmp", "alias": "stg_lever__user_tmp", "checksum": {"name": "sha256", "checksum": "8edcb90c9c99e9587b1b388c503148cd57d5dbf8a3449495262a3d71dcf1a357"}, "tags": [], "refs": [], "sources": [["lever", "user"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__user_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.255133, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`user`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__user_tmp`"}, "model.lever_source.stg_lever__requisition_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.requisition"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__requisition_tmp"], "unique_id": "model.lever_source.stg_lever__requisition_tmp", "raw_code": "{{ config(enabled=var('lever_using_requisitions', True)) }}\n\nselect * from {{ var('requisition') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__requisition_tmp.sql", "original_file_path": "models/tmp/stg_lever__requisition_tmp.sql", "name": "stg_lever__requisition_tmp", "alias": "stg_lever__requisition_tmp", "checksum": {"name": "sha256", "checksum": "5971fbc4c27fcd68b2933c33e12d7c460fe800e09b342a1d1aea5ae48229d664"}, "tags": [], "refs": [], "sources": [["lever", "requisition"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__requisition_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1666651815.2579331, "compiled_code": "\n\nselect * from `dbt-package-testing`.`lever_integration_tests`.`requisition`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_tmp`"}, "model.lever_source.stg_lever__feedback_form_field_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.feedback_form_field"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__feedback_form_field_tmp"], "unique_id": "model.lever_source.stg_lever__feedback_form_field_tmp", "raw_code": "select * from {{ var('feedback_form_field') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__feedback_form_field_tmp.sql", "original_file_path": "models/tmp/stg_lever__feedback_form_field_tmp.sql", "name": "stg_lever__feedback_form_field_tmp", "alias": "stg_lever__feedback_form_field_tmp", "checksum": {"name": "sha256", "checksum": "d8d6f911efbe4747b526ca8aa6f44e499e282aee54724b843dc3bb6183970e00"}, "tags": [], "refs": [], "sources": [["lever", "feedback_form_field"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__feedback_form_field_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.2609842, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`feedback_form_field`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form_field_tmp`"}, "model.lever_source.stg_lever__interviewer_user_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.interviewer_user"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__interviewer_user_tmp"], "unique_id": "model.lever_source.stg_lever__interviewer_user_tmp", "raw_code": "select * from {{ var('interviewer_user') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__interviewer_user_tmp.sql", "original_file_path": "models/tmp/stg_lever__interviewer_user_tmp.sql", "name": "stg_lever__interviewer_user_tmp", "alias": "stg_lever__interviewer_user_tmp", "checksum": {"name": "sha256", "checksum": "31d8cfc99cbebea32bd07d0860a320cc32a0b3e6cab19e7b65725020ec9478fd"}, "tags": [], "refs": [], "sources": [["lever", "interviewer_user"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__interviewer_user_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.26441, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`interviewer_user`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__interviewer_user_tmp`"}, "model.lever_source.stg_lever__offer_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lever_source.lever.offer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "lever_integration_tests", "fqn": ["lever_source", "tmp", "stg_lever__offer_tmp"], "unique_id": "model.lever_source.stg_lever__offer_tmp", "raw_code": "select * from {{ var('offer') }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "tmp/stg_lever__offer_tmp.sql", "original_file_path": "models/tmp/stg_lever__offer_tmp.sql", "name": "stg_lever__offer_tmp", "alias": "stg_lever__offer_tmp", "checksum": {"name": "sha256", "checksum": "3c5de342b3a6d7b44bcac16080be180ec458b95105a74f2eca9aca5f13528c3e"}, "tags": [], "refs": [], "sources": [["lever", "offer"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/tmp/stg_lever__offer_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1666651815.2672598, "compiled_code": "select * from `dbt-package-testing`.`lever_integration_tests`.`offer`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stg_lever__offer_tmp`"}, "test.lever.unique_lever__opportunity_enhanced_opportunity_id.4730712f6d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('lever__opportunity_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.lever__opportunity_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "unique_lever__opportunity_enhanced_opportunity_id"], "unique_id": "test.lever.unique_lever__opportunity_enhanced_opportunity_id.4730712f6d", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_lever__opportunity_enhanced_opportunity_id.sql", "original_file_path": "models/lever.yml", "name": "unique_lever__opportunity_enhanced_opportunity_id", "alias": "unique_lever__opportunity_enhanced_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["lever__opportunity_enhanced"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/lever.yml/unique_lever__opportunity_enhanced_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.306824, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select opportunity_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`lever__opportunity_enhanced`\n  where opportunity_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.lever__opportunity_enhanced"}, "test.lever.not_null_lever__opportunity_enhanced_opportunity_id.13470c5ff7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('lever__opportunity_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.lever__opportunity_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "not_null_lever__opportunity_enhanced_opportunity_id"], "unique_id": "test.lever.not_null_lever__opportunity_enhanced_opportunity_id.13470c5ff7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_lever__opportunity_enhanced_opportunity_id.sql", "original_file_path": "models/lever.yml", "name": "not_null_lever__opportunity_enhanced_opportunity_id", "alias": "not_null_lever__opportunity_enhanced_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["lever__opportunity_enhanced"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/lever.yml/not_null_lever__opportunity_enhanced_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.307702, "compiled_code": "\n    \n    \n\n\n\nselect opportunity_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`lever__opportunity_enhanced`\nwhere opportunity_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.lever__opportunity_enhanced"}, "test.lever.unique_lever__posting_enhanced_posting_id.166f999091": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "posting_id", "model": "{{ get_where_subquery(ref('lever__posting_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.lever__posting_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "unique_lever__posting_enhanced_posting_id"], "unique_id": "test.lever.unique_lever__posting_enhanced_posting_id.166f999091", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_lever__posting_enhanced_posting_id.sql", "original_file_path": "models/lever.yml", "name": "unique_lever__posting_enhanced_posting_id", "alias": "unique_lever__posting_enhanced_posting_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["lever__posting_enhanced"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/lever.yml/unique_lever__posting_enhanced_posting_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.308518, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select posting_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`lever__posting_enhanced`\n  where posting_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "posting_id", "file_key_name": "models.lever__posting_enhanced"}, "test.lever.not_null_lever__posting_enhanced_posting_id.0f16e9aa3c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "posting_id", "model": "{{ get_where_subquery(ref('lever__posting_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.lever__posting_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "not_null_lever__posting_enhanced_posting_id"], "unique_id": "test.lever.not_null_lever__posting_enhanced_posting_id.0f16e9aa3c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_lever__posting_enhanced_posting_id.sql", "original_file_path": "models/lever.yml", "name": "not_null_lever__posting_enhanced_posting_id", "alias": "not_null_lever__posting_enhanced_posting_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["lever__posting_enhanced"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/lever.yml/not_null_lever__posting_enhanced_posting_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.309421, "compiled_code": "\n    \n    \n\n\n\nselect posting_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`lever__posting_enhanced`\nwhere posting_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "posting_id", "file_key_name": "models.lever__posting_enhanced"}, "test.lever.unique_lever__requisition_enhanced_requisition_id.aff49ec548": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "requisition_id", "model": "{{ get_where_subquery(ref('lever__requisition_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.lever__requisition_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "unique_lever__requisition_enhanced_requisition_id"], "unique_id": "test.lever.unique_lever__requisition_enhanced_requisition_id.aff49ec548", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_lever__requisition_enhanced_requisition_id.sql", "original_file_path": "models/lever.yml", "name": "unique_lever__requisition_enhanced_requisition_id", "alias": "unique_lever__requisition_enhanced_requisition_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["lever__requisition_enhanced"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/lever.yml/unique_lever__requisition_enhanced_requisition_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.3102112, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select requisition_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`lever__requisition_enhanced`\n  where requisition_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "requisition_id", "file_key_name": "models.lever__requisition_enhanced"}, "test.lever.not_null_lever__requisition_enhanced_requisition_id.215e62c13b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "requisition_id", "model": "{{ get_where_subquery(ref('lever__requisition_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.lever__requisition_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "not_null_lever__requisition_enhanced_requisition_id"], "unique_id": "test.lever.not_null_lever__requisition_enhanced_requisition_id.215e62c13b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_lever__requisition_enhanced_requisition_id.sql", "original_file_path": "models/lever.yml", "name": "not_null_lever__requisition_enhanced_requisition_id", "alias": "not_null_lever__requisition_enhanced_requisition_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["lever__requisition_enhanced"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/lever.yml/not_null_lever__requisition_enhanced_requisition_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.3110101, "compiled_code": "\n    \n    \n\n\n\nselect requisition_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`lever__requisition_enhanced`\nwhere requisition_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "requisition_id", "file_key_name": "models.lever__requisition_enhanced"}, "test.lever.unique_int_lever__contact_info_contact_id.8c8f6baf02": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('int_lever__contact_info')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__contact_info"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "unique_int_lever__contact_info_contact_id"], "unique_id": "test.lever.unique_int_lever__contact_info_contact_id.8c8f6baf02", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_int_lever__contact_info_contact_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "unique_int_lever__contact_info_contact_id", "alias": "unique_int_lever__contact_info_contact_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__contact_info"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/unique_int_lever__contact_info_contact_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.3404422, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n),dbt_test__target as (\n\n  select contact_id as unique_field\n  from __dbt__cte__int_lever__contact_info\n  where contact_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__contact_info", "sql": " __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n)"}], "relation_name": null, "column_name": "contact_id", "file_key_name": "models.int_lever__contact_info"}, "test.lever.not_null_int_lever__contact_info_contact_id.22ddde3962": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('int_lever__contact_info')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__contact_info"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "not_null_int_lever__contact_info_contact_id"], "unique_id": "test.lever.not_null_int_lever__contact_info_contact_id.22ddde3962", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_int_lever__contact_info_contact_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "not_null_int_lever__contact_info_contact_id", "alias": "not_null_int_lever__contact_info_contact_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__contact_info"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/not_null_int_lever__contact_info_contact_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.341258, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n)select contact_id\nfrom __dbt__cte__int_lever__contact_info\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__contact_info", "sql": " __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n)"}], "relation_name": null, "column_name": "contact_id", "file_key_name": "models.int_lever__contact_info"}, "test.lever.dbt_utils_unique_combination_of_columns_int_lever__interview_feedback_feedback_form_id__interview_id.99a7ccec94": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["feedback_form_id", "interview_id"], "model": "{{ get_where_subquery(ref('int_lever__interview_feedback')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__interview_feedback"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a5073bac10d30f420d18de2ba91d531e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "dbt_utils_unique_combination_of_columns_int_lever__interview_feedback_feedback_form_id__interview_id"], "unique_id": "test.lever.dbt_utils_unique_combination_of_columns_int_lever__interview_feedback_feedback_form_id__interview_id.99a7ccec94", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a5073bac10d30f420d18de2ba91d531e\") }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "dbt_utils_unique_combination_o_a5073bac10d30f420d18de2ba91d531e.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "dbt_utils_unique_combination_of_columns_int_lever__interview_feedback_feedback_form_id__interview_id", "alias": "dbt_utils_unique_combination_o_a5073bac10d30f420d18de2ba91d531e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__interview_feedback"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/dbt_utils_unique_combination_o_a5073bac10d30f420d18de2ba91d531e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a5073bac10d30f420d18de2ba91d531e"}, "created_at": 1666651815.342153, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_lever__interview_feedback as (\nwith interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\n-- join with this to limit noise \ninterview_feedback as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_feedback`\n),\n\nfeedback_form as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form`\n\n    where deleted_at is null\n),\n\njoin_w_feedback as (\n\n    select\n        interview.*,\n        feedback_form.feedback_form_id,\n        feedback_form.creator_user_id as feedback_completer_user_id,\n        feedback_form.completed_at as feedback_completed_at,\n\n        feedback_form.instructions as feedback_form_instructions,\n        feedback_form.score_system_value,\n        feedback_form.form_title as feedback_form_title\n\n\n    from interview\n    left join interview_feedback \n        on interview.interview_id = interview_feedback.interview_id\n    left join feedback_form \n        on interview_feedback.feedback_form_id = feedback_form.feedback_form_id\n)\n\nselect *\nfrom join_w_feedback\n),validation_errors as (\n\n    select\n        feedback_form_id, interview_id\n    from __dbt__cte__int_lever__interview_feedback\n    group by feedback_form_id, interview_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__interview_feedback", "sql": " __dbt__cte__int_lever__interview_feedback as (\nwith interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\n-- join with this to limit noise \ninterview_feedback as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_feedback`\n),\n\nfeedback_form as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form`\n\n    where deleted_at is null\n),\n\njoin_w_feedback as (\n\n    select\n        interview.*,\n        feedback_form.feedback_form_id,\n        feedback_form.creator_user_id as feedback_completer_user_id,\n        feedback_form.completed_at as feedback_completed_at,\n\n        feedback_form.instructions as feedback_form_instructions,\n        feedback_form.score_system_value,\n        feedback_form.form_title as feedback_form_title\n\n\n    from interview\n    left join interview_feedback \n        on interview.interview_id = interview_feedback.interview_id\n    left join feedback_form \n        on interview_feedback.feedback_form_id = feedback_form.feedback_form_id\n)\n\nselect *\nfrom join_w_feedback\n)"}], "relation_name": null, "column_name": null, "file_key_name": "models.int_lever__interview_feedback"}, "test.lever.unique_int_lever__opportunity_application_opportunity_id.766b390b67": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('int_lever__opportunity_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__opportunity_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "unique_int_lever__opportunity_application_opportunity_id"], "unique_id": "test.lever.unique_int_lever__opportunity_application_opportunity_id.766b390b67", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_int_lever__opportunity_application_opportunity_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "unique_int_lever__opportunity_application_opportunity_id", "alias": "unique_int_lever__opportunity_application_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__opportunity_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/unique_int_lever__opportunity_application_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.348609, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n),dbt_test__target as (\n\n  select opportunity_id as unique_field\n  from __dbt__cte__int_lever__opportunity_application\n  where opportunity_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__opportunity_application", "sql": " __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n)"}], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.int_lever__opportunity_application"}, "test.lever.not_null_int_lever__opportunity_application_opportunity_id.892f671317": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('int_lever__opportunity_application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__opportunity_application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "not_null_int_lever__opportunity_application_opportunity_id"], "unique_id": "test.lever.not_null_int_lever__opportunity_application_opportunity_id.892f671317", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_int_lever__opportunity_application_opportunity_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "not_null_int_lever__opportunity_application_opportunity_id", "alias": "not_null_int_lever__opportunity_application_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__opportunity_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/not_null_int_lever__opportunity_application_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.349398, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n)select opportunity_id\nfrom __dbt__cte__int_lever__opportunity_application\nwhere opportunity_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__opportunity_application", "sql": " __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n)"}], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.int_lever__opportunity_application"}, "test.lever.unique_int_lever__opportunity_contact_info_opportunity_id.d74cc60941": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('int_lever__opportunity_contact_info')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__opportunity_contact_info"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "unique_int_lever__opportunity_contact_info_opportunity_id"], "unique_id": "test.lever.unique_int_lever__opportunity_contact_info_opportunity_id.d74cc60941", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_int_lever__opportunity_contact_info_opportunity_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "unique_int_lever__opportunity_contact_info_opportunity_id", "alias": "unique_int_lever__opportunity_contact_info_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__opportunity_contact_info"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/unique_int_lever__opportunity_contact_info_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.3503082, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n),  __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n),  __dbt__cte__int_lever__opportunity_contact_info as (\nwith opportunity as (\n\n    -- this builds off the source opportunity table, incorporating application and internal user data. \n    select *\n    from __dbt__cte__int_lever__opportunity_users\n),\n\nopportunity_sources as (\n\n    select \n        opportunity_id,\n        \n    string_agg(source, ', ')\n\n as sources\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_source`\n\n    group by 1\n),\n\ncontact_info as (\n\n    select *\n    from __dbt__cte__int_lever__contact_info\n),\n\norder_resumes as (\n\n    select \n        *,\n        row_number() over(partition by opportunity_id order by created_at desc) as row_num\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume`\n),\n\nlatest_resume as (\n\n    select *\n    from order_resumes \n\n    where row_num = 1\n),\n\nfinal as (\n\n    select\n        opportunity.*,\n        opportunity_sources.sources,\n        latest_resume.file_download_url as resume_download_url,\n        contact_info.phones,\n        contact_info.emails,\n        contact_info.linkedin_link,\n        contact_info.github_link\n\n    from opportunity\n\n    left join opportunity_sources\n        on opportunity.opportunity_id = opportunity_sources.opportunity_id\n\n    left join latest_resume \n        on latest_resume.opportunity_id = opportunity.opportunity_id\n\n    left join contact_info\n        on contact_info.contact_id = opportunity.contact_id\n)\n\nselect *\nfrom final\n),dbt_test__target as (\n\n  select opportunity_id as unique_field\n  from __dbt__cte__int_lever__opportunity_contact_info\n  where opportunity_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__opportunity_application", "sql": " __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n)"}, {"id": "model.lever.int_lever__opportunity_users", "sql": " __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n)"}, {"id": "model.lever.int_lever__contact_info", "sql": " __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n)"}, {"id": "model.lever.int_lever__opportunity_contact_info", "sql": " __dbt__cte__int_lever__opportunity_contact_info as (\nwith opportunity as (\n\n    -- this builds off the source opportunity table, incorporating application and internal user data. \n    select *\n    from __dbt__cte__int_lever__opportunity_users\n),\n\nopportunity_sources as (\n\n    select \n        opportunity_id,\n        \n    string_agg(source, ', ')\n\n as sources\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_source`\n\n    group by 1\n),\n\ncontact_info as (\n\n    select *\n    from __dbt__cte__int_lever__contact_info\n),\n\norder_resumes as (\n\n    select \n        *,\n        row_number() over(partition by opportunity_id order by created_at desc) as row_num\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume`\n),\n\nlatest_resume as (\n\n    select *\n    from order_resumes \n\n    where row_num = 1\n),\n\nfinal as (\n\n    select\n        opportunity.*,\n        opportunity_sources.sources,\n        latest_resume.file_download_url as resume_download_url,\n        contact_info.phones,\n        contact_info.emails,\n        contact_info.linkedin_link,\n        contact_info.github_link\n\n    from opportunity\n\n    left join opportunity_sources\n        on opportunity.opportunity_id = opportunity_sources.opportunity_id\n\n    left join latest_resume \n        on latest_resume.opportunity_id = opportunity.opportunity_id\n\n    left join contact_info\n        on contact_info.contact_id = opportunity.contact_id\n)\n\nselect *\nfrom final\n)"}], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.int_lever__opportunity_contact_info"}, "test.lever.not_null_int_lever__opportunity_contact_info_opportunity_id.fd8afc3189": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('int_lever__opportunity_contact_info')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__opportunity_contact_info"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "not_null_int_lever__opportunity_contact_info_opportunity_id"], "unique_id": "test.lever.not_null_int_lever__opportunity_contact_info_opportunity_id.fd8afc3189", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_int_lever__opportunity_contact_info_opportunity_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "not_null_int_lever__opportunity_contact_info_opportunity_id", "alias": "not_null_int_lever__opportunity_contact_info_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__opportunity_contact_info"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/not_null_int_lever__opportunity_contact_info_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.35108, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n),  __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n),  __dbt__cte__int_lever__opportunity_contact_info as (\nwith opportunity as (\n\n    -- this builds off the source opportunity table, incorporating application and internal user data. \n    select *\n    from __dbt__cte__int_lever__opportunity_users\n),\n\nopportunity_sources as (\n\n    select \n        opportunity_id,\n        \n    string_agg(source, ', ')\n\n as sources\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_source`\n\n    group by 1\n),\n\ncontact_info as (\n\n    select *\n    from __dbt__cte__int_lever__contact_info\n),\n\norder_resumes as (\n\n    select \n        *,\n        row_number() over(partition by opportunity_id order by created_at desc) as row_num\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume`\n),\n\nlatest_resume as (\n\n    select *\n    from order_resumes \n\n    where row_num = 1\n),\n\nfinal as (\n\n    select\n        opportunity.*,\n        opportunity_sources.sources,\n        latest_resume.file_download_url as resume_download_url,\n        contact_info.phones,\n        contact_info.emails,\n        contact_info.linkedin_link,\n        contact_info.github_link\n\n    from opportunity\n\n    left join opportunity_sources\n        on opportunity.opportunity_id = opportunity_sources.opportunity_id\n\n    left join latest_resume \n        on latest_resume.opportunity_id = opportunity.opportunity_id\n\n    left join contact_info\n        on contact_info.contact_id = opportunity.contact_id\n)\n\nselect *\nfrom final\n)select opportunity_id\nfrom __dbt__cte__int_lever__opportunity_contact_info\nwhere opportunity_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__opportunity_application", "sql": " __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n)"}, {"id": "model.lever.int_lever__opportunity_users", "sql": " __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n)"}, {"id": "model.lever.int_lever__contact_info", "sql": " __dbt__cte__int_lever__contact_info as (\nwith contact_phones as (\n\n    select \n        contact_id,\n        \n    string_agg(phone_type || ': ' || phone_number, ', ')\n\n as phones\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n\n    group by 1\n),\n\ncontact_emails as (\n\n    select \n        contact_id,\n        \n    string_agg('<' || email || '>', ', ')\n\n as emails\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n\n    group by 1\n),\n\ncontact_links as (\n\n    select \n        contact_id,\n\n        -- ideally, people only have one of each type of these links. \n        -- taking the max as that will produce a more constant result than ordering via row_number() window\n        -- function ordering by _fivetran_synced\n\n        max(case when lower(link) like '%linkedin.com%' then link end) as linkedin_link,\n        max(case when lower(link) like '%github.com%' then link end) as github_link\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by 1\n),\n\nfinal as (\n\n    select \n        contact_emails.*,\n        contact_phones.phones,\n        contact_links.linkedin_link,\n        contact_links.github_link\n\n    from contact_emails \n    left join contact_phones \n        on contact_emails.contact_id = contact_phones.contact_id\n    left join contact_links \n        on contact_emails.contact_id = contact_links.contact_id\n)\n\nselect * from final\n)"}, {"id": "model.lever.int_lever__opportunity_contact_info", "sql": " __dbt__cte__int_lever__opportunity_contact_info as (\nwith opportunity as (\n\n    -- this builds off the source opportunity table, incorporating application and internal user data. \n    select *\n    from __dbt__cte__int_lever__opportunity_users\n),\n\nopportunity_sources as (\n\n    select \n        opportunity_id,\n        \n    string_agg(source, ', ')\n\n as sources\n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_source`\n\n    group by 1\n),\n\ncontact_info as (\n\n    select *\n    from __dbt__cte__int_lever__contact_info\n),\n\norder_resumes as (\n\n    select \n        *,\n        row_number() over(partition by opportunity_id order by created_at desc) as row_num\n    \n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume`\n),\n\nlatest_resume as (\n\n    select *\n    from order_resumes \n\n    where row_num = 1\n),\n\nfinal as (\n\n    select\n        opportunity.*,\n        opportunity_sources.sources,\n        latest_resume.file_download_url as resume_download_url,\n        contact_info.phones,\n        contact_info.emails,\n        contact_info.linkedin_link,\n        contact_info.github_link\n\n    from opportunity\n\n    left join opportunity_sources\n        on opportunity.opportunity_id = opportunity_sources.opportunity_id\n\n    left join latest_resume \n        on latest_resume.opportunity_id = opportunity.opportunity_id\n\n    left join contact_info\n        on contact_info.contact_id = opportunity.contact_id\n)\n\nselect *\nfrom final\n)"}], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.int_lever__opportunity_contact_info"}, "test.lever.unique_int_lever__opportunity_tags_opportunity_id.66df824288": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('int_lever__opportunity_tags')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__opportunity_tags"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "unique_int_lever__opportunity_tags_opportunity_id"], "unique_id": "test.lever.unique_int_lever__opportunity_tags_opportunity_id.66df824288", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_int_lever__opportunity_tags_opportunity_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "unique_int_lever__opportunity_tags_opportunity_id", "alias": "unique_int_lever__opportunity_tags_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__opportunity_tags"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/unique_int_lever__opportunity_tags_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.3518562, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_lever__opportunity_tags as (\nwith opportunity_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tag`\n),\n\nagg_tags as (\n\n    select\n        opportunity_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from opportunity_tag\n    group by 1\n)\n\nselect * from agg_tags\n),dbt_test__target as (\n\n  select opportunity_id as unique_field\n  from __dbt__cte__int_lever__opportunity_tags\n  where opportunity_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__opportunity_tags", "sql": " __dbt__cte__int_lever__opportunity_tags as (\nwith opportunity_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tag`\n),\n\nagg_tags as (\n\n    select\n        opportunity_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from opportunity_tag\n    group by 1\n)\n\nselect * from agg_tags\n)"}], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.int_lever__opportunity_tags"}, "test.lever.not_null_int_lever__opportunity_tags_opportunity_id.91b6cd9841": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('int_lever__opportunity_tags')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__opportunity_tags"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "not_null_int_lever__opportunity_tags_opportunity_id"], "unique_id": "test.lever.not_null_int_lever__opportunity_tags_opportunity_id.91b6cd9841", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_int_lever__opportunity_tags_opportunity_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "not_null_int_lever__opportunity_tags_opportunity_id", "alias": "not_null_int_lever__opportunity_tags_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__opportunity_tags"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/not_null_int_lever__opportunity_tags_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.352633, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_lever__opportunity_tags as (\nwith opportunity_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tag`\n),\n\nagg_tags as (\n\n    select\n        opportunity_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from opportunity_tag\n    group by 1\n)\n\nselect * from agg_tags\n)select opportunity_id\nfrom __dbt__cte__int_lever__opportunity_tags\nwhere opportunity_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__opportunity_tags", "sql": " __dbt__cte__int_lever__opportunity_tags as (\nwith opportunity_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tag`\n),\n\nagg_tags as (\n\n    select\n        opportunity_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from opportunity_tag\n    group by 1\n)\n\nselect * from agg_tags\n)"}], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.int_lever__opportunity_tags"}, "test.lever.unique_int_lever__opportunity_users_opportunity_id.d138ba15c2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('int_lever__opportunity_users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__opportunity_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "unique_int_lever__opportunity_users_opportunity_id"], "unique_id": "test.lever.unique_int_lever__opportunity_users_opportunity_id.d138ba15c2", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_int_lever__opportunity_users_opportunity_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "unique_int_lever__opportunity_users_opportunity_id", "alias": "unique_int_lever__opportunity_users_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__opportunity_users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/unique_int_lever__opportunity_users_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.35368, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n),dbt_test__target as (\n\n  select opportunity_id as unique_field\n  from __dbt__cte__int_lever__opportunity_users\n  where opportunity_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__opportunity_application", "sql": " __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n)"}, {"id": "model.lever.int_lever__opportunity_users", "sql": " __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n)"}], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.int_lever__opportunity_users"}, "test.lever.not_null_int_lever__opportunity_users_opportunity_id.2128831135": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('int_lever__opportunity_users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__opportunity_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "not_null_int_lever__opportunity_users_opportunity_id"], "unique_id": "test.lever.not_null_int_lever__opportunity_users_opportunity_id.2128831135", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_int_lever__opportunity_users_opportunity_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "not_null_int_lever__opportunity_users_opportunity_id", "alias": "not_null_int_lever__opportunity_users_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__opportunity_users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/not_null_int_lever__opportunity_users_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.3544478, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n)select opportunity_id\nfrom __dbt__cte__int_lever__opportunity_users\nwhere opportunity_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__opportunity_application", "sql": " __dbt__cte__int_lever__opportunity_application as (\nwith opportunity as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n),\n\napplication as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nfinal as (\n\n    select \n        opportunity.*,\n        application.application_id,\n        application.comments,\n        application.company, \n        application.posting_hiring_manager_user_id,\n        application.posting_id,\n        application.posting_owner_user_id,\n        application.referrer_user_id,\n        application.requisition_id,\n        application.type as application_type\n\n    from opportunity\n    left join application using(opportunity_id)\n)\n\nselect *\nfrom final\n)"}, {"id": "model.lever.int_lever__opportunity_users", "sql": " __dbt__cte__int_lever__opportunity_users as (\nwith lever_user as (\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nopportunity_application as (\n    \n    select *\n    from __dbt__cte__int_lever__opportunity_application\n),\n\n-- necessary users = opp owner, referrer, hiring manager\ngrab_user_names as (\n\n    select\n        opportunity_application.*,\n        opportunity_owner.full_name as opportunity_owner_name,\n        referrer.full_name as referrer_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from opportunity_application\n\n    left join lever_user as opportunity_owner\n        on opportunity_application.owner_user_id = opportunity_owner.user_id\n    left join lever_user as referrer\n        on opportunity_application.referrer_user_id = referrer.user_id \n    left join lever_user as hiring_manager\n        on opportunity_application.posting_hiring_manager_user_id = hiring_manager.user_id\n)\n\nselect * from grab_user_names\n)"}], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.int_lever__opportunity_users"}, "test.lever.unique_int_lever__posting_applications_posting_id.be588f9e4a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "posting_id", "model": "{{ get_where_subquery(ref('int_lever__posting_applications')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__posting_applications"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "unique_int_lever__posting_applications_posting_id"], "unique_id": "test.lever.unique_int_lever__posting_applications_posting_id.be588f9e4a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_int_lever__posting_applications_posting_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "unique_int_lever__posting_applications_posting_id", "alias": "unique_int_lever__posting_applications_posting_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__posting_applications"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/unique_int_lever__posting_applications_posting_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.355214, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_lever__posting_applications as (\nwith application as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nagg_applications as (\n\n    select \n        posting_id,\n        min(created_at) as first_app_sent_at,\n\n        -- these should be the only types of applications\n        sum(case when type = 'referral' then 1 else 0 end) as count_referred_applications,\n        sum(case when type = 'posting' or type = 'agency' then 1 else 0 end) as count_posting_applications,\n        sum(case when type = 'user' then 1 else 0 end) as count_manual_user_applications,\n\n        count(distinct opportunity_id) as count_opportunities,\n        count(distinct case when archived_at is null then opportunity_id end) as count_open_opportunities\n\n    from application\n\n    group by 1\n),\n\norder_hiring_managers as (\n\n    select \n        posting_id,\n        posting_hiring_manager_user_id,\n        row_number() over( partition by posting_id order by created_at desc) as row_num \n    from application\n),\n\nlast_hiring_manager as (\n\n    select *\n    from order_hiring_managers \n    where row_num = 1\n),\n\nfinal as (\n\n    select \n        agg_applications.*,\n        last_hiring_manager.posting_hiring_manager_user_id\n\n    from agg_applications\n    join last_hiring_manager using(posting_id)\n)\n\nselect * from final\n),dbt_test__target as (\n\n  select posting_id as unique_field\n  from __dbt__cte__int_lever__posting_applications\n  where posting_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__posting_applications", "sql": " __dbt__cte__int_lever__posting_applications as (\nwith application as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nagg_applications as (\n\n    select \n        posting_id,\n        min(created_at) as first_app_sent_at,\n\n        -- these should be the only types of applications\n        sum(case when type = 'referral' then 1 else 0 end) as count_referred_applications,\n        sum(case when type = 'posting' or type = 'agency' then 1 else 0 end) as count_posting_applications,\n        sum(case when type = 'user' then 1 else 0 end) as count_manual_user_applications,\n\n        count(distinct opportunity_id) as count_opportunities,\n        count(distinct case when archived_at is null then opportunity_id end) as count_open_opportunities\n\n    from application\n\n    group by 1\n),\n\norder_hiring_managers as (\n\n    select \n        posting_id,\n        posting_hiring_manager_user_id,\n        row_number() over( partition by posting_id order by created_at desc) as row_num \n    from application\n),\n\nlast_hiring_manager as (\n\n    select *\n    from order_hiring_managers \n    where row_num = 1\n),\n\nfinal as (\n\n    select \n        agg_applications.*,\n        last_hiring_manager.posting_hiring_manager_user_id\n\n    from agg_applications\n    join last_hiring_manager using(posting_id)\n)\n\nselect * from final\n)"}], "relation_name": null, "column_name": "posting_id", "file_key_name": "models.int_lever__posting_applications"}, "test.lever.not_null_int_lever__posting_applications_posting_id.c78c1b0c51": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "posting_id", "model": "{{ get_where_subquery(ref('int_lever__posting_applications')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__posting_applications"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "not_null_int_lever__posting_applications_posting_id"], "unique_id": "test.lever.not_null_int_lever__posting_applications_posting_id.c78c1b0c51", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_int_lever__posting_applications_posting_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "not_null_int_lever__posting_applications_posting_id", "alias": "not_null_int_lever__posting_applications_posting_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__posting_applications"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/not_null_int_lever__posting_applications_posting_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.355979, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_lever__posting_applications as (\nwith application as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nagg_applications as (\n\n    select \n        posting_id,\n        min(created_at) as first_app_sent_at,\n\n        -- these should be the only types of applications\n        sum(case when type = 'referral' then 1 else 0 end) as count_referred_applications,\n        sum(case when type = 'posting' or type = 'agency' then 1 else 0 end) as count_posting_applications,\n        sum(case when type = 'user' then 1 else 0 end) as count_manual_user_applications,\n\n        count(distinct opportunity_id) as count_opportunities,\n        count(distinct case when archived_at is null then opportunity_id end) as count_open_opportunities\n\n    from application\n\n    group by 1\n),\n\norder_hiring_managers as (\n\n    select \n        posting_id,\n        posting_hiring_manager_user_id,\n        row_number() over( partition by posting_id order by created_at desc) as row_num \n    from application\n),\n\nlast_hiring_manager as (\n\n    select *\n    from order_hiring_managers \n    where row_num = 1\n),\n\nfinal as (\n\n    select \n        agg_applications.*,\n        last_hiring_manager.posting_hiring_manager_user_id\n\n    from agg_applications\n    join last_hiring_manager using(posting_id)\n)\n\nselect * from final\n)select posting_id\nfrom __dbt__cte__int_lever__posting_applications\nwhere posting_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__posting_applications", "sql": " __dbt__cte__int_lever__posting_applications as (\nwith application as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n),\n\nagg_applications as (\n\n    select \n        posting_id,\n        min(created_at) as first_app_sent_at,\n\n        -- these should be the only types of applications\n        sum(case when type = 'referral' then 1 else 0 end) as count_referred_applications,\n        sum(case when type = 'posting' or type = 'agency' then 1 else 0 end) as count_posting_applications,\n        sum(case when type = 'user' then 1 else 0 end) as count_manual_user_applications,\n\n        count(distinct opportunity_id) as count_opportunities,\n        count(distinct case when archived_at is null then opportunity_id end) as count_open_opportunities\n\n    from application\n\n    group by 1\n),\n\norder_hiring_managers as (\n\n    select \n        posting_id,\n        posting_hiring_manager_user_id,\n        row_number() over( partition by posting_id order by created_at desc) as row_num \n    from application\n),\n\nlast_hiring_manager as (\n\n    select *\n    from order_hiring_managers \n    where row_num = 1\n),\n\nfinal as (\n\n    select \n        agg_applications.*,\n        last_hiring_manager.posting_hiring_manager_user_id\n\n    from agg_applications\n    join last_hiring_manager using(posting_id)\n)\n\nselect * from final\n)"}], "relation_name": null, "column_name": "posting_id", "file_key_name": "models.int_lever__posting_applications"}, "test.lever.unique_int_lever__posting_interviews_posting_id.a95c9d9e9e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "posting_id", "model": "{{ get_where_subquery(ref('int_lever__posting_interviews')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__posting_interviews"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "unique_int_lever__posting_interviews_posting_id"], "unique_id": "test.lever.unique_int_lever__posting_interviews_posting_id.a95c9d9e9e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_int_lever__posting_interviews_posting_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "unique_int_lever__posting_interviews_posting_id", "alias": "unique_int_lever__posting_interviews_posting_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__posting_interviews"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/unique_int_lever__posting_interviews_posting_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.356875, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_lever__posting_interviews as (\nwith posting_interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_interview`\n\n),\n\ninterview as (\n\n    select \n        interview_id,\n        opportunity_id \n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\nposting_interview_metrics as (\n    \n    select\n        posting_interview.posting_id,\n        count(distinct posting_interview.interview_id) as count_interviews,\n        count(distinct interview.opportunity_id) as count_interviewees\n\n    from posting_interview \n    join interview using(interview_id)\n    group by 1\n\n)\n\nselect * from posting_interview_metrics\n),dbt_test__target as (\n\n  select posting_id as unique_field\n  from __dbt__cte__int_lever__posting_interviews\n  where posting_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__posting_interviews", "sql": " __dbt__cte__int_lever__posting_interviews as (\nwith posting_interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_interview`\n\n),\n\ninterview as (\n\n    select \n        interview_id,\n        opportunity_id \n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\nposting_interview_metrics as (\n    \n    select\n        posting_interview.posting_id,\n        count(distinct posting_interview.interview_id) as count_interviews,\n        count(distinct interview.opportunity_id) as count_interviewees\n\n    from posting_interview \n    join interview using(interview_id)\n    group by 1\n\n)\n\nselect * from posting_interview_metrics\n)"}], "relation_name": null, "column_name": "posting_id", "file_key_name": "models.int_lever__posting_interviews"}, "test.lever.not_null_int_lever__posting_interviews_posting_id.a9c419e7c1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "posting_id", "model": "{{ get_where_subquery(ref('int_lever__posting_interviews')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__posting_interviews"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "not_null_int_lever__posting_interviews_posting_id"], "unique_id": "test.lever.not_null_int_lever__posting_interviews_posting_id.a9c419e7c1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_int_lever__posting_interviews_posting_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "not_null_int_lever__posting_interviews_posting_id", "alias": "not_null_int_lever__posting_interviews_posting_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__posting_interviews"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/not_null_int_lever__posting_interviews_posting_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.357635, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_lever__posting_interviews as (\nwith posting_interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_interview`\n\n),\n\ninterview as (\n\n    select \n        interview_id,\n        opportunity_id \n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\nposting_interview_metrics as (\n    \n    select\n        posting_interview.posting_id,\n        count(distinct posting_interview.interview_id) as count_interviews,\n        count(distinct interview.opportunity_id) as count_interviewees\n\n    from posting_interview \n    join interview using(interview_id)\n    group by 1\n\n)\n\nselect * from posting_interview_metrics\n)select posting_id\nfrom __dbt__cte__int_lever__posting_interviews\nwhere posting_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__posting_interviews", "sql": " __dbt__cte__int_lever__posting_interviews as (\nwith posting_interview as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_interview`\n\n),\n\ninterview as (\n\n    select \n        interview_id,\n        opportunity_id \n\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n\n),\n\nposting_interview_metrics as (\n    \n    select\n        posting_interview.posting_id,\n        count(distinct posting_interview.interview_id) as count_interviews,\n        count(distinct interview.opportunity_id) as count_interviewees\n\n    from posting_interview \n    join interview using(interview_id)\n    group by 1\n\n)\n\nselect * from posting_interview_metrics\n)"}], "relation_name": null, "column_name": "posting_id", "file_key_name": "models.int_lever__posting_interviews"}, "test.lever.unique_int_lever__posting_tags_posting_id.d901f1612a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "posting_id", "model": "{{ get_where_subquery(ref('int_lever__posting_tags')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__posting_tags"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "unique_int_lever__posting_tags_posting_id"], "unique_id": "test.lever.unique_int_lever__posting_tags_posting_id.d901f1612a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_int_lever__posting_tags_posting_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "unique_int_lever__posting_tags_posting_id", "alias": "unique_int_lever__posting_tags_posting_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__posting_tags"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/unique_int_lever__posting_tags_posting_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.358399, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_lever__posting_tags as (\n\n\nwith posting_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tag`\n),\n\nagg_tags as (\n\n    select\n        posting_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from posting_tag\n    group by 1\n)\n\nselect * from agg_tags\n),dbt_test__target as (\n\n  select posting_id as unique_field\n  from __dbt__cte__int_lever__posting_tags\n  where posting_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__posting_tags", "sql": " __dbt__cte__int_lever__posting_tags as (\n\n\nwith posting_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tag`\n),\n\nagg_tags as (\n\n    select\n        posting_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from posting_tag\n    group by 1\n)\n\nselect * from agg_tags\n)"}], "relation_name": null, "column_name": "posting_id", "file_key_name": "models.int_lever__posting_tags"}, "test.lever.not_null_int_lever__posting_tags_posting_id.c5af03291e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "posting_id", "model": "{{ get_where_subquery(ref('int_lever__posting_tags')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__posting_tags"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "not_null_int_lever__posting_tags_posting_id"], "unique_id": "test.lever.not_null_int_lever__posting_tags_posting_id.c5af03291e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_int_lever__posting_tags_posting_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "not_null_int_lever__posting_tags_posting_id", "alias": "not_null_int_lever__posting_tags_posting_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__posting_tags"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/not_null_int_lever__posting_tags_posting_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.35916, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_lever__posting_tags as (\n\n\nwith posting_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tag`\n),\n\nagg_tags as (\n\n    select\n        posting_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from posting_tag\n    group by 1\n)\n\nselect * from agg_tags\n)select posting_id\nfrom __dbt__cte__int_lever__posting_tags\nwhere posting_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__posting_tags", "sql": " __dbt__cte__int_lever__posting_tags as (\n\n\nwith posting_tag as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tag`\n),\n\nagg_tags as (\n\n    select\n        posting_id,\n        \n    string_agg(tag_name, ', ')\n\n as tags \n\n    from posting_tag\n    group by 1\n)\n\nselect * from agg_tags\n)"}], "relation_name": null, "column_name": "posting_id", "file_key_name": "models.int_lever__posting_tags"}, "test.lever.unique_int_lever__requisition_users_requisition_id.366ce4c197": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "requisition_id", "model": "{{ get_where_subquery(ref('int_lever__requisition_users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__requisition_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "unique_int_lever__requisition_users_requisition_id"], "unique_id": "test.lever.unique_int_lever__requisition_users_requisition_id.366ce4c197", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "unique_int_lever__requisition_users_requisition_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "unique_int_lever__requisition_users_requisition_id", "alias": "unique_int_lever__requisition_users_requisition_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__requisition_users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/unique_int_lever__requisition_users_requisition_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.360061, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_lever__requisition_users as (\n\n\nwith lever_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nrequisition as (\n    \n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition`\n),\n\n-- necessary users = req owner, creator, hiring manager\ngrab_user_names as (\n\n    select\n        requisition.*,\n        creator.full_name as creator_name,\n        requisition_owner.full_name as requisition_owner_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from requisition\n\n    left join lever_user as creator\n        on requisition.creator_user_id = creator.user_id\n\n    left join lever_user as hiring_manager\n        on requisition.hiring_manager_user_id = hiring_manager.user_id\n\n    \n    left join lever_user as requisition_owner\n        on requisition.owner_user_id = requisition_owner.user_id\n\n)\n\nselect * from grab_user_names\n),dbt_test__target as (\n\n  select requisition_id as unique_field\n  from __dbt__cte__int_lever__requisition_users\n  where requisition_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__requisition_users", "sql": " __dbt__cte__int_lever__requisition_users as (\n\n\nwith lever_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nrequisition as (\n    \n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition`\n),\n\n-- necessary users = req owner, creator, hiring manager\ngrab_user_names as (\n\n    select\n        requisition.*,\n        creator.full_name as creator_name,\n        requisition_owner.full_name as requisition_owner_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from requisition\n\n    left join lever_user as creator\n        on requisition.creator_user_id = creator.user_id\n\n    left join lever_user as hiring_manager\n        on requisition.hiring_manager_user_id = hiring_manager.user_id\n\n    \n    left join lever_user as requisition_owner\n        on requisition.owner_user_id = requisition_owner.user_id\n\n)\n\nselect * from grab_user_names\n)"}], "relation_name": null, "column_name": "requisition_id", "file_key_name": "models.int_lever__requisition_users"}, "test.lever.not_null_int_lever__requisition_users_requisition_id.94e57e2216": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "requisition_id", "model": "{{ get_where_subquery(ref('int_lever__requisition_users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever.int_lever__requisition_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever", "intermediate", "not_null_int_lever__requisition_users_requisition_id"], "unique_id": "test.lever.not_null_int_lever__requisition_users_requisition_id.94e57e2216", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever", "path": "not_null_int_lever__requisition_users_requisition_id.sql", "original_file_path": "models/intermediate/int_lever.yml", "name": "not_null_int_lever__requisition_users_requisition_id", "alias": "not_null_int_lever__requisition_users_requisition_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_lever__requisition_users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever/models/intermediate/int_lever.yml/not_null_int_lever__requisition_users_requisition_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.360821, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_lever__requisition_users as (\n\n\nwith lever_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nrequisition as (\n    \n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition`\n),\n\n-- necessary users = req owner, creator, hiring manager\ngrab_user_names as (\n\n    select\n        requisition.*,\n        creator.full_name as creator_name,\n        requisition_owner.full_name as requisition_owner_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from requisition\n\n    left join lever_user as creator\n        on requisition.creator_user_id = creator.user_id\n\n    left join lever_user as hiring_manager\n        on requisition.hiring_manager_user_id = hiring_manager.user_id\n\n    \n    left join lever_user as requisition_owner\n        on requisition.owner_user_id = requisition_owner.user_id\n\n)\n\nselect * from grab_user_names\n)select requisition_id\nfrom __dbt__cte__int_lever__requisition_users\nwhere requisition_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.lever.int_lever__requisition_users", "sql": " __dbt__cte__int_lever__requisition_users as (\n\n\nwith lever_user as (\n\n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n),\n\nrequisition as (\n    \n    select *\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition`\n),\n\n-- necessary users = req owner, creator, hiring manager\ngrab_user_names as (\n\n    select\n        requisition.*,\n        creator.full_name as creator_name,\n        requisition_owner.full_name as requisition_owner_name,\n        hiring_manager.full_name as hiring_manager_name\n\n    from requisition\n\n    left join lever_user as creator\n        on requisition.creator_user_id = creator.user_id\n\n    left join lever_user as hiring_manager\n        on requisition.hiring_manager_user_id = hiring_manager.user_id\n\n    \n    left join lever_user as requisition_owner\n        on requisition.owner_user_id = requisition_owner.user_id\n\n)\n\nselect * from grab_user_names\n)"}], "relation_name": null, "column_name": "requisition_id", "file_key_name": "models.int_lever__requisition_users"}, "test.lever_source.unique_stg_lever__opportunity_opportunity_id.895b120dc5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('stg_lever__opportunity')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__opportunity"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "unique_stg_lever__opportunity_opportunity_id"], "unique_id": "test.lever_source.unique_stg_lever__opportunity_opportunity_id.895b120dc5", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "unique_stg_lever__opportunity_opportunity_id.sql", "original_file_path": "models/stg_lever.yml", "name": "unique_stg_lever__opportunity_opportunity_id", "alias": "unique_stg_lever__opportunity_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__opportunity"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/unique_stg_lever__opportunity_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.428948, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select opportunity_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\n  where opportunity_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.stg_lever__opportunity"}, "test.lever_source.not_null_stg_lever__opportunity_opportunity_id.9c5eceacb7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "opportunity_id", "model": "{{ get_where_subquery(ref('stg_lever__opportunity')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__opportunity"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "not_null_stg_lever__opportunity_opportunity_id"], "unique_id": "test.lever_source.not_null_stg_lever__opportunity_opportunity_id.9c5eceacb7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "not_null_stg_lever__opportunity_opportunity_id.sql", "original_file_path": "models/stg_lever.yml", "name": "not_null_stg_lever__opportunity_opportunity_id", "alias": "not_null_stg_lever__opportunity_opportunity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__opportunity"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/not_null_stg_lever__opportunity_opportunity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.429889, "compiled_code": "\n    \n    \n\n\n\nselect opportunity_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity`\nwhere opportunity_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "opportunity_id", "file_key_name": "models.stg_lever__opportunity"}, "test.lever_source.unique_stg_lever__posting_posting_id.1eebf1e1c9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "posting_id", "model": "{{ get_where_subquery(ref('stg_lever__posting')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__posting"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "unique_stg_lever__posting_posting_id"], "unique_id": "test.lever_source.unique_stg_lever__posting_posting_id.1eebf1e1c9", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "unique_stg_lever__posting_posting_id.sql", "original_file_path": "models/stg_lever.yml", "name": "unique_stg_lever__posting_posting_id", "alias": "unique_stg_lever__posting_posting_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__posting"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/unique_stg_lever__posting_posting_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.430677, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select posting_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting`\n  where posting_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "posting_id", "file_key_name": "models.stg_lever__posting"}, "test.lever_source.not_null_stg_lever__posting_posting_id.628ea50829": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "posting_id", "model": "{{ get_where_subquery(ref('stg_lever__posting')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__posting"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "not_null_stg_lever__posting_posting_id"], "unique_id": "test.lever_source.not_null_stg_lever__posting_posting_id.628ea50829", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "not_null_stg_lever__posting_posting_id.sql", "original_file_path": "models/stg_lever.yml", "name": "not_null_stg_lever__posting_posting_id", "alias": "not_null_stg_lever__posting_posting_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__posting"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/not_null_stg_lever__posting_posting_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.4314592, "compiled_code": "\n    \n    \n\n\n\nselect posting_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting`\nwhere posting_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "posting_id", "file_key_name": "models.stg_lever__posting"}, "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__posting_tag_posting_id__tag_name.aa48251b13": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["posting_id", "tag_name"], "model": "{{ get_where_subquery(ref('stg_lever__posting_tag')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__posting_tag"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_63ad3b939e7d684059077d8885dbacd9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "dbt_utils_unique_combination_of_columns_stg_lever__posting_tag_posting_id__tag_name"], "unique_id": "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__posting_tag_posting_id__tag_name.aa48251b13", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_63ad3b939e7d684059077d8885dbacd9\") }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "dbt_utils_unique_combination_o_63ad3b939e7d684059077d8885dbacd9.sql", "original_file_path": "models/stg_lever.yml", "name": "dbt_utils_unique_combination_of_columns_stg_lever__posting_tag_posting_id__tag_name", "alias": "dbt_utils_unique_combination_o_63ad3b939e7d684059077d8885dbacd9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__posting_tag"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/dbt_utils_unique_combination_o_63ad3b939e7d684059077d8885dbacd9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_63ad3b939e7d684059077d8885dbacd9"}, "created_at": 1666651815.432256, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        posting_id, tag_name\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__posting_tag`\n    group by posting_id, tag_name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_lever__posting_tag"}, "test.lever_source.unique_stg_lever__user_user_id.7fc22fb59e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_lever__user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "unique_stg_lever__user_user_id"], "unique_id": "test.lever_source.unique_stg_lever__user_user_id.7fc22fb59e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "unique_stg_lever__user_user_id.sql", "original_file_path": "models/stg_lever.yml", "name": "unique_stg_lever__user_user_id", "alias": "unique_stg_lever__user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/unique_stg_lever__user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.434659, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select user_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\n  where user_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.stg_lever__user"}, "test.lever_source.not_null_stg_lever__user_user_id.22ec43a8b0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_lever__user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "not_null_stg_lever__user_user_id"], "unique_id": "test.lever_source.not_null_stg_lever__user_user_id.22ec43a8b0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "not_null_stg_lever__user_user_id.sql", "original_file_path": "models/stg_lever.yml", "name": "not_null_stg_lever__user_user_id", "alias": "not_null_stg_lever__user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/not_null_stg_lever__user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.435452, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`stg_lever__user`\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.stg_lever__user"}, "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_stage_history_opportunity_id__updated_at.4032013edb": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["opportunity_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_lever__opportunity_stage_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__opportunity_stage_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7913ada7155f2bd554d35b5c7790916c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "dbt_utils_unique_combination_of_columns_stg_lever__opportunity_stage_history_opportunity_id__updated_at"], "unique_id": "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_stage_history_opportunity_id__updated_at.4032013edb", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7913ada7155f2bd554d35b5c7790916c\") }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "dbt_utils_unique_combination_o_7913ada7155f2bd554d35b5c7790916c.sql", "original_file_path": "models/stg_lever.yml", "name": "dbt_utils_unique_combination_of_columns_stg_lever__opportunity_stage_history_opportunity_id__updated_at", "alias": "dbt_utils_unique_combination_o_7913ada7155f2bd554d35b5c7790916c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__opportunity_stage_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/dbt_utils_unique_combination_o_7913ada7155f2bd554d35b5c7790916c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7913ada7155f2bd554d35b5c7790916c"}, "created_at": 1666651815.436505, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        opportunity_id, updated_at\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_stage_history`\n    group by opportunity_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_lever__opportunity_stage_history"}, "test.lever_source.unique_stg_lever__stage_stage_id.0709db19c3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stage_id", "model": "{{ get_where_subquery(ref('stg_lever__stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "unique_stg_lever__stage_stage_id"], "unique_id": "test.lever_source.unique_stg_lever__stage_stage_id.0709db19c3", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "unique_stg_lever__stage_stage_id.sql", "original_file_path": "models/stg_lever.yml", "name": "unique_stg_lever__stage_stage_id", "alias": "unique_stg_lever__stage_stage_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/unique_stg_lever__stage_stage_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.438729, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stage_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__stage`\n  where stage_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stage_id", "file_key_name": "models.stg_lever__stage"}, "test.lever_source.not_null_stg_lever__stage_stage_id.438d91b1a2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stage_id", "model": "{{ get_where_subquery(ref('stg_lever__stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "not_null_stg_lever__stage_stage_id"], "unique_id": "test.lever_source.not_null_stg_lever__stage_stage_id.438d91b1a2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "not_null_stg_lever__stage_stage_id.sql", "original_file_path": "models/stg_lever.yml", "name": "not_null_stg_lever__stage_stage_id", "alias": "not_null_stg_lever__stage_stage_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/not_null_stg_lever__stage_stage_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.4396238, "compiled_code": "\n    \n    \n\n\n\nselect stage_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`stg_lever__stage`\nwhere stage_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stage_id", "file_key_name": "models.stg_lever__stage"}, "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_source_opportunity_id__source.24e3de3dec": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["opportunity_id", "source"], "model": "{{ get_where_subquery(ref('stg_lever__opportunity_source')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__opportunity_source"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2f96d06b2626f41577d552be0b64538b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "dbt_utils_unique_combination_of_columns_stg_lever__opportunity_source_opportunity_id__source"], "unique_id": "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_source_opportunity_id__source.24e3de3dec", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2f96d06b2626f41577d552be0b64538b\") }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "dbt_utils_unique_combination_o_2f96d06b2626f41577d552be0b64538b.sql", "original_file_path": "models/stg_lever.yml", "name": "dbt_utils_unique_combination_of_columns_stg_lever__opportunity_source_opportunity_id__source", "alias": "dbt_utils_unique_combination_o_2f96d06b2626f41577d552be0b64538b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__opportunity_source"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/dbt_utils_unique_combination_o_2f96d06b2626f41577d552be0b64538b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2f96d06b2626f41577d552be0b64538b"}, "created_at": 1666651815.4404092, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        opportunity_id, source\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_source`\n    group by opportunity_id, source\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_lever__opportunity_source"}, "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_tag_opportunity_id__tag_name.2b8dcb8c4c": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["opportunity_id", "tag_name"], "model": "{{ get_where_subquery(ref('stg_lever__opportunity_tag')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__opportunity_tag"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e0bc2158bcda4046e822489838a89f4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "dbt_utils_unique_combination_of_columns_stg_lever__opportunity_tag_opportunity_id__tag_name"], "unique_id": "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_tag_opportunity_id__tag_name.2b8dcb8c4c", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e0bc2158bcda4046e822489838a89f4b\") }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "dbt_utils_unique_combination_o_e0bc2158bcda4046e822489838a89f4b.sql", "original_file_path": "models/stg_lever.yml", "name": "dbt_utils_unique_combination_of_columns_stg_lever__opportunity_tag_opportunity_id__tag_name", "alias": "dbt_utils_unique_combination_o_e0bc2158bcda4046e822489838a89f4b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__opportunity_tag"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/dbt_utils_unique_combination_o_e0bc2158bcda4046e822489838a89f4b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e0bc2158bcda4046e822489838a89f4b"}, "created_at": 1666651815.442733, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        opportunity_id, tag_name\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__opportunity_tag`\n    group by opportunity_id, tag_name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_lever__opportunity_tag"}, "test.lever_source.unique_stg_lever__application_application_id.6b937cf15c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "application_id", "model": "{{ get_where_subquery(ref('stg_lever__application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "unique_stg_lever__application_application_id"], "unique_id": "test.lever_source.unique_stg_lever__application_application_id.6b937cf15c", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "unique_stg_lever__application_application_id.sql", "original_file_path": "models/stg_lever.yml", "name": "unique_stg_lever__application_application_id", "alias": "unique_stg_lever__application_application_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/unique_stg_lever__application_application_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.4450402, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select application_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\n  where application_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "application_id", "file_key_name": "models.stg_lever__application"}, "test.lever_source.not_null_stg_lever__application_application_id.ea2068d8da": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "application_id", "model": "{{ get_where_subquery(ref('stg_lever__application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "not_null_stg_lever__application_application_id"], "unique_id": "test.lever_source.not_null_stg_lever__application_application_id.ea2068d8da", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "not_null_stg_lever__application_application_id.sql", "original_file_path": "models/stg_lever.yml", "name": "not_null_stg_lever__application_application_id", "alias": "not_null_stg_lever__application_application_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/not_null_stg_lever__application_application_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.445827, "compiled_code": "\n    \n    \n\n\n\nselect application_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`stg_lever__application`\nwhere application_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "application_id", "file_key_name": "models.stg_lever__application"}, "test.lever_source.unique_stg_lever__offer_offer_id.d2fc15a1f1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "offer_id", "model": "{{ get_where_subquery(ref('stg_lever__offer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__offer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "unique_stg_lever__offer_offer_id"], "unique_id": "test.lever_source.unique_stg_lever__offer_offer_id.d2fc15a1f1", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "unique_stg_lever__offer_offer_id.sql", "original_file_path": "models/stg_lever.yml", "name": "unique_stg_lever__offer_offer_id", "alias": "unique_stg_lever__offer_offer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__offer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/unique_stg_lever__offer_offer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.446603, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select offer_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__offer`\n  where offer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "offer_id", "file_key_name": "models.stg_lever__offer"}, "test.lever_source.not_null_stg_lever__offer_offer_id.dc41920c6a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "offer_id", "model": "{{ get_where_subquery(ref('stg_lever__offer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__offer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "not_null_stg_lever__offer_offer_id"], "unique_id": "test.lever_source.not_null_stg_lever__offer_offer_id.dc41920c6a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "not_null_stg_lever__offer_offer_id.sql", "original_file_path": "models/stg_lever.yml", "name": "not_null_stg_lever__offer_offer_id", "alias": "not_null_stg_lever__offer_offer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__offer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/not_null_stg_lever__offer_offer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.4476008, "compiled_code": "\n    \n    \n\n\n\nselect offer_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`stg_lever__offer`\nwhere offer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "offer_id", "file_key_name": "models.stg_lever__offer"}, "test.lever_source.unique_stg_lever__archive_reason_archive_reason_id.4417ccfc92": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "archive_reason_id", "model": "{{ get_where_subquery(ref('stg_lever__archive_reason')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__archive_reason"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "unique_stg_lever__archive_reason_archive_reason_id"], "unique_id": "test.lever_source.unique_stg_lever__archive_reason_archive_reason_id.4417ccfc92", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "unique_stg_lever__archive_reason_archive_reason_id.sql", "original_file_path": "models/stg_lever.yml", "name": "unique_stg_lever__archive_reason_archive_reason_id", "alias": "unique_stg_lever__archive_reason_archive_reason_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__archive_reason"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/unique_stg_lever__archive_reason_archive_reason_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.4483762, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select archive_reason_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__archive_reason`\n  where archive_reason_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "archive_reason_id", "file_key_name": "models.stg_lever__archive_reason"}, "test.lever_source.not_null_stg_lever__archive_reason_archive_reason_id.cc63399b59": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "archive_reason_id", "model": "{{ get_where_subquery(ref('stg_lever__archive_reason')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__archive_reason"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "not_null_stg_lever__archive_reason_archive_reason_id"], "unique_id": "test.lever_source.not_null_stg_lever__archive_reason_archive_reason_id.cc63399b59", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "not_null_stg_lever__archive_reason_archive_reason_id.sql", "original_file_path": "models/stg_lever.yml", "name": "not_null_stg_lever__archive_reason_archive_reason_id", "alias": "not_null_stg_lever__archive_reason_archive_reason_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__archive_reason"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/not_null_stg_lever__archive_reason_archive_reason_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.449147, "compiled_code": "\n    \n    \n\n\n\nselect archive_reason_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`stg_lever__archive_reason`\nwhere archive_reason_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "archive_reason_id", "file_key_name": "models.stg_lever__archive_reason"}, "test.lever_source.unique_stg_lever__interview_interview_id.b161915552": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "interview_id", "model": "{{ get_where_subquery(ref('stg_lever__interview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__interview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "unique_stg_lever__interview_interview_id"], "unique_id": "test.lever_source.unique_stg_lever__interview_interview_id.b161915552", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "unique_stg_lever__interview_interview_id.sql", "original_file_path": "models/stg_lever.yml", "name": "unique_stg_lever__interview_interview_id", "alias": "unique_stg_lever__interview_interview_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__interview"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/unique_stg_lever__interview_interview_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.44991, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select interview_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\n  where interview_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "interview_id", "file_key_name": "models.stg_lever__interview"}, "test.lever_source.not_null_stg_lever__interview_interview_id.bee4bada2d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "interview_id", "model": "{{ get_where_subquery(ref('stg_lever__interview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__interview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "not_null_stg_lever__interview_interview_id"], "unique_id": "test.lever_source.not_null_stg_lever__interview_interview_id.bee4bada2d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "not_null_stg_lever__interview_interview_id.sql", "original_file_path": "models/stg_lever.yml", "name": "not_null_stg_lever__interview_interview_id", "alias": "not_null_stg_lever__interview_interview_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__interview"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/not_null_stg_lever__interview_interview_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.4508018, "compiled_code": "\n    \n    \n\n\n\nselect interview_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview`\nwhere interview_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "interview_id", "file_key_name": "models.stg_lever__interview"}, "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__interview_feedback_feedback_form_id__interview_id.4bfabdf8bb": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["feedback_form_id", "interview_id"], "model": "{{ get_where_subquery(ref('stg_lever__interview_feedback')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__interview_feedback"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_342c64d796860a4aa2d93a59ad9f2017", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "dbt_utils_unique_combination_of_columns_stg_lever__interview_feedback_feedback_form_id__interview_id"], "unique_id": "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__interview_feedback_feedback_form_id__interview_id.4bfabdf8bb", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_342c64d796860a4aa2d93a59ad9f2017\") }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "dbt_utils_unique_combination_o_342c64d796860a4aa2d93a59ad9f2017.sql", "original_file_path": "models/stg_lever.yml", "name": "dbt_utils_unique_combination_of_columns_stg_lever__interview_feedback_feedback_form_id__interview_id", "alias": "dbt_utils_unique_combination_o_342c64d796860a4aa2d93a59ad9f2017", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__interview_feedback"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/dbt_utils_unique_combination_o_342c64d796860a4aa2d93a59ad9f2017.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_342c64d796860a4aa2d93a59ad9f2017"}, "created_at": 1666651815.4515798, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        feedback_form_id, interview_id\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__interview_feedback`\n    group by feedback_form_id, interview_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_lever__interview_feedback"}, "test.lever_source.unique_stg_lever__feedback_form_feedback_form_id.57e3176d3a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "feedback_form_id", "model": "{{ get_where_subquery(ref('stg_lever__feedback_form')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__feedback_form"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "unique_stg_lever__feedback_form_feedback_form_id"], "unique_id": "test.lever_source.unique_stg_lever__feedback_form_feedback_form_id.57e3176d3a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "unique_stg_lever__feedback_form_feedback_form_id.sql", "original_file_path": "models/stg_lever.yml", "name": "unique_stg_lever__feedback_form_feedback_form_id", "alias": "unique_stg_lever__feedback_form_feedback_form_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__feedback_form"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/unique_stg_lever__feedback_form_feedback_form_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.453908, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select feedback_form_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form`\n  where feedback_form_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "feedback_form_id", "file_key_name": "models.stg_lever__feedback_form"}, "test.lever_source.not_null_stg_lever__feedback_form_feedback_form_id.98f8e699d2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "feedback_form_id", "model": "{{ get_where_subquery(ref('stg_lever__feedback_form')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__feedback_form"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "not_null_stg_lever__feedback_form_feedback_form_id"], "unique_id": "test.lever_source.not_null_stg_lever__feedback_form_feedback_form_id.98f8e699d2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "not_null_stg_lever__feedback_form_feedback_form_id.sql", "original_file_path": "models/stg_lever.yml", "name": "not_null_stg_lever__feedback_form_feedback_form_id", "alias": "not_null_stg_lever__feedback_form_feedback_form_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__feedback_form"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/not_null_stg_lever__feedback_form_feedback_form_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.454689, "compiled_code": "\n    \n    \n\n\n\nselect feedback_form_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form`\nwhere feedback_form_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "feedback_form_id", "file_key_name": "models.stg_lever__feedback_form"}, "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__feedback_form_field_feedback_form_id__field_index__value_index.4016ba4345": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["feedback_form_id", "field_index", "value_index"], "model": "{{ get_where_subquery(ref('stg_lever__feedback_form_field')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__feedback_form_field"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bdacadd7914dfc85135ce3c0fd127001", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "dbt_utils_unique_combination_of_columns_stg_lever__feedback_form_field_feedback_form_id__field_index__value_index"], "unique_id": "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__feedback_form_field_feedback_form_id__field_index__value_index.4016ba4345", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bdacadd7914dfc85135ce3c0fd127001\") }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "dbt_utils_unique_combination_o_bdacadd7914dfc85135ce3c0fd127001.sql", "original_file_path": "models/stg_lever.yml", "name": "dbt_utils_unique_combination_of_columns_stg_lever__feedback_form_field_feedback_form_id__field_index__value_index", "alias": "dbt_utils_unique_combination_o_bdacadd7914dfc85135ce3c0fd127001", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__feedback_form_field"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/dbt_utils_unique_combination_o_bdacadd7914dfc85135ce3c0fd127001.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bdacadd7914dfc85135ce3c0fd127001"}, "created_at": 1666651815.455486, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        feedback_form_id, field_index, value_index\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__feedback_form_field`\n    group by feedback_form_id, field_index, value_index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_lever__feedback_form_field"}, "test.lever_source.unique_stg_lever__requisition_requisition_id.be5b52d2ee": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "requisition_id", "model": "{{ get_where_subquery(ref('stg_lever__requisition')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__requisition"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "unique_stg_lever__requisition_requisition_id"], "unique_id": "test.lever_source.unique_stg_lever__requisition_requisition_id.be5b52d2ee", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "unique_stg_lever__requisition_requisition_id.sql", "original_file_path": "models/stg_lever.yml", "name": "unique_stg_lever__requisition_requisition_id", "alias": "unique_stg_lever__requisition_requisition_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__requisition"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/unique_stg_lever__requisition_requisition_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.4579751, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select requisition_id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition`\n  where requisition_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "requisition_id", "file_key_name": "models.stg_lever__requisition"}, "test.lever_source.not_null_stg_lever__requisition_requisition_id.798ee475ff": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "requisition_id", "model": "{{ get_where_subquery(ref('stg_lever__requisition')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__requisition"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "not_null_stg_lever__requisition_requisition_id"], "unique_id": "test.lever_source.not_null_stg_lever__requisition_requisition_id.798ee475ff", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "not_null_stg_lever__requisition_requisition_id.sql", "original_file_path": "models/stg_lever.yml", "name": "not_null_stg_lever__requisition_requisition_id", "alias": "not_null_stg_lever__requisition_requisition_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__requisition"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/not_null_stg_lever__requisition_requisition_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.4587588, "compiled_code": "\n    \n    \n\n\n\nselect requisition_id\nfrom `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition`\nwhere requisition_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "requisition_id", "file_key_name": "models.stg_lever__requisition"}, "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__requisition_posting_posting_id__requisition_id.a9d6f4fdda": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["posting_id", "requisition_id"], "model": "{{ get_where_subquery(ref('stg_lever__requisition_posting')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__requisition_posting"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ffc86299a80216f50631cd421b6d2816", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "dbt_utils_unique_combination_of_columns_stg_lever__requisition_posting_posting_id__requisition_id"], "unique_id": "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__requisition_posting_posting_id__requisition_id.a9d6f4fdda", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ffc86299a80216f50631cd421b6d2816\") }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "dbt_utils_unique_combination_o_ffc86299a80216f50631cd421b6d2816.sql", "original_file_path": "models/stg_lever.yml", "name": "dbt_utils_unique_combination_of_columns_stg_lever__requisition_posting_posting_id__requisition_id", "alias": "dbt_utils_unique_combination_o_ffc86299a80216f50631cd421b6d2816", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__requisition_posting"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/dbt_utils_unique_combination_o_ffc86299a80216f50631cd421b6d2816.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ffc86299a80216f50631cd421b6d2816"}, "created_at": 1666651815.4596689, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        posting_id, requisition_id\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_posting`\n    group by posting_id, requisition_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_lever__requisition_posting"}, "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_email_contact_id__email.6038c64dc6": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["contact_id", "email"], "model": "{{ get_where_subquery(ref('stg_lever__contact_email')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__contact_email"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8c93206482de2a8695c1360824617185", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "dbt_utils_unique_combination_of_columns_stg_lever__contact_email_contact_id__email"], "unique_id": "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_email_contact_id__email.6038c64dc6", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8c93206482de2a8695c1360824617185\") }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "dbt_utils_unique_combination_o_8c93206482de2a8695c1360824617185.sql", "original_file_path": "models/stg_lever.yml", "name": "dbt_utils_unique_combination_of_columns_stg_lever__contact_email_contact_id__email", "alias": "dbt_utils_unique_combination_o_8c93206482de2a8695c1360824617185", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__contact_email"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/dbt_utils_unique_combination_o_8c93206482de2a8695c1360824617185.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8c93206482de2a8695c1360824617185"}, "created_at": 1666651815.461866, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        contact_id, email\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_email`\n    group by contact_id, email\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_lever__contact_email"}, "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_phone_contact_id__index.99ed288184": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["contact_id", "index"], "model": "{{ get_where_subquery(ref('stg_lever__contact_phone')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__contact_phone"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fe50de3a8a589ca9622e7c5962106cac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "dbt_utils_unique_combination_of_columns_stg_lever__contact_phone_contact_id__index"], "unique_id": "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_phone_contact_id__index.99ed288184", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fe50de3a8a589ca9622e7c5962106cac\") }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "dbt_utils_unique_combination_o_fe50de3a8a589ca9622e7c5962106cac.sql", "original_file_path": "models/stg_lever.yml", "name": "dbt_utils_unique_combination_of_columns_stg_lever__contact_phone_contact_id__index", "alias": "dbt_utils_unique_combination_o_fe50de3a8a589ca9622e7c5962106cac", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__contact_phone"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/dbt_utils_unique_combination_o_fe50de3a8a589ca9622e7c5962106cac.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fe50de3a8a589ca9622e7c5962106cac"}, "created_at": 1666651815.464155, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        contact_id, index\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_phone`\n    group by contact_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_lever__contact_phone"}, "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__requisition_offer_offer_id__requisition_id.53a44f67bd": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["offer_id", "requisition_id"], "model": "{{ get_where_subquery(ref('stg_lever__requisition_offer')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__requisition_offer"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a4eeb2b880ecd21b09b5dbff4dc8d6ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "dbt_utils_unique_combination_of_columns_stg_lever__requisition_offer_offer_id__requisition_id"], "unique_id": "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__requisition_offer_offer_id__requisition_id.53a44f67bd", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a4eeb2b880ecd21b09b5dbff4dc8d6ee\") }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "dbt_utils_unique_combination_o_a4eeb2b880ecd21b09b5dbff4dc8d6ee.sql", "original_file_path": "models/stg_lever.yml", "name": "dbt_utils_unique_combination_of_columns_stg_lever__requisition_offer_offer_id__requisition_id", "alias": "dbt_utils_unique_combination_o_a4eeb2b880ecd21b09b5dbff4dc8d6ee", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__requisition_offer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/dbt_utils_unique_combination_o_a4eeb2b880ecd21b09b5dbff4dc8d6ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a4eeb2b880ecd21b09b5dbff4dc8d6ee"}, "created_at": 1666651815.4664729, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        offer_id, requisition_id\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__requisition_offer`\n    group by offer_id, requisition_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_lever__requisition_offer"}, "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_link_contact_id__link.96602a71e5": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["contact_id", "link"], "model": "{{ get_where_subquery(ref('stg_lever__contact_link')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__contact_link"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c3f7ef9707fa01c89f1e221c628c7eea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "dbt_utils_unique_combination_of_columns_stg_lever__contact_link_contact_id__link"], "unique_id": "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_link_contact_id__link.96602a71e5", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c3f7ef9707fa01c89f1e221c628c7eea\") }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "dbt_utils_unique_combination_o_c3f7ef9707fa01c89f1e221c628c7eea.sql", "original_file_path": "models/stg_lever.yml", "name": "dbt_utils_unique_combination_of_columns_stg_lever__contact_link_contact_id__link", "alias": "dbt_utils_unique_combination_o_c3f7ef9707fa01c89f1e221c628c7eea", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__contact_link"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/dbt_utils_unique_combination_o_c3f7ef9707fa01c89f1e221c628c7eea.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c3f7ef9707fa01c89f1e221c628c7eea"}, "created_at": 1666651815.4687848, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        contact_id, link\n    from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__contact_link`\n    group by contact_id, link\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_lever__contact_link"}, "test.lever_source.unique_stg_lever__resume_id.b601705ab7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_lever__resume')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__resume"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "unique_stg_lever__resume_id"], "unique_id": "test.lever_source.unique_stg_lever__resume_id.b601705ab7", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "unique_stg_lever__resume_id.sql", "original_file_path": "models/stg_lever.yml", "name": "unique_stg_lever__resume_id", "alias": "unique_stg_lever__resume_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__resume"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/unique_stg_lever__resume_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.4713159, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.stg_lever__resume"}, "test.lever_source.not_null_stg_lever__resume_id.b7007aa0fe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_lever__resume')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.lever_source.stg_lever__resume"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "lever_integration_tests_dbt_test__audit", "fqn": ["lever_source", "not_null_stg_lever__resume_id"], "unique_id": "test.lever_source.not_null_stg_lever__resume_id.b7007aa0fe", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "not_null_stg_lever__resume_id.sql", "original_file_path": "models/stg_lever.yml", "name": "not_null_stg_lever__resume_id", "alias": "not_null_stg_lever__resume_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_lever__resume"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/lever_source/models/stg_lever.yml/not_null_stg_lever__resume_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666651815.472095, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`lever_integration_tests`.`stg_lever__resume`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.stg_lever__resume"}}, "sources": {"source.lever_source.lever.opportunity": {"fqn": ["lever_source", "lever", "opportunity"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.opportunity", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "opportunity", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "opportunity", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Opportunities represent each candidates' individual journeys/candidacies through your pipeline. An individual candidate might have multiple opportunties if applying to multiple job postings. \n", "columns": {"id": {"name": "id", "description": "Unique ID of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_at": {"name": "archived_at", "description": "Timestamp of when the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_reason_id": {"name": "archived_reason_id", "description": "Foreign key referencing the ARCHIVE_REASON for which the opportunity was archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact": {"name": "contact", "description": "Foreign key referencing the CONTACT info of the candidate applying in this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the opportunity was created (ie when the candidate clicked \"apply\" on your company website).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_contact_allowed": {"name": "data_protection_contact_allowed", "description": "Boolean that is true if relevant data policy regulations allow for contacting  this opportunity's candidate.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_contact_expires_at": {"name": "data_protection_contact_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_store_allowed": {"name": "data_protection_store_allowed", "description": "Boolean that is true if relevant data policy regulations allow for storing  this opportunity record.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_protection_store_expires_at": {"name": "data_protection_store_expires_at", "description": "Timestamp of when this permission/data policy expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headline": {"name": "headline", "description": "Contact headline, typically a list of previous companies where the contact has worked or  schools that the contact has attended.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_anonymized": {"name": "is_anonymized", "description": "Boolean that is true if the opportunity has been anonymized (therefore fully anonymizing  the contact and removing their *personal* information).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_advanced_at": {"name": "last_advanced_at", "description": "Timestamp of when the candidate advanced to their current stage in the hiring pipeline.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_interaction_at": {"name": "last_interaction_at", "description": "Timestamp of when the Opportunity profile was last interacted with. See interactions [here](https://help.lever.co/hc/en-us/articles/205697619).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "Current contact location of the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Contact full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origin": {"name": "origin", "description": "The way in which the opportunity was added to lever. Includes 'agency', 'applied', 'internal', 'referred', 'sourced', and 'university'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "Foreign key referencing the id of the USER who owns this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snoozed_until": {"name": "snoozed_until", "description": "Timestamp of when the current snooze period of this opportunity ends (if snoozed).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "Foreign key referencing the ID of the current stage of the opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the opportunity was last updated in lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`opportunity`", "created_at": 1666651815.472758}, "source.lever_source.lever.posting": {"fqn": ["lever_source", "lever", "posting"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.posting", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "posting", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "posting", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing job postings that candidates can apply to.", "columns": {"id": {"name": "id", "description": "Unique ID of the job posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the posting has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "categories_commitment": {"name": "categories_commitment", "description": "Tag for job position work type (e.g. Full-time, Part-time, Internship).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "categories_department": {"name": "categories_department", "description": "Tag for the department to which the job posting's team belongs, if present.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "categories_level": {"name": "categories_level", "description": "Tag for job posting level (e.g. Senior, Junior). Note - this has been deprecated by Lever  but is currently maintained for backward compatibility.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "categories_location": {"name": "categories_location", "description": "Tag for job position location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "categories_team": {"name": "categories_team", "description": "Tag for the team to which the job posting belongs (a sub-category of department).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_closing": {"name": "content_closing", "description": "Closing statement on the job posting, in plaintext.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_closing_html": {"name": "content_closing_html", "description": "Closing statement on job posting, as styled HTML.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_description": {"name": "content_description", "description": "Job posting description that is shown at the top of the job's page, as plaintext.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_description_html": {"name": "content_description_html", "description": "Job posting description that is shown at the top of the job's page, in HTML.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the posting was created in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_id": {"name": "creator_id", "description": "Foreign key referencing the id of the USER who created the job posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "Foreign key referencing the id of the USER who owns the posting. The posting owner is the  individual who is directly responsible for managing all candidates who are applied to that role.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_code": {"name": "requisition_code", "description": "Array of requisition codes associated with this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "Current status of the posting, which may include 'published', 'internal' (called 'unlisted' in the UI), 'closed', 'draft', 'pending' (awaiting approval), and 'rejected'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "Title of the job posting role.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the posting was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`posting`", "created_at": 1666651815.472855}, "source.lever_source.lever.posting_tag": {"fqn": ["lever_source", "lever", "posting_tag"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.posting_tag", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "posting_tag", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "posting_tag", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table associating job postings with all associated tags.", "columns": {"posting_id": {"name": "posting_id", "description": "Foreign key referencing the id of the job POSTING.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tag": {"name": "tag", "description": "Text of the posting's individual tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the posting-tag association has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`posting_tag`", "created_at": 1666651815.4729211}, "source.lever_source.lever.posting_interview": {"fqn": ["lever_source", "lever", "posting_interview"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.posting_interview", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "posting_interview", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "posting_interview", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table relating job postings to any interviews undertaken for the role.", "columns": {"interview_id": {"name": "interview_id", "description": "Foreign key referencing the INTERVIEW for this job posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_id": {"name": "posting_id", "description": "Foreign key referencing the POSTING that was interviewed for.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`posting_interview`", "created_at": 1666651815.472984}, "source.lever_source.lever.user": {"fqn": ["lever_source", "lever", "user"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.user", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "user", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "user", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of Lever users (anyone who has been invited to join the recruiting efforts).", "columns": {"id": {"name": "id", "description": "Unique id of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the user has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "access_role": {"name": "access_role", "description": "The user's access role, which can be 'super admin', 'admin', 'team member', 'limited team member', or 'interviewer'. Information on what the roles entail can be found  [here](https://help.lever.co/hc/en-us/articles/360042645691-What-are-the-differences-between-access-roles-in-Lever-#:~:text=There%20are%205%20different%20access,information%2C%20and%20permission%20granting%20privileges).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the user was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deactivated_at": {"name": "deactivated_at", "description": "Timestamp of when the user was deactivated (null for active users).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The user's email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_directory_id": {"name": "external_directory_id", "description": "Unique ID of the user in an external HR directory, if provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User's preferred name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "photo": {"name": "photo", "description": "URL for user's gravatar, if enabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "username": {"name": "username", "description": "Username, extracted from user's email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`user`", "created_at": 1666651815.4730518}, "source.lever_source.lever.interviewer_user": {"fqn": ["lever_source", "lever", "interviewer_user"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.interviewer_user", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "interviewer_user", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "interviewer_user", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table relating interviews to their interviewers.", "columns": {"interview_id": {"name": "interview_id", "description": "Foreign key referencing the INTERVIEW that was given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the USER that interviewed the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`interviewer_user`", "created_at": 1666651815.4731112}, "source.lever_source.lever.opportunity_stage_history": {"fqn": ["lever_source", "lever", "opportunity_stage_history"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.opportunity_stage_history", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "opportunity_stage_history", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "opportunity_stage_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing the different stages that each opportunity has passed through in the pipeline.", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the id of the OPPORTUNITY.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the opportunity was changed to this stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "Foreign key referencing the STAGE that the opportunity was changed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updater_id": {"name": "updater_id", "description": "Foreign key referencing the USER who changed the opportunity stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_stage_index": {"name": "to_stage_index", "description": "The index of the stage in the pipeline at the time the stage change occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`opportunity_stage_history`", "created_at": 1666651815.473173}, "source.lever_source.lever.stage": {"fqn": ["lever_source", "lever", "stage"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.stage", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "stage", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "stage", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of steps in the recruiting workflow of your hiring pipeline.", "columns": {"id": {"name": "id", "description": "Unique id of the stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "Title of the stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`stage`", "created_at": 1666651815.4732301}, "source.lever_source.lever.opportunity_source": {"fqn": ["lever_source", "lever", "opportunity_source"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.opportunity_source", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "opportunity_source", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "opportunity_source", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table relating opportunities to all of their individual sources.", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY that was sourced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Where this opportunity was sourced from (ie 'linkedin').", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`opportunity_source`", "created_at": 1666651815.473286}, "source.lever_source.lever.opportunity_tag": {"fqn": ["lever_source", "lever", "opportunity_tag"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.opportunity_tag", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "opportunity_tag", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "opportunity_tag", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table relating opportunities to their tags.", "columns": {"opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY that was tagged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tag": {"name": "tag", "description": "Text of the tag associated with this opportunity.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`opportunity_tag`", "created_at": 1666651815.473344}, "source.lever_source.lever.application": {"fqn": ["lever_source", "lever", "application"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.application", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "application", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "application", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing candidate applications to job postings.", "columns": {"id": {"name": "id", "description": "Unique ID of the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_at": {"name": "archived_at", "description": "Timestamp of when the application was last archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived_reason_id": {"name": "archived_reason_id", "description": "Foreign key referencing the id of the ARCHIVE_REASON for which the application was last archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "Any additional comments from the candidate included in the job application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "The candidate's current company or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the application was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_hiring_manager_id": {"name": "posting_hiring_manager_id", "description": "Foreign key referencing the id of the USER who is the job posting's hiring manager, at the time  the application was submitted.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_id": {"name": "posting_id", "description": "Foreign key referencing the job POSTING for which the candidate applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_owner_id": {"name": "posting_owner_id", "description": "Foreign key referencing the id of the USER who owns this posting at the time the candidate applied.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_id": {"name": "referrer_id", "description": "The user ID of the candidate's referrer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_for_hire_id": {"name": "requisition_for_hire_id", "description": "If the application was archived as hired against a requisition, a foreign key referencing the id of the REQUISITION against which the application was hired.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of the application. An application can be of type referral, user, or posting. Applications of type  referral are created when a user refers a candidate for a job posting. Applications have type user when they  are applied manually to a posting in Lever. Applications have type posting when a candidate applies to a job  posting through your company's jobs page.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the id of the OPPORTUNITY associated with this application.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`application`", "created_at": 1666651815.4734132}, "source.lever_source.lever.offer": {"fqn": ["lever_source", "lever", "offer"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.offer", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "offer", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "offer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of the data sent to an opportunity for a position they have been offered.", "columns": {"id": {"name": "id", "description": "Unique ID of the offer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "candidate_id": {"name": "candidate_id", "description": "Unique ID of the candidate or opportunity??", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the offer was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_id": {"name": "creator_id", "description": "Foreign key referencing the USER who created the offer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "A string describing the current status of the offer. Can include:  draft - the offer is still under construction approval-sent - the offer needs approval approved - the offer has been approved sent - the offer has been sent through Lever sent-manually - the offer has been sent to the candidate outside of Lever opened - the candidate has opened the offer denied - the candidate denied the offer signed - the candidate signed the offer\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`offer`", "created_at": 1666651815.473472}, "source.lever_source.lever.archive_reason": {"fqn": ["lever_source", "lever", "archive_reason"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.archive_reason", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "archive_reason", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "archive_reason", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of reasons for archiving candidates, exiting them from the hiring pipeline (after hiring or rejecting  for a particular reason).\n", "columns": {"id": {"name": "id", "description": "Unique id of the archive reason.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "Name of the archive reason as shown in the Lever UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the archive reason has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`archive_reason`", "created_at": 1666651815.473529}, "source.lever_source.lever.interview": {"fqn": ["lever_source", "lever", "interview"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.interview", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "interview", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "interview", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing individual interviews (which comprise panels).", "columns": {"id": {"name": "id", "description": "Unique ID of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "Timestamp of when the interview was canceled, if canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the interview was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_id": {"name": "creator_id", "description": "Foreign key referencing the USER who created the interview in lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Date + time at which the interview was set to occur.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration": {"name": "duration", "description": "Interview duration in minutes, minimum value is 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feedback_reminder": {"name": "feedback_reminder", "description": "Frequency of feedback reminders (i.e. once, daily, frequently, none). Defaults to 'frequently' which is every 6 hours.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gcal_event_url": {"name": "gcal_event_url", "description": "Google calendar event url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "Interview location. Usually the name of a booked conference room but can also be a  phone number to call.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "Interview note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "panel_id": {"name": "panel_id", "description": "Unique id of the PANEL this interview belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "Foreign key referencing the STAGE that the candidate was in at the time  the interview was scheduled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "Subject of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Name of timezone in which interview was scheduled to occur.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY being interviewed for.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`interview`", "created_at": 1666651815.473599}, "source.lever_source.lever.interview_feedback": {"fqn": ["lever_source", "lever", "interview_feedback"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.interview_feedback", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "interview_feedback", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "interview_feedback", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table associating interviews with their feedback forms.", "columns": {"feedback_form_id": {"name": "feedback_form_id", "description": "Foreign key referencing the FEEDBACK_FORM submitted for this interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_id": {"name": "interview_id", "description": "Foreign key referencing the INTERVIEW that was given feedback for.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`interview_feedback`", "created_at": 1666651815.473655}, "source.lever_source.lever.feedback_form": {"fqn": ["lever_source", "lever", "feedback_form"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.feedback_form", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "feedback_form", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "feedback_form", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing feedback forms that have been completed after interviewing a candidate. \n", "columns": {"id": {"name": "id", "description": "Unique id of the feedback form.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Timestamp of when the feedback form was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the feedback form was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_id": {"name": "creator_id", "description": "Foreign key referencing the USER who completed and submitted the feedback.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "Timestamp of when the feedback form was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "instructions": {"name": "instructions", "description": "Form instructions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_id": {"name": "interview_id", "description": "Foreign key referencing the INTERVIEW for which the feedback is directed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "score_system_value": {"name": "score_system_value", "description": "Overall rating (1-4 scale) to the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_id": {"name": "template_id", "description": "Foreign key referencing the TEMPLATE_FIELD that this form used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "Form title. This can be edited in Feedback and Form Settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Form type. Feedback forms are of type interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY that the candidate was interviewed for.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`feedback_form`", "created_at": 1666651815.4737222}, "source.lever_source.lever.feedback_form_field": {"fqn": ["lever_source", "lever", "feedback_form_field"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.feedback_form_field", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "feedback_form_field", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "feedback_form_field", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing the values provided for individual fields within interview feedback forms.", "columns": {"feedback_form_id": {"name": "feedback_form_id", "description": "Foreign key referencing the FEEDBACK_FORM that this field is found in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_index": {"name": "field_index", "description": "Numerical index of the field's position in the feedback form.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_index": {"name": "value_index", "description": "Index of the value(s) provided for this field. This is relevant if the field is an array. todo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code_language": {"name": "code_language", "description": "Programming language if the interview assessed coding.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The three-character ISO 4217 Currency Code specifying what currency this field captures.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_date": {"name": "value_date", "description": "If the field is a date-type, this is the value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_decimal": {"name": "value_decimal", "description": "If the field is a decimal, this is the value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_file_id": {"name": "value_file_id", "description": "Foreign key referencing the FILE that was provided as the field value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_number": {"name": "value_number", "description": "If the field is a numeric, this is the value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_text": {"name": "value_text", "description": "If the field is a text field, this is the content of the value.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`feedback_form_field`", "created_at": 1666651815.473788}, "source.lever_source.lever.requisition": {"fqn": ["lever_source", "lever", "requisition"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.requisition", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "requisition", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "requisition", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing requisitions made in/pushed to lever.", "columns": {"id": {"name": "id", "description": "Unique id of the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the requisition has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "backfill": {"name": "backfill", "description": "Boolean that is true if the requisition represents a backfill or new headcount.  If unspecified, defaults to false. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_currency": {"name": "compensation_band_currency", "description": "The ISO currency code associated with the requisition's compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_interval": {"name": "compensation_band_interval", "description": "The string representing the interval of payment for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_max": {"name": "compensation_band_max", "description": "The high bound for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compensation_band_min": {"name": "compensation_band_min", "description": "The low bound for the compensation band.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the requisition was first created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_id": {"name": "creator_id", "description": "Foreign key referencing the USER who created the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employment_status": {"name": "employment_status", "description": "The work type of the requisition ('full-time', 'part-time', 'intern', 'contractor', or 'temp-worker').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_hired": {"name": "headcount_hired", "description": "The number of filled seats / openings on the requisition, or the string, 'unlimited'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_infinite": {"name": "headcount_infinite", "description": "todo!!!", "meta": {}, "data_type": null, "quote": null, "tags": []}, "headcount_total": {"name": "headcount_total", "description": "Total headcount allotted for this requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hiring_manager_id": {"name": "hiring_manager_id", "description": "Foreign key referencing the USER who is the hiring manager for this requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "internal_notes": {"name": "internal_notes", "description": "Free form text for notes and meta-data about the requisition, visible to anyone who can see the requisition in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "The location associated with the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The human-readable name for the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "Foreign key referencing the USER who owns the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_code": {"name": "requisition_code", "description": "The unique HRIS requisition code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the requisition. Can be 'open', 'onHold', 'closed', or 'draft'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team": {"name": "team", "description": "The team associated with the requisition", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`requisition`", "created_at": 1666651815.473863}, "source.lever_source.lever.requisition_posting": {"fqn": ["lever_source", "lever", "requisition_posting"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.requisition_posting", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "requisition_posting", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "requisition_posting", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table relating requsitions to positings.", "columns": {"posting_id": {"name": "posting_id", "description": "Foreign key referencing the POSTING created for this requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_id": {"name": "requisition_id", "description": "Foreign key referencing the REQUISITION associated with this posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the requisition-posting relationship has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`requisition_posting`", "created_at": 1666651815.473921}, "source.lever_source.lever.contact_email": {"fqn": ["lever_source", "lever", "contact_email"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.contact_email", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "contact_email", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "contact_email", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing the emails associated with a contact.", "columns": {"contact_id": {"name": "contact_id", "description": "Unique ID of the contact in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Contact's email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`contact_email`", "created_at": 1666651815.4741051}, "source.lever_source.lever.contact_phone": {"fqn": ["lever_source", "lever", "contact_phone"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.contact_phone", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "contact_phone", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "contact_phone", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing the phone numbers associated with a contact.", "columns": {"contact_id": {"name": "contact_id", "description": "Unique ID of the contact in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of this phone number for this contact (there can be multiple phone numbers per contact).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of phone number, either \"mobile\", \"home\", \"work\", \"skype\", or \"other\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The contact's provided phone number.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`contact_phone`", "created_at": 1666651815.474167}, "source.lever_source.lever.requisition_offer": {"fqn": ["lever_source", "lever", "requisition_offer"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.requisition_offer", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "requisition_offer", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "requisition_offer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table relating offers to their associated requisitions.", "columns": {"offer_id": {"name": "offer_id", "description": "Foriegn key referencing the OFFER for the requisition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_id": {"name": "requisition_id", "description": "Foriegn key referencing the REQUISITION which the offer was made against.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the offer-requisition relationship has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`requisition_offer`", "created_at": 1666651815.474226}, "source.lever_source.lever.contact_link": {"fqn": ["lever_source", "lever", "contact_link"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.contact_link", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "contact_link", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "contact_link", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of all links associated with an opportunity contact (ie linkedin, github repos, personal websites).", "columns": {"contact_id": {"name": "contact_id", "description": "Unique id of the contact associated with one or more opportunities.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "link": {"name": "link", "description": "Url of the individual link.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`contact_link`", "created_at": 1666651815.474284}, "source.lever_source.lever.resume": {"fqn": ["lever_source", "lever", "resume"], "database": "dbt-package-testing", "schema": "lever_integration_tests", "unique_id": "source.lever_source.lever.resume", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "models/src_lever.yml", "original_file_path": "models/src_lever.yml", "name": "resume", "source_name": "lever", "source_description": "", "loader": "fivetran", "identifier": "resume", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing resumes submitted by opportunities.", "columns": {"id": {"name": "id", "description": "Unique id of the resume file.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the resume was created in Lever.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "file_download_url": {"name": "file_download_url", "description": "Resume file download URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "file_ext": {"name": "file_ext", "description": "Resume file extension.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "file_name": {"name": "file_name", "description": "Name of the file uploaded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "file_uploaded_at": {"name": "file_uploaded_at", "description": "Timestamp of when the file was uploaded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunity_id": {"name": "opportunity_id", "description": "Foreign key referencing the OPPORTUNITY associated with this resume.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`lever_integration_tests`.`resume`", "created_at": 1666651815.474347}}, "macros": {"macro.lever_integration_tests.snowflake_seed_data": {"unique_id": "macro.lever_integration_tests.snowflake_seed_data", "package_name": "lever_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.357457, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.357834, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3580391, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.358306, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3615391, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3654149, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.36583, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.366173, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3664289, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.367382, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.367614, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.367918, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.368046, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3682282, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.368372, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.368511, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.368649, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.36882, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3690848, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.369238, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.369389, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.369772, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.370133, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.370833, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3710022, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"unique_id": "macro.dbt_bigquery.bigquery__upload_file", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.371267, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3716211, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3717718, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3723588, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.372948, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3735838, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.376758, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"unique_id": "macro.dbt_bigquery.py_write_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.37704, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.378232, "supported_languages": ["sql"]}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, complied_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in complied_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3804202, "supported_languages": null}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.380866, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, compiled_code) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.382039, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.382924, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           create_table_as(True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3862588, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.386713, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3868659, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.386993, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"unique_id": "macro.dbt_bigquery.bigquery__except", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.387155, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"unique_id": "macro.dbt_bigquery.bigquery__dateadd", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.387428, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3876429, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3878138, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3878841, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"unique_id": "macro.dbt_bigquery.bigquery__intersect", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3880398, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.388289, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"unique_id": "macro.dbt_bigquery.bigquery__right", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.388569, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"unique_id": "macro.dbt_bigquery.bigquery__listagg", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.388999, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"unique_id": "macro.dbt_bigquery.bigquery__datediff", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.389537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3897622, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"unique_id": "macro.dbt_bigquery.bigquery__hash", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.389977, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"unique_id": "macro.dbt_bigquery.bigquery__position", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3902059, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"unique_id": "macro.dbt_bigquery.bigquery__array_concat", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.390424, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"unique_id": "macro.dbt_bigquery.bigquery__bool_or", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.390614, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"unique_id": "macro.dbt_bigquery.bigquery__split_part", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3912609, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.391485, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"unique_id": "macro.dbt_bigquery.bigquery__array_construct", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.391834, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"unique_id": "macro.dbt_bigquery.bigquery__array_append", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.392093, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3927522, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.392986, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.393219, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.394339, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.394531, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.394669, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.394805, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3949382, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3953469, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.395635, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.395933, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.396394, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.396652, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.3999732, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.400137, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4003499, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4010382, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.401197, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.401362, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.402698, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.403991, "supported_languages": null}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4076061, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.407882, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.408046, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.40813, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4082701, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4083788, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.408573, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.409431, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.409615, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.409855, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.410269, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4159129, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4179, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4183779, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.418674, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.41908, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.419447, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.420959, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.421483, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4221241, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.422359, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4230459, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.427098, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.428643, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.428876, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.429591, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4298491, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.430463, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4311209, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4319732, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.43221, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.432391, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4326432, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4328241, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.433085, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.433269, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.433525, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4337049, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.433847, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.434114, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.438806, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.44374, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.44491, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4460611, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.446871, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4493408, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4498749, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.450058, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4504719, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.450866, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4533231, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.453669, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4538822, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.455356, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.455759, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.455918, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4560902, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.456342, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4594822, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.463912, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4647732, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.465, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.465463, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.465645, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.465773, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.465908, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.466017, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.46617, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.466283, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.466743, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.46692, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.468141, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.468566, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4687822, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.469323, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.469575, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.469849, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.470277, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.470516, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4708989, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.471241, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.471532, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.472121, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.473567, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.474182, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.47447, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.476177, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.477313, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.478038, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.478265, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.478548, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.478621, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4789839, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4791412, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.479434, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.479551, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.479844, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.479947, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4803252, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.480482, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.480751, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.480823, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4811258, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.481261, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4815922, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4817889, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.482424, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.482807, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.483181, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.483337, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.483666, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4838011, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4841018, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.484255, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.484543, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.484695, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.48499, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.48509, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.485419, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4855502, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.485836, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.485932, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.486849, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.486994, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.487212, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.487359, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.487515, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.487659, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.487815, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.487985, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.488139, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.488286, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4884422, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.488585, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.488737, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.488875, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4891992, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.489324, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4896152, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.489713, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.490088, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.490345, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.490487, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.491025, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.491185, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.491466, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.491797, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.491926, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4923542, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4926562, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.493063, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4932008, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4936361, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.493825, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4940002, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.494185, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4947042, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.494851, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.494987, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.495091, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.495255, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4953249, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4954839, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.495648, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4961421, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.49635, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.49651, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4969118, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.4999838, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.500155, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.500372, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.500663, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5009081, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.501229, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.50141, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.501622, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.501801, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.501958, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.502155, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.50244, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5026891, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5033941, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.503941, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.504092, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.504284, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.504852, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.505257, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.506879, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.506992, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.507154, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.507262, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5075939, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.507777, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.507874, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.508096, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5082822, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.508501, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.508683, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5089002, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.509566, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.509815, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.510059, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.510286, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.511376, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5120971, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5122612, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.512456, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.51262, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.512883, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.513512, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.515111, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.515394, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5155892, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.515758, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.515945, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5161998, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5164192, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.516737, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5169249, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5170949, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5187469, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.519018, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.519338, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.519524, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.519875, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.520111, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.520721, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.520975, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5217438, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5232089, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5236852, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5241401, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.524575, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.524649, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.525217, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5254369, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5257258, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.526, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5263941, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.526798, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.52723, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.52774, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.528416, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.528787, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.529094, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.530155, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.531144, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.532005, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5330718, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5337842, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.534122, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5347798, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, group_by_columns) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp_backcompat()) %}\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      max({{field}}) as most_recent\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.535419, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5359192, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5363631, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.536993, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.537468, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5380569, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5384462, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5389812, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5395432, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5402272, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.540884, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5414941, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5418298, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.542491, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    {{ column_list }}\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.542955, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5438678, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.544868, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5458581, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.546759, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.54761, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5485098, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"unique_id": "macro.dbt_utils.test_not_empty_string", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.549077, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"unique_id": "macro.dbt_utils.default__test_not_empty_string", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5493681, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.552741, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5544908, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.554954, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.555128, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.555661, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.556007, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.556215, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.556542, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5567129, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.557224, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.558082, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5588129, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.559407, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.559638, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5599942, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.560388, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5607328, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.561455, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.562391, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.563246, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.563664, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.56385, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.564356, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.565054, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.565879, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.566328, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.566619, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.567316, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5682602, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.569526, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5711071, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5739992, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5772889, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.577651, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.577894, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.578644, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.578857, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5790641, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5792482, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.579405, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.579565, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.580014, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a variable scoped to the dbt_utils package called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.580241, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.580656, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5811799, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.581559, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5818791, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.58346, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.583814, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.584571, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5850618, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.58615, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.587604, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.588644, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.589442, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.589937, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.590636, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.591997, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.592428, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.59286, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.593041, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.593463, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.594037, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"unique_id": "macro.dbt_utils.generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.59452, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"unique_id": "macro.dbt_utils.default__generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.595123, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.595552, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.595684, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.595814, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.596855, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5971892, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5977442, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.5985122, "supported_languages": null}, "macro.lever_source.get_interview_columns": {"unique_id": "macro.lever_source.get_interview_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_interview_columns.sql", "original_file_path": "macros/get_interview_columns.sql", "name": "get_interview_columns", "macro_sql": "{% macro get_interview_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"canceled_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"creator_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"duration\", \"datatype\": dbt.type_int()},\n    {\"name\": \"feedback_reminder\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gcal_event_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opportunity_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"panel_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stage_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timezone\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.600368, "supported_languages": null}, "macro.lever_source.get_posting_columns": {"unique_id": "macro.lever_source.get_posting_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_posting_columns.sql", "original_file_path": "macros/get_posting_columns.sql", "name": "get_posting_columns", "macro_sql": "{% macro get_posting_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"categories_commitment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"categories_department\", \"datatype\": dbt.type_string()},\n    {\"name\": \"categories_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"categories_location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"categories_team\", \"datatype\": dbt.type_string()},\n    {\"name\": \"content_closing\", \"datatype\": dbt.type_string()},\n    {\"name\": \"content_closing_html\", \"datatype\": dbt.type_string()},\n    {\"name\": \"content_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"content_description_html\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"creator_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"owner_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requisition_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"text\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.60241, "supported_languages": null}, "macro.lever_source.get_posting_interview_columns": {"unique_id": "macro.lever_source.get_posting_interview_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_posting_interview_columns.sql", "original_file_path": "macros/get_posting_interview_columns.sql", "name": "get_posting_interview_columns", "macro_sql": "{% macro get_posting_interview_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"interview_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"posting_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6029382, "supported_languages": null}, "macro.lever_source.get_contact_email_columns": {"unique_id": "macro.lever_source.get_contact_email_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_contact_email_columns.sql", "original_file_path": "macros/get_contact_email_columns.sql", "name": "get_contact_email_columns", "macro_sql": "{% macro get_contact_email_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6034591, "supported_languages": null}, "macro.lever_source.get_stage_columns": {"unique_id": "macro.lever_source.get_stage_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_stage_columns.sql", "original_file_path": "macros/get_stage_columns.sql", "name": "get_stage_columns", "macro_sql": "{% macro get_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"text\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6040561, "supported_languages": null}, "macro.lever_source.get_contact_phone_columns": {"unique_id": "macro.lever_source.get_contact_phone_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_contact_phone_columns.sql", "original_file_path": "macros/get_contact_phone_columns.sql", "name": "get_contact_phone_columns", "macro_sql": "{% macro get_contact_phone_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6047611, "supported_languages": null}, "macro.lever_source.get_contact_link_columns": {"unique_id": "macro.lever_source.get_contact_link_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_contact_link_columns.sql", "original_file_path": "macros/get_contact_link_columns.sql", "name": "get_contact_link_columns", "macro_sql": "{% macro get_contact_link_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"link\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.605282, "supported_languages": null}, "macro.lever_source.get_feedback_form_field_columns": {"unique_id": "macro.lever_source.get_feedback_form_field_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_feedback_form_field_columns.sql", "original_file_path": "macros/get_feedback_form_field_columns.sql", "name": "get_feedback_form_field_columns", "macro_sql": "{% macro get_feedback_form_field_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"code_language\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"feedback_form_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"field_index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"value_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"value_decimal\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"value_file_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"value_index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"value_number\", \"datatype\": dbt.type_int()},\n    {\"name\": \"value_text\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6065412, "supported_languages": null}, "macro.lever_source.get_archive_reason_columns": {"unique_id": "macro.lever_source.get_archive_reason_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_archive_reason_columns.sql", "original_file_path": "macros/get_archive_reason_columns.sql", "name": "get_archive_reason_columns", "macro_sql": "{% macro get_archive_reason_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"text\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.607136, "supported_languages": null}, "macro.lever_source.get_opportunity_tag_columns": {"unique_id": "macro.lever_source.get_opportunity_tag_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_opportunity_tag_columns.sql", "original_file_path": "macros/get_opportunity_tag_columns.sql", "name": "get_opportunity_tag_columns", "macro_sql": "{% macro get_opportunity_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"opportunity_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{% if target.type == 'redshift' %}\n {{ columns.append( {\"name\": \"tag\", \"datatype\": dbt.type_string(), \"quote\": True } ) }}\n{% else %}\n {{ columns.append( {\"name\": \"tag\", \"datatype\": dbt.type_string()} ) }}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.607976, "supported_languages": null}, "macro.lever_source.get_interview_feedback_columns": {"unique_id": "macro.lever_source.get_interview_feedback_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_interview_feedback_columns.sql", "original_file_path": "macros/get_interview_feedback_columns.sql", "name": "get_interview_feedback_columns", "macro_sql": "{% macro get_interview_feedback_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"feedback_form_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"interview_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.608503, "supported_languages": null}, "macro.lever_source.get_requisition_columns": {"unique_id": "macro.lever_source.get_requisition_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_requisition_columns.sql", "original_file_path": "macros/get_requisition_columns.sql", "name": "get_requisition_columns", "macro_sql": "{% macro get_requisition_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"backfill\", \"datatype\": \"boolean\"},\n    {\"name\": \"compensation_band_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"compensation_band_interval\", \"datatype\": dbt.type_string()},\n    {\"name\": \"compensation_band_max\", \"datatype\": dbt.type_string()},\n    {\"name\": \"compensation_band_min\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"creator_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"custom_field_agency_owner\", \"datatype\": dbt.type_string()},\n    {\"name\": \"custom_field_requisition_live_date\", \"datatype\": dbt.type_int()},\n    {\"name\": \"custom_field_sourcing_hm_owned\", \"datatype\": \"boolean\"},\n    {\"name\": \"custom_field_target_hire_date\", \"datatype\": dbt.type_int()},\n    {\"name\": \"custom_field_top_funnel_target\", \"datatype\": dbt.type_int()},\n    {\"name\": \"employment_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"headcount_hired\", \"datatype\": dbt.type_string()},\n    {\"name\": \"headcount_infinite\", \"datatype\": dbt.type_string()},\n    {\"name\": \"headcount_total\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hiring_manager_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"internal_notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"owner_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requisition_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"team\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.611428, "supported_languages": null}, "macro.lever_source.get_user_columns": {"unique_id": "macro.lever_source.get_user_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_user_columns.sql", "original_file_path": "macros/get_user_columns.sql", "name": "get_user_columns", "macro_sql": "{% macro get_user_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"access_role\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deactivated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"external_directory_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"photo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"username\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.612691, "supported_languages": null}, "macro.lever_source.get_posting_tag_columns": {"unique_id": "macro.lever_source.get_posting_tag_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_posting_tag_columns.sql", "original_file_path": "macros/get_posting_tag_columns.sql", "name": "get_posting_tag_columns", "macro_sql": "{% macro get_posting_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"posting_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{% if target.type == 'redshift' %}\n {{ columns.append( {\"name\": \"tag\", \"datatype\": dbt.type_string(), \"quote\": True } ) }}\n{% else %}\n {{ columns.append( {\"name\": \"tag\", \"datatype\": dbt.type_string() } ) }}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6136131, "supported_languages": null}, "macro.lever_source.get_opportunity_source_columns": {"unique_id": "macro.lever_source.get_opportunity_source_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_opportunity_source_columns.sql", "original_file_path": "macros/get_opportunity_source_columns.sql", "name": "get_opportunity_source_columns", "macro_sql": "{% macro get_opportunity_source_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"opportunity_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6141388, "supported_languages": null}, "macro.lever_source.get_offer_columns": {"unique_id": "macro.lever_source.get_offer_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_offer_columns.sql", "original_file_path": "macros/get_offer_columns.sql", "name": "get_offer_columns", "macro_sql": "{% macro get_offer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"creator_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.614935, "supported_languages": null}, "macro.lever_source.get_interviewer_user_columns": {"unique_id": "macro.lever_source.get_interviewer_user_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_interviewer_user_columns.sql", "original_file_path": "macros/get_interviewer_user_columns.sql", "name": "get_interviewer_user_columns", "macro_sql": "{% macro get_interviewer_user_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"interview_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.615459, "supported_languages": null}, "macro.lever_source.get_opportunity_columns": {"unique_id": "macro.lever_source.get_opportunity_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_opportunity_columns.sql", "original_file_path": "macros/get_opportunity_columns.sql", "name": "get_opportunity_columns", "macro_sql": "{% macro get_opportunity_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"archived_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"archived_reason_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contact\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"data_protection_contact_allowed\", \"datatype\": \"boolean\"},\n    {\"name\": \"data_protection_contact_expires_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"data_protection_store_allowed\", \"datatype\": \"boolean\"},\n    {\"name\": \"data_protection_store_expires_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"headline\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_anonymized\", \"datatype\": \"boolean\"},\n    {\"name\": \"last_advanced_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"last_interaction_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"origin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"owner_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"snoozed_until\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"stage_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.617667, "supported_languages": null}, "macro.lever_source.get_opportunity_stage_history_columns": {"unique_id": "macro.lever_source.get_opportunity_stage_history_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_opportunity_stage_history_columns.sql", "original_file_path": "macros/get_opportunity_stage_history_columns.sql", "name": "get_opportunity_stage_history_columns", "macro_sql": "{% macro get_opportunity_stage_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"opportunity_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stage_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"to_stage_index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updater_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6184692, "supported_languages": null}, "macro.lever_source.get_application_columns": {"unique_id": "macro.lever_source.get_application_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_application_columns.sql", "original_file_path": "macros/get_application_columns.sql", "name": "get_application_columns", "macro_sql": "{% macro get_application_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"archived_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"archived_reason_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opportunity_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"posting_hiring_manager_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"posting_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"posting_owner_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"referrer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requisition_for_hire_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6201081, "supported_languages": null}, "macro.lever_source.get_feedback_form_columns": {"unique_id": "macro.lever_source.get_feedback_form_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_feedback_form_columns.sql", "original_file_path": "macros/get_feedback_form_columns.sql", "name": "get_feedback_form_columns", "macro_sql": "{% macro get_feedback_form_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"completed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"creator_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deleted_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"instructions\", \"datatype\": dbt.type_string()},\n    {\"name\": \"interview_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opportunity_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"score_system_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"template_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"text\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6216571, "supported_languages": null}, "macro.lever_source.get_resume_columns": {"unique_id": "macro.lever_source.get_resume_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_resume_columns.sql", "original_file_path": "macros/get_resume_columns.sql", "name": "get_resume_columns", "macro_sql": "{% macro get_resume_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"file_download_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"file_ext\", \"datatype\": dbt.type_string()},\n    {\"name\": \"file_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"file_uploaded_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opportunity_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6226392, "supported_languages": null}, "macro.lever_source.get_requisition_posting_columns": {"unique_id": "macro.lever_source.get_requisition_posting_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_requisition_posting_columns.sql", "original_file_path": "macros/get_requisition_posting_columns.sql", "name": "get_requisition_posting_columns", "macro_sql": "{% macro get_requisition_posting_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"posting_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requisition_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.623235, "supported_languages": null}, "macro.lever_source.get_requisition_offer_columns": {"unique_id": "macro.lever_source.get_requisition_offer_columns", "package_name": "lever_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/lever_source", "path": "macros/get_requisition_offer_columns.sql", "original_file_path": "macros/get_requisition_offer_columns.sql", "name": "get_requisition_offer_columns", "macro_sql": "{% macro get_requisition_offer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"offer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requisition_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.62383, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.624265, "supported_languages": null}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.625173, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.625334, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.625489, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.625642, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.625777, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.626163, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.626624, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.627295, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.628342, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.62858, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.628816, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.629051, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.629282, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.629539, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6297941, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6301591, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.630257, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.63035, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.63045, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.630862, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6314728, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.632113, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.632617, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.632746, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.632878, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.633067, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.633196, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.635871, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.636032, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.636192, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.636341, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.637974, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"unique_id": "macro.fivetran_utils.try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6388109, "supported_languages": null}, "macro.fivetran_utils.default__safe_cast": {"unique_id": "macro.fivetran_utils.default__safe_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6389482, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"unique_id": "macro.fivetran_utils.redshift__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.639215, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"unique_id": "macro.fivetran_utils.postgres__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6394901, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"unique_id": "macro.fivetran_utils.snowflake__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.639616, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"unique_id": "macro.fivetran_utils.bigquery__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.639735, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"unique_id": "macro.fivetran_utils.spark__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6398542, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6403682, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.640934, "supported_languages": null}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.641463, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.641662, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.641873, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.642177, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.643092, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6468549, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.647205, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.647635, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.649159, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6496918, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6502788, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.650434, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.650584, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.650752, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6509, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.651045, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6517582, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.652711, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6534138, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.653575, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.653727, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.653879, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6540318, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6542609, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6545632, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.654662, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.654757, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.655432, "supported_languages": null}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6567638, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.659096, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6604958, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.660819, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.660917, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.661016, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.6614552, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/lever/dbt_lever/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666651814.661889, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"seed.lever_integration_tests.opportunity_source": [], "seed.lever_integration_tests.stage": [], "seed.lever_integration_tests.requisition_offer": [], "seed.lever_integration_tests.posting_tag": [], "seed.lever_integration_tests.opportunity_tag": [], "seed.lever_integration_tests.interview": [], "seed.lever_integration_tests.requisition_posting": [], "seed.lever_integration_tests.contact_email": [], "seed.lever_integration_tests.archive_reason": [], "seed.lever_integration_tests.requisition": [], "seed.lever_integration_tests.posting": [], "seed.lever_integration_tests.contact_link": [], "seed.lever_integration_tests.posting_interview": [], "seed.lever_integration_tests.feedback_form_field": [], "seed.lever_integration_tests.resume": [], "seed.lever_integration_tests.feedback_form": [], "seed.lever_integration_tests.interviewer_user": [], "seed.lever_integration_tests.user": [], "seed.lever_integration_tests.interview_feedback": [], "seed.lever_integration_tests.application": [], "seed.lever_integration_tests.opportunity": [], "seed.lever_integration_tests.contact_phone": [], "seed.lever_integration_tests.opportunity_stage_history": [], "seed.lever_integration_tests.offer": [], "model.lever.lever__posting_enhanced": ["model.lever.int_lever__posting_applications", "model.lever.int_lever__posting_interviews", "model.lever.int_lever__posting_tags", "model.lever_source.stg_lever__posting", "model.lever_source.stg_lever__requisition_posting", "model.lever_source.stg_lever__user"], "model.lever.lever__requisition_enhanced": ["model.lever.int_lever__requisition_users", "model.lever_source.stg_lever__requisition_offer", "model.lever_source.stg_lever__requisition_posting"], "model.lever.lever__opportunity_stage_history": ["model.lever.lever__opportunity_enhanced", "model.lever_source.stg_lever__opportunity_stage_history", "model.lever_source.stg_lever__stage", "model.lever_source.stg_lever__user"], "model.lever.lever__opportunity_enhanced": ["model.lever.int_lever__opportunity_contact_info", "model.lever.int_lever__opportunity_tags", "model.lever.lever__interview_enhanced", "model.lever.lever__posting_enhanced", "model.lever_source.stg_lever__archive_reason", "model.lever_source.stg_lever__offer", "model.lever_source.stg_lever__stage"], "model.lever.lever__interview_enhanced": ["model.lever.int_lever__interview_users", "model.lever.int_lever__opportunity_users"], "model.lever.int_lever__requisition_users": ["model.lever_source.stg_lever__requisition", "model.lever_source.stg_lever__user"], "model.lever.int_lever__posting_tags": ["model.lever_source.stg_lever__posting_tag"], "model.lever.int_lever__opportunity_contact_info": ["model.lever.int_lever__contact_info", "model.lever.int_lever__opportunity_users", "model.lever_source.stg_lever__opportunity_source", "model.lever_source.stg_lever__resume"], "model.lever.int_lever__posting_interviews": ["model.lever_source.stg_lever__interview", "model.lever_source.stg_lever__posting_interview"], "model.lever.int_lever__opportunity_tags": ["model.lever_source.stg_lever__opportunity_tag"], "model.lever.int_lever__posting_applications": ["model.lever_source.stg_lever__application"], "model.lever.int_lever__contact_info": ["model.lever_source.stg_lever__contact_email", "model.lever_source.stg_lever__contact_link", "model.lever_source.stg_lever__contact_phone"], "model.lever.int_lever__opportunity_application": ["model.lever_source.stg_lever__application", "model.lever_source.stg_lever__opportunity"], "model.lever.int_lever__opportunity_users": ["model.lever.int_lever__opportunity_application", "model.lever_source.stg_lever__user"], "model.lever.int_lever__interview_feedback": ["model.lever_source.stg_lever__feedback_form", "model.lever_source.stg_lever__interview", "model.lever_source.stg_lever__interview_feedback"], "model.lever.int_lever__interview_users": ["model.lever.int_lever__interview_feedback", "model.lever_source.stg_lever__interviewer_user", "model.lever_source.stg_lever__user"], "model.lever_source.stg_lever__feedback_form": ["model.lever_source.stg_lever__feedback_form_tmp", "model.lever_source.stg_lever__feedback_form_tmp"], "model.lever_source.stg_lever__requisition_offer": ["model.lever_source.stg_lever__requisition_offer_tmp", "model.lever_source.stg_lever__requisition_offer_tmp"], "model.lever_source.stg_lever__posting_tag": ["model.lever_source.stg_lever__posting_tag_tmp", "model.lever_source.stg_lever__posting_tag_tmp"], "model.lever_source.stg_lever__interviewer_user": ["model.lever_source.stg_lever__interviewer_user_tmp", "model.lever_source.stg_lever__interviewer_user_tmp"], "model.lever_source.stg_lever__resume": ["model.lever_source.stg_lever__resume_tmp", "model.lever_source.stg_lever__resume_tmp"], "model.lever_source.stg_lever__opportunity_tag": ["model.lever_source.stg_lever__opportunity_tag_tmp", "model.lever_source.stg_lever__opportunity_tag_tmp"], "model.lever_source.stg_lever__offer": ["model.lever_source.stg_lever__offer_tmp", "model.lever_source.stg_lever__offer_tmp"], "model.lever_source.stg_lever__contact_phone": ["model.lever_source.stg_lever__contact_phone_tmp", "model.lever_source.stg_lever__contact_phone_tmp"], "model.lever_source.stg_lever__archive_reason": ["model.lever_source.stg_lever__archive_reason_tmp", "model.lever_source.stg_lever__archive_reason_tmp"], "model.lever_source.stg_lever__requisition": ["model.lever_source.stg_lever__requisition_tmp", "model.lever_source.stg_lever__requisition_tmp"], "model.lever_source.stg_lever__requisition_posting": ["model.lever_source.stg_lever__requisition_posting_tmp", "model.lever_source.stg_lever__requisition_posting_tmp"], "model.lever_source.stg_lever__contact_link": ["model.lever_source.stg_lever__contact_link_tmp", "model.lever_source.stg_lever__contact_link_tmp"], "model.lever_source.stg_lever__interview_feedback": ["model.lever_source.stg_lever__interview_feedback_tmp", "model.lever_source.stg_lever__interview_feedback_tmp"], "model.lever_source.stg_lever__posting_interview": ["model.lever_source.stg_lever__posting_interview_tmp", "model.lever_source.stg_lever__posting_interview_tmp"], "model.lever_source.stg_lever__user": ["model.lever_source.stg_lever__user_tmp", "model.lever_source.stg_lever__user_tmp"], "model.lever_source.stg_lever__stage": ["model.lever_source.stg_lever__stage_tmp", "model.lever_source.stg_lever__stage_tmp"], "model.lever_source.stg_lever__feedback_form_field": ["model.lever_source.stg_lever__feedback_form_field_tmp", "model.lever_source.stg_lever__feedback_form_field_tmp"], "model.lever_source.stg_lever__opportunity_source": ["model.lever_source.stg_lever__opportunity_source_tmp", "model.lever_source.stg_lever__opportunity_source_tmp"], "model.lever_source.stg_lever__opportunity": ["model.lever_source.stg_lever__opportunity_tmp", "model.lever_source.stg_lever__opportunity_tmp"], "model.lever_source.stg_lever__posting": ["model.lever_source.stg_lever__posting_tmp", "model.lever_source.stg_lever__posting_tmp"], "model.lever_source.stg_lever__contact_email": ["model.lever_source.stg_lever__contact_email_tmp", "model.lever_source.stg_lever__contact_email_tmp"], "model.lever_source.stg_lever__application": ["model.lever_source.stg_lever__application_tmp", "model.lever_source.stg_lever__application_tmp"], "model.lever_source.stg_lever__opportunity_stage_history": ["model.lever_source.stg_lever__opportunity_stage_history_tmp", "model.lever_source.stg_lever__opportunity_stage_history_tmp"], "model.lever_source.stg_lever__interview": ["model.lever_source.stg_lever__interview_tmp", "model.lever_source.stg_lever__interview_tmp"], "model.lever_source.stg_lever__opportunity_source_tmp": ["source.lever_source.lever.opportunity_source"], "model.lever_source.stg_lever__posting_tmp": ["source.lever_source.lever.posting"], "model.lever_source.stg_lever__interview_feedback_tmp": ["source.lever_source.lever.interview_feedback"], "model.lever_source.stg_lever__feedback_form_tmp": ["source.lever_source.lever.feedback_form"], "model.lever_source.stg_lever__contact_link_tmp": ["source.lever_source.lever.contact_link"], "model.lever_source.stg_lever__contact_phone_tmp": ["source.lever_source.lever.contact_phone"], "model.lever_source.stg_lever__opportunity_tmp": ["source.lever_source.lever.opportunity"], "model.lever_source.stg_lever__posting_interview_tmp": ["source.lever_source.lever.posting_interview"], "model.lever_source.stg_lever__opportunity_tag_tmp": ["source.lever_source.lever.opportunity_tag"], "model.lever_source.stg_lever__opportunity_stage_history_tmp": ["source.lever_source.lever.opportunity_stage_history"], "model.lever_source.stg_lever__stage_tmp": ["source.lever_source.lever.stage"], "model.lever_source.stg_lever__requisition_offer_tmp": ["source.lever_source.lever.requisition_offer"], "model.lever_source.stg_lever__posting_tag_tmp": ["source.lever_source.lever.posting_tag"], "model.lever_source.stg_lever__application_tmp": ["source.lever_source.lever.application"], "model.lever_source.stg_lever__requisition_posting_tmp": ["source.lever_source.lever.requisition_posting"], "model.lever_source.stg_lever__archive_reason_tmp": ["source.lever_source.lever.archive_reason"], "model.lever_source.stg_lever__resume_tmp": ["source.lever_source.lever.resume"], "model.lever_source.stg_lever__interview_tmp": ["source.lever_source.lever.interview"], "model.lever_source.stg_lever__contact_email_tmp": ["source.lever_source.lever.contact_email"], "model.lever_source.stg_lever__user_tmp": ["source.lever_source.lever.user"], "model.lever_source.stg_lever__requisition_tmp": ["source.lever_source.lever.requisition"], "model.lever_source.stg_lever__feedback_form_field_tmp": ["source.lever_source.lever.feedback_form_field"], "model.lever_source.stg_lever__interviewer_user_tmp": ["source.lever_source.lever.interviewer_user"], "model.lever_source.stg_lever__offer_tmp": ["source.lever_source.lever.offer"], "test.lever.unique_lever__opportunity_enhanced_opportunity_id.4730712f6d": ["model.lever.lever__opportunity_enhanced"], "test.lever.not_null_lever__opportunity_enhanced_opportunity_id.13470c5ff7": ["model.lever.lever__opportunity_enhanced"], "test.lever.unique_lever__posting_enhanced_posting_id.166f999091": ["model.lever.lever__posting_enhanced"], "test.lever.not_null_lever__posting_enhanced_posting_id.0f16e9aa3c": ["model.lever.lever__posting_enhanced"], "test.lever.unique_lever__requisition_enhanced_requisition_id.aff49ec548": ["model.lever.lever__requisition_enhanced"], "test.lever.not_null_lever__requisition_enhanced_requisition_id.215e62c13b": ["model.lever.lever__requisition_enhanced"], "test.lever.unique_int_lever__contact_info_contact_id.8c8f6baf02": ["model.lever.int_lever__contact_info"], "test.lever.not_null_int_lever__contact_info_contact_id.22ddde3962": ["model.lever.int_lever__contact_info"], "test.lever.dbt_utils_unique_combination_of_columns_int_lever__interview_feedback_feedback_form_id__interview_id.99a7ccec94": ["model.lever.int_lever__interview_feedback"], "test.lever.unique_int_lever__opportunity_application_opportunity_id.766b390b67": ["model.lever.int_lever__opportunity_application"], "test.lever.not_null_int_lever__opportunity_application_opportunity_id.892f671317": ["model.lever.int_lever__opportunity_application"], "test.lever.unique_int_lever__opportunity_contact_info_opportunity_id.d74cc60941": ["model.lever.int_lever__opportunity_contact_info"], "test.lever.not_null_int_lever__opportunity_contact_info_opportunity_id.fd8afc3189": ["model.lever.int_lever__opportunity_contact_info"], "test.lever.unique_int_lever__opportunity_tags_opportunity_id.66df824288": ["model.lever.int_lever__opportunity_tags"], "test.lever.not_null_int_lever__opportunity_tags_opportunity_id.91b6cd9841": ["model.lever.int_lever__opportunity_tags"], "test.lever.unique_int_lever__opportunity_users_opportunity_id.d138ba15c2": ["model.lever.int_lever__opportunity_users"], "test.lever.not_null_int_lever__opportunity_users_opportunity_id.2128831135": ["model.lever.int_lever__opportunity_users"], "test.lever.unique_int_lever__posting_applications_posting_id.be588f9e4a": ["model.lever.int_lever__posting_applications"], "test.lever.not_null_int_lever__posting_applications_posting_id.c78c1b0c51": ["model.lever.int_lever__posting_applications"], "test.lever.unique_int_lever__posting_interviews_posting_id.a95c9d9e9e": ["model.lever.int_lever__posting_interviews"], "test.lever.not_null_int_lever__posting_interviews_posting_id.a9c419e7c1": ["model.lever.int_lever__posting_interviews"], "test.lever.unique_int_lever__posting_tags_posting_id.d901f1612a": ["model.lever.int_lever__posting_tags"], "test.lever.not_null_int_lever__posting_tags_posting_id.c5af03291e": ["model.lever.int_lever__posting_tags"], "test.lever.unique_int_lever__requisition_users_requisition_id.366ce4c197": ["model.lever.int_lever__requisition_users"], "test.lever.not_null_int_lever__requisition_users_requisition_id.94e57e2216": ["model.lever.int_lever__requisition_users"], "test.lever_source.unique_stg_lever__opportunity_opportunity_id.895b120dc5": ["model.lever_source.stg_lever__opportunity"], "test.lever_source.not_null_stg_lever__opportunity_opportunity_id.9c5eceacb7": ["model.lever_source.stg_lever__opportunity"], "test.lever_source.unique_stg_lever__posting_posting_id.1eebf1e1c9": ["model.lever_source.stg_lever__posting"], "test.lever_source.not_null_stg_lever__posting_posting_id.628ea50829": ["model.lever_source.stg_lever__posting"], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__posting_tag_posting_id__tag_name.aa48251b13": ["model.lever_source.stg_lever__posting_tag"], "test.lever_source.unique_stg_lever__user_user_id.7fc22fb59e": ["model.lever_source.stg_lever__user"], "test.lever_source.not_null_stg_lever__user_user_id.22ec43a8b0": ["model.lever_source.stg_lever__user"], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_stage_history_opportunity_id__updated_at.4032013edb": ["model.lever_source.stg_lever__opportunity_stage_history"], "test.lever_source.unique_stg_lever__stage_stage_id.0709db19c3": ["model.lever_source.stg_lever__stage"], "test.lever_source.not_null_stg_lever__stage_stage_id.438d91b1a2": ["model.lever_source.stg_lever__stage"], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_source_opportunity_id__source.24e3de3dec": ["model.lever_source.stg_lever__opportunity_source"], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_tag_opportunity_id__tag_name.2b8dcb8c4c": ["model.lever_source.stg_lever__opportunity_tag"], "test.lever_source.unique_stg_lever__application_application_id.6b937cf15c": ["model.lever_source.stg_lever__application"], "test.lever_source.not_null_stg_lever__application_application_id.ea2068d8da": ["model.lever_source.stg_lever__application"], "test.lever_source.unique_stg_lever__offer_offer_id.d2fc15a1f1": ["model.lever_source.stg_lever__offer"], "test.lever_source.not_null_stg_lever__offer_offer_id.dc41920c6a": ["model.lever_source.stg_lever__offer"], "test.lever_source.unique_stg_lever__archive_reason_archive_reason_id.4417ccfc92": ["model.lever_source.stg_lever__archive_reason"], "test.lever_source.not_null_stg_lever__archive_reason_archive_reason_id.cc63399b59": ["model.lever_source.stg_lever__archive_reason"], "test.lever_source.unique_stg_lever__interview_interview_id.b161915552": ["model.lever_source.stg_lever__interview"], "test.lever_source.not_null_stg_lever__interview_interview_id.bee4bada2d": ["model.lever_source.stg_lever__interview"], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__interview_feedback_feedback_form_id__interview_id.4bfabdf8bb": ["model.lever_source.stg_lever__interview_feedback"], "test.lever_source.unique_stg_lever__feedback_form_feedback_form_id.57e3176d3a": ["model.lever_source.stg_lever__feedback_form"], "test.lever_source.not_null_stg_lever__feedback_form_feedback_form_id.98f8e699d2": ["model.lever_source.stg_lever__feedback_form"], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__feedback_form_field_feedback_form_id__field_index__value_index.4016ba4345": ["model.lever_source.stg_lever__feedback_form_field"], "test.lever_source.unique_stg_lever__requisition_requisition_id.be5b52d2ee": ["model.lever_source.stg_lever__requisition"], "test.lever_source.not_null_stg_lever__requisition_requisition_id.798ee475ff": ["model.lever_source.stg_lever__requisition"], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__requisition_posting_posting_id__requisition_id.a9d6f4fdda": ["model.lever_source.stg_lever__requisition_posting"], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_email_contact_id__email.6038c64dc6": ["model.lever_source.stg_lever__contact_email"], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_phone_contact_id__index.99ed288184": ["model.lever_source.stg_lever__contact_phone"], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__requisition_offer_offer_id__requisition_id.53a44f67bd": ["model.lever_source.stg_lever__requisition_offer"], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_link_contact_id__link.96602a71e5": ["model.lever_source.stg_lever__contact_link"], "test.lever_source.unique_stg_lever__resume_id.b601705ab7": ["model.lever_source.stg_lever__resume"], "test.lever_source.not_null_stg_lever__resume_id.b7007aa0fe": ["model.lever_source.stg_lever__resume"], "source.lever_source.lever.opportunity": [], "source.lever_source.lever.posting": [], "source.lever_source.lever.posting_tag": [], "source.lever_source.lever.posting_interview": [], "source.lever_source.lever.user": [], "source.lever_source.lever.interviewer_user": [], "source.lever_source.lever.opportunity_stage_history": [], "source.lever_source.lever.stage": [], "source.lever_source.lever.opportunity_source": [], "source.lever_source.lever.opportunity_tag": [], "source.lever_source.lever.application": [], "source.lever_source.lever.offer": [], "source.lever_source.lever.archive_reason": [], "source.lever_source.lever.interview": [], "source.lever_source.lever.interview_feedback": [], "source.lever_source.lever.feedback_form": [], "source.lever_source.lever.feedback_form_field": [], "source.lever_source.lever.requisition": [], "source.lever_source.lever.requisition_posting": [], "source.lever_source.lever.contact_email": [], "source.lever_source.lever.contact_phone": [], "source.lever_source.lever.requisition_offer": [], "source.lever_source.lever.contact_link": [], "source.lever_source.lever.resume": []}, "child_map": {"seed.lever_integration_tests.opportunity_source": [], "seed.lever_integration_tests.stage": [], "seed.lever_integration_tests.requisition_offer": [], "seed.lever_integration_tests.posting_tag": [], "seed.lever_integration_tests.opportunity_tag": [], "seed.lever_integration_tests.interview": [], "seed.lever_integration_tests.requisition_posting": [], "seed.lever_integration_tests.contact_email": [], "seed.lever_integration_tests.archive_reason": [], "seed.lever_integration_tests.requisition": [], "seed.lever_integration_tests.posting": [], "seed.lever_integration_tests.contact_link": [], "seed.lever_integration_tests.posting_interview": [], "seed.lever_integration_tests.feedback_form_field": [], "seed.lever_integration_tests.resume": [], "seed.lever_integration_tests.feedback_form": [], "seed.lever_integration_tests.interviewer_user": [], "seed.lever_integration_tests.user": [], "seed.lever_integration_tests.interview_feedback": [], "seed.lever_integration_tests.application": [], "seed.lever_integration_tests.opportunity": [], "seed.lever_integration_tests.contact_phone": [], "seed.lever_integration_tests.opportunity_stage_history": [], "seed.lever_integration_tests.offer": [], "model.lever.lever__posting_enhanced": ["model.lever.lever__opportunity_enhanced", "test.lever.not_null_lever__posting_enhanced_posting_id.0f16e9aa3c", "test.lever.unique_lever__posting_enhanced_posting_id.166f999091"], "model.lever.lever__requisition_enhanced": ["test.lever.not_null_lever__requisition_enhanced_requisition_id.215e62c13b", "test.lever.unique_lever__requisition_enhanced_requisition_id.aff49ec548"], "model.lever.lever__opportunity_stage_history": [], "model.lever.lever__opportunity_enhanced": ["model.lever.lever__opportunity_stage_history", "test.lever.not_null_lever__opportunity_enhanced_opportunity_id.13470c5ff7", "test.lever.unique_lever__opportunity_enhanced_opportunity_id.4730712f6d"], "model.lever.lever__interview_enhanced": ["model.lever.lever__opportunity_enhanced"], "model.lever.int_lever__requisition_users": ["model.lever.lever__requisition_enhanced", "test.lever.not_null_int_lever__requisition_users_requisition_id.94e57e2216", "test.lever.unique_int_lever__requisition_users_requisition_id.366ce4c197"], "model.lever.int_lever__posting_tags": ["model.lever.lever__posting_enhanced", "test.lever.not_null_int_lever__posting_tags_posting_id.c5af03291e", "test.lever.unique_int_lever__posting_tags_posting_id.d901f1612a"], "model.lever.int_lever__opportunity_contact_info": ["model.lever.lever__opportunity_enhanced", "test.lever.not_null_int_lever__opportunity_contact_info_opportunity_id.fd8afc3189", "test.lever.unique_int_lever__opportunity_contact_info_opportunity_id.d74cc60941"], "model.lever.int_lever__posting_interviews": ["model.lever.lever__posting_enhanced", "test.lever.not_null_int_lever__posting_interviews_posting_id.a9c419e7c1", "test.lever.unique_int_lever__posting_interviews_posting_id.a95c9d9e9e"], "model.lever.int_lever__opportunity_tags": ["model.lever.lever__opportunity_enhanced", "test.lever.not_null_int_lever__opportunity_tags_opportunity_id.91b6cd9841", "test.lever.unique_int_lever__opportunity_tags_opportunity_id.66df824288"], "model.lever.int_lever__posting_applications": ["model.lever.lever__posting_enhanced", "test.lever.not_null_int_lever__posting_applications_posting_id.c78c1b0c51", "test.lever.unique_int_lever__posting_applications_posting_id.be588f9e4a"], "model.lever.int_lever__contact_info": ["model.lever.int_lever__opportunity_contact_info", "test.lever.not_null_int_lever__contact_info_contact_id.22ddde3962", "test.lever.unique_int_lever__contact_info_contact_id.8c8f6baf02"], "model.lever.int_lever__opportunity_application": ["model.lever.int_lever__opportunity_users", "test.lever.not_null_int_lever__opportunity_application_opportunity_id.892f671317", "test.lever.unique_int_lever__opportunity_application_opportunity_id.766b390b67"], "model.lever.int_lever__opportunity_users": ["model.lever.int_lever__opportunity_contact_info", "model.lever.lever__interview_enhanced", "test.lever.not_null_int_lever__opportunity_users_opportunity_id.2128831135", "test.lever.unique_int_lever__opportunity_users_opportunity_id.d138ba15c2"], "model.lever.int_lever__interview_feedback": ["model.lever.int_lever__interview_users", "test.lever.dbt_utils_unique_combination_of_columns_int_lever__interview_feedback_feedback_form_id__interview_id.99a7ccec94"], "model.lever.int_lever__interview_users": ["model.lever.lever__interview_enhanced"], "model.lever_source.stg_lever__feedback_form": ["model.lever.int_lever__interview_feedback", "test.lever_source.not_null_stg_lever__feedback_form_feedback_form_id.98f8e699d2", "test.lever_source.unique_stg_lever__feedback_form_feedback_form_id.57e3176d3a"], "model.lever_source.stg_lever__requisition_offer": ["model.lever.lever__requisition_enhanced", "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__requisition_offer_offer_id__requisition_id.53a44f67bd"], "model.lever_source.stg_lever__posting_tag": ["model.lever.int_lever__posting_tags", "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__posting_tag_posting_id__tag_name.aa48251b13"], "model.lever_source.stg_lever__interviewer_user": ["model.lever.int_lever__interview_users"], "model.lever_source.stg_lever__resume": ["model.lever.int_lever__opportunity_contact_info", "test.lever_source.not_null_stg_lever__resume_id.b7007aa0fe", "test.lever_source.unique_stg_lever__resume_id.b601705ab7"], "model.lever_source.stg_lever__opportunity_tag": ["model.lever.int_lever__opportunity_tags", "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_tag_opportunity_id__tag_name.2b8dcb8c4c"], "model.lever_source.stg_lever__offer": ["model.lever.lever__opportunity_enhanced", "test.lever_source.not_null_stg_lever__offer_offer_id.dc41920c6a", "test.lever_source.unique_stg_lever__offer_offer_id.d2fc15a1f1"], "model.lever_source.stg_lever__contact_phone": ["model.lever.int_lever__contact_info", "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_phone_contact_id__index.99ed288184"], "model.lever_source.stg_lever__archive_reason": ["model.lever.lever__opportunity_enhanced", "test.lever_source.not_null_stg_lever__archive_reason_archive_reason_id.cc63399b59", "test.lever_source.unique_stg_lever__archive_reason_archive_reason_id.4417ccfc92"], "model.lever_source.stg_lever__requisition": ["model.lever.int_lever__requisition_users", "test.lever_source.not_null_stg_lever__requisition_requisition_id.798ee475ff", "test.lever_source.unique_stg_lever__requisition_requisition_id.be5b52d2ee"], "model.lever_source.stg_lever__requisition_posting": ["model.lever.lever__posting_enhanced", "model.lever.lever__requisition_enhanced", "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__requisition_posting_posting_id__requisition_id.a9d6f4fdda"], "model.lever_source.stg_lever__contact_link": ["model.lever.int_lever__contact_info", "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_link_contact_id__link.96602a71e5"], "model.lever_source.stg_lever__interview_feedback": ["model.lever.int_lever__interview_feedback", "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__interview_feedback_feedback_form_id__interview_id.4bfabdf8bb"], "model.lever_source.stg_lever__posting_interview": ["model.lever.int_lever__posting_interviews"], "model.lever_source.stg_lever__user": ["model.lever.int_lever__interview_users", "model.lever.int_lever__opportunity_users", "model.lever.int_lever__requisition_users", "model.lever.lever__opportunity_stage_history", "model.lever.lever__posting_enhanced", "test.lever_source.not_null_stg_lever__user_user_id.22ec43a8b0", "test.lever_source.unique_stg_lever__user_user_id.7fc22fb59e"], "model.lever_source.stg_lever__stage": ["model.lever.lever__opportunity_enhanced", "model.lever.lever__opportunity_stage_history", "test.lever_source.not_null_stg_lever__stage_stage_id.438d91b1a2", "test.lever_source.unique_stg_lever__stage_stage_id.0709db19c3"], "model.lever_source.stg_lever__feedback_form_field": ["test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__feedback_form_field_feedback_form_id__field_index__value_index.4016ba4345"], "model.lever_source.stg_lever__opportunity_source": ["model.lever.int_lever__opportunity_contact_info", "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_source_opportunity_id__source.24e3de3dec"], "model.lever_source.stg_lever__opportunity": ["model.lever.int_lever__opportunity_application", "test.lever_source.not_null_stg_lever__opportunity_opportunity_id.9c5eceacb7", "test.lever_source.unique_stg_lever__opportunity_opportunity_id.895b120dc5"], "model.lever_source.stg_lever__posting": ["model.lever.lever__posting_enhanced", "test.lever_source.not_null_stg_lever__posting_posting_id.628ea50829", "test.lever_source.unique_stg_lever__posting_posting_id.1eebf1e1c9"], "model.lever_source.stg_lever__contact_email": ["model.lever.int_lever__contact_info", "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_email_contact_id__email.6038c64dc6"], "model.lever_source.stg_lever__application": ["model.lever.int_lever__opportunity_application", "model.lever.int_lever__posting_applications", "test.lever_source.not_null_stg_lever__application_application_id.ea2068d8da", "test.lever_source.unique_stg_lever__application_application_id.6b937cf15c"], "model.lever_source.stg_lever__opportunity_stage_history": ["model.lever.lever__opportunity_stage_history", "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_stage_history_opportunity_id__updated_at.4032013edb"], "model.lever_source.stg_lever__interview": ["model.lever.int_lever__interview_feedback", "model.lever.int_lever__posting_interviews", "test.lever_source.not_null_stg_lever__interview_interview_id.bee4bada2d", "test.lever_source.unique_stg_lever__interview_interview_id.b161915552"], "model.lever_source.stg_lever__opportunity_source_tmp": ["model.lever_source.stg_lever__opportunity_source", "model.lever_source.stg_lever__opportunity_source"], "model.lever_source.stg_lever__posting_tmp": ["model.lever_source.stg_lever__posting", "model.lever_source.stg_lever__posting"], "model.lever_source.stg_lever__interview_feedback_tmp": ["model.lever_source.stg_lever__interview_feedback", "model.lever_source.stg_lever__interview_feedback"], "model.lever_source.stg_lever__feedback_form_tmp": ["model.lever_source.stg_lever__feedback_form", "model.lever_source.stg_lever__feedback_form"], "model.lever_source.stg_lever__contact_link_tmp": ["model.lever_source.stg_lever__contact_link", "model.lever_source.stg_lever__contact_link"], "model.lever_source.stg_lever__contact_phone_tmp": ["model.lever_source.stg_lever__contact_phone", "model.lever_source.stg_lever__contact_phone"], "model.lever_source.stg_lever__opportunity_tmp": ["model.lever_source.stg_lever__opportunity", "model.lever_source.stg_lever__opportunity"], "model.lever_source.stg_lever__posting_interview_tmp": ["model.lever_source.stg_lever__posting_interview", "model.lever_source.stg_lever__posting_interview"], "model.lever_source.stg_lever__opportunity_tag_tmp": ["model.lever_source.stg_lever__opportunity_tag", "model.lever_source.stg_lever__opportunity_tag"], "model.lever_source.stg_lever__opportunity_stage_history_tmp": ["model.lever_source.stg_lever__opportunity_stage_history", "model.lever_source.stg_lever__opportunity_stage_history"], "model.lever_source.stg_lever__stage_tmp": ["model.lever_source.stg_lever__stage", "model.lever_source.stg_lever__stage"], "model.lever_source.stg_lever__requisition_offer_tmp": ["model.lever_source.stg_lever__requisition_offer", "model.lever_source.stg_lever__requisition_offer"], "model.lever_source.stg_lever__posting_tag_tmp": ["model.lever_source.stg_lever__posting_tag", "model.lever_source.stg_lever__posting_tag"], "model.lever_source.stg_lever__application_tmp": ["model.lever_source.stg_lever__application", "model.lever_source.stg_lever__application"], "model.lever_source.stg_lever__requisition_posting_tmp": ["model.lever_source.stg_lever__requisition_posting", "model.lever_source.stg_lever__requisition_posting"], "model.lever_source.stg_lever__archive_reason_tmp": ["model.lever_source.stg_lever__archive_reason", "model.lever_source.stg_lever__archive_reason"], "model.lever_source.stg_lever__resume_tmp": ["model.lever_source.stg_lever__resume", "model.lever_source.stg_lever__resume"], "model.lever_source.stg_lever__interview_tmp": ["model.lever_source.stg_lever__interview", "model.lever_source.stg_lever__interview"], "model.lever_source.stg_lever__contact_email_tmp": ["model.lever_source.stg_lever__contact_email", "model.lever_source.stg_lever__contact_email"], "model.lever_source.stg_lever__user_tmp": ["model.lever_source.stg_lever__user", "model.lever_source.stg_lever__user"], "model.lever_source.stg_lever__requisition_tmp": ["model.lever_source.stg_lever__requisition", "model.lever_source.stg_lever__requisition"], "model.lever_source.stg_lever__feedback_form_field_tmp": ["model.lever_source.stg_lever__feedback_form_field", "model.lever_source.stg_lever__feedback_form_field"], "model.lever_source.stg_lever__interviewer_user_tmp": ["model.lever_source.stg_lever__interviewer_user", "model.lever_source.stg_lever__interviewer_user"], "model.lever_source.stg_lever__offer_tmp": ["model.lever_source.stg_lever__offer", "model.lever_source.stg_lever__offer"], "test.lever.unique_lever__opportunity_enhanced_opportunity_id.4730712f6d": [], "test.lever.not_null_lever__opportunity_enhanced_opportunity_id.13470c5ff7": [], "test.lever.unique_lever__posting_enhanced_posting_id.166f999091": [], "test.lever.not_null_lever__posting_enhanced_posting_id.0f16e9aa3c": [], "test.lever.unique_lever__requisition_enhanced_requisition_id.aff49ec548": [], "test.lever.not_null_lever__requisition_enhanced_requisition_id.215e62c13b": [], "test.lever.unique_int_lever__contact_info_contact_id.8c8f6baf02": [], "test.lever.not_null_int_lever__contact_info_contact_id.22ddde3962": [], "test.lever.dbt_utils_unique_combination_of_columns_int_lever__interview_feedback_feedback_form_id__interview_id.99a7ccec94": [], "test.lever.unique_int_lever__opportunity_application_opportunity_id.766b390b67": [], "test.lever.not_null_int_lever__opportunity_application_opportunity_id.892f671317": [], "test.lever.unique_int_lever__opportunity_contact_info_opportunity_id.d74cc60941": [], "test.lever.not_null_int_lever__opportunity_contact_info_opportunity_id.fd8afc3189": [], "test.lever.unique_int_lever__opportunity_tags_opportunity_id.66df824288": [], "test.lever.not_null_int_lever__opportunity_tags_opportunity_id.91b6cd9841": [], "test.lever.unique_int_lever__opportunity_users_opportunity_id.d138ba15c2": [], "test.lever.not_null_int_lever__opportunity_users_opportunity_id.2128831135": [], "test.lever.unique_int_lever__posting_applications_posting_id.be588f9e4a": [], "test.lever.not_null_int_lever__posting_applications_posting_id.c78c1b0c51": [], "test.lever.unique_int_lever__posting_interviews_posting_id.a95c9d9e9e": [], "test.lever.not_null_int_lever__posting_interviews_posting_id.a9c419e7c1": [], "test.lever.unique_int_lever__posting_tags_posting_id.d901f1612a": [], "test.lever.not_null_int_lever__posting_tags_posting_id.c5af03291e": [], "test.lever.unique_int_lever__requisition_users_requisition_id.366ce4c197": [], "test.lever.not_null_int_lever__requisition_users_requisition_id.94e57e2216": [], "test.lever_source.unique_stg_lever__opportunity_opportunity_id.895b120dc5": [], "test.lever_source.not_null_stg_lever__opportunity_opportunity_id.9c5eceacb7": [], "test.lever_source.unique_stg_lever__posting_posting_id.1eebf1e1c9": [], "test.lever_source.not_null_stg_lever__posting_posting_id.628ea50829": [], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__posting_tag_posting_id__tag_name.aa48251b13": [], "test.lever_source.unique_stg_lever__user_user_id.7fc22fb59e": [], "test.lever_source.not_null_stg_lever__user_user_id.22ec43a8b0": [], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_stage_history_opportunity_id__updated_at.4032013edb": [], "test.lever_source.unique_stg_lever__stage_stage_id.0709db19c3": [], "test.lever_source.not_null_stg_lever__stage_stage_id.438d91b1a2": [], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_source_opportunity_id__source.24e3de3dec": [], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__opportunity_tag_opportunity_id__tag_name.2b8dcb8c4c": [], "test.lever_source.unique_stg_lever__application_application_id.6b937cf15c": [], "test.lever_source.not_null_stg_lever__application_application_id.ea2068d8da": [], "test.lever_source.unique_stg_lever__offer_offer_id.d2fc15a1f1": [], "test.lever_source.not_null_stg_lever__offer_offer_id.dc41920c6a": [], "test.lever_source.unique_stg_lever__archive_reason_archive_reason_id.4417ccfc92": [], "test.lever_source.not_null_stg_lever__archive_reason_archive_reason_id.cc63399b59": [], "test.lever_source.unique_stg_lever__interview_interview_id.b161915552": [], "test.lever_source.not_null_stg_lever__interview_interview_id.bee4bada2d": [], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__interview_feedback_feedback_form_id__interview_id.4bfabdf8bb": [], "test.lever_source.unique_stg_lever__feedback_form_feedback_form_id.57e3176d3a": [], "test.lever_source.not_null_stg_lever__feedback_form_feedback_form_id.98f8e699d2": [], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__feedback_form_field_feedback_form_id__field_index__value_index.4016ba4345": [], "test.lever_source.unique_stg_lever__requisition_requisition_id.be5b52d2ee": [], "test.lever_source.not_null_stg_lever__requisition_requisition_id.798ee475ff": [], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__requisition_posting_posting_id__requisition_id.a9d6f4fdda": [], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_email_contact_id__email.6038c64dc6": [], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_phone_contact_id__index.99ed288184": [], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__requisition_offer_offer_id__requisition_id.53a44f67bd": [], "test.lever_source.dbt_utils_unique_combination_of_columns_stg_lever__contact_link_contact_id__link.96602a71e5": [], "test.lever_source.unique_stg_lever__resume_id.b601705ab7": [], "test.lever_source.not_null_stg_lever__resume_id.b7007aa0fe": [], "source.lever_source.lever.opportunity": ["model.lever_source.stg_lever__opportunity_tmp"], "source.lever_source.lever.posting": ["model.lever_source.stg_lever__posting_tmp"], "source.lever_source.lever.posting_tag": ["model.lever_source.stg_lever__posting_tag_tmp"], "source.lever_source.lever.posting_interview": ["model.lever_source.stg_lever__posting_interview_tmp"], "source.lever_source.lever.user": ["model.lever_source.stg_lever__user_tmp"], "source.lever_source.lever.interviewer_user": ["model.lever_source.stg_lever__interviewer_user_tmp"], "source.lever_source.lever.opportunity_stage_history": ["model.lever_source.stg_lever__opportunity_stage_history_tmp"], "source.lever_source.lever.stage": ["model.lever_source.stg_lever__stage_tmp"], "source.lever_source.lever.opportunity_source": ["model.lever_source.stg_lever__opportunity_source_tmp"], "source.lever_source.lever.opportunity_tag": ["model.lever_source.stg_lever__opportunity_tag_tmp"], "source.lever_source.lever.application": ["model.lever_source.stg_lever__application_tmp"], "source.lever_source.lever.offer": ["model.lever_source.stg_lever__offer_tmp"], "source.lever_source.lever.archive_reason": ["model.lever_source.stg_lever__archive_reason_tmp"], "source.lever_source.lever.interview": ["model.lever_source.stg_lever__interview_tmp"], "source.lever_source.lever.interview_feedback": ["model.lever_source.stg_lever__interview_feedback_tmp"], "source.lever_source.lever.feedback_form": ["model.lever_source.stg_lever__feedback_form_tmp"], "source.lever_source.lever.feedback_form_field": ["model.lever_source.stg_lever__feedback_form_field_tmp"], "source.lever_source.lever.requisition": ["model.lever_source.stg_lever__requisition_tmp"], "source.lever_source.lever.requisition_posting": ["model.lever_source.stg_lever__requisition_posting_tmp"], "source.lever_source.lever.contact_email": ["model.lever_source.stg_lever__contact_email_tmp"], "source.lever_source.lever.contact_phone": ["model.lever_source.stg_lever__contact_phone_tmp"], "source.lever_source.lever.requisition_offer": ["model.lever_source.stg_lever__requisition_offer_tmp"], "source.lever_source.lever.contact_link": ["model.lever_source.stg_lever__contact_link_tmp"], "source.lever_source.lever.resume": ["model.lever_source.stg_lever__resume_tmp"]}}